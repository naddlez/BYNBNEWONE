%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: bynbbusinesscard.ai
%%Creator: Adobe Graphics Manager
%%For: Nadia Bothe
%%CreationDate: 16/10/13
%%BoundingBox: 57 0 539 842
%%HiResBoundingBox: 57.1000 0 538.1801 841.8900
%%CropBox: 57.1000 0 538.1801 841.8900
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%TargetDevice: (Canon MX350 series) (3010.000) 705
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A4.FullBleed
<</PageSize[595.28 841.89]/ImagingBBox null/cupsBorderlessScalingFactor 1.0171428571>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [57.100006103515 0 538.18005371093 841.89001464843]]
[/BleedBox [57.100006103515 0 538.18005371093 841.89001464843]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[0 -1 1 0 0 841.89 ]ct
gsave
np
gsave
0 57.1 mo
0 538.18 li
841.89 538.18 li
841.89 57.1 li
cp
clp
[1 0 0 1 0 0 ]ct
852.301 545.234 mo
-10.4108 545.234 li
-10.4108 52.2518 li
852.301 52.2518 li
852.301 545.234 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[351.301 0 0 351.301 513.376 -18.6398 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.13 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[351.301 0 0 351.301 513.376 -18.6398 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~zz!<E3%!<E3%!WiE)!WiE)!s8W-!s8W."9\i1"9\i2"U,&5"U,&6"pP89"pP8:#6tJ=#6tM?#RC\A#RC
_C#mgnE#mgqG$47+I$4@4L$O[=M$OdFP$k*OQ$k3XT%1NaU%1WjX%LrsY%hB0]%hB0]&.fBa&.fBa&J5
Te&J5Te&eYfi&eYfj',)#m',)#n'GM5q'GM5r'bqGu'bqK"()@Z$()@]&(Ddl((Ddo*(`4),(`4,.)&X
;0)&aD3)B'M4)B0V7)]K_8)]Th;*#oq<*??.@*??.@*Zc@D*Zc@D+!2RH+!2RH+<VdL+<VdM~>
]
>>
0 0 0 0 0 1 [
]true true []
/Separation
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
222.345 281.236 mo
-7.44849 533.449 li
-7.44849 48.0627 li
222.345 48.0627 li
222.345 281.236 li
cp
1 1 .15 1 cmyk
f
208.841 453.919 mo
-9.6474 453.919 li
-9.6474 445.912 li
208.841 445.912 li
208.841 453.919 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[218.489 0 0 218.489 -9.6474 449.915 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.120183 ]
/C1 [.317148 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds [.398773 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[218.489 0 0 218.489 -9.6474 449.915 ]ct
clp
/1 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~*ZlIH+<_mP+sS<X,UF``-7:/g-n$Mn.Olr!/1`A)/hSe10JG491,:XA1c.'I2E!KQ3&ioY3]]>a4?Pbi
5!D1q5X7V$6:+%,6psI47Rfj;7n?0B8P2TJ92&#R9hnGZ:Jakb;,L4h;c?Uo<)cjt<`W7&='&L+=]nm2
>$>-7>[1N>?!^iD?XI/J?t!JP@U`eV@q9+\AS#FbAnPahBP;'nBkhBtCMR^%Ci+$+DJj?1DfBZ7EH,u=
EcZ;CFEDVIF`qqOGB\7UG^4R[H?smaH[L3gI=6NmIXcisJ:N0$JV&K*K7ef0KS>,6L5(G<LPUbBM2@+I
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
858.033 284.577 mo
198.809 284.577 li
198.809 277.895 li
858.033 277.895 li
858.033 284.577 li
cp
1 1 .15 1 cmyk
f
208.841 452.852 mo
207.216 450.669 203.628 449.563 198.156 449.563 cv
184.881 449.563 li
184.894 449.534 li
163.133 449.534 li
163.12 449.563 li
130.579 449.563 li
130.566 449.534 li
114.283 449.534 li
114.277 449.563 li
57.2214 445.942 li
49.3979 451.733 li
108.949 462.93 li
103.595 476.378 li
44.6085 478.456 li
36.9741 484.257 li
98.163 490.009 li
92.8451 503.365 li
31.9988 510.977 li
24.5603 516.771 li
166.157 516.771 li
172.813 516.771 178.349 515.655 182.614 513.45 cv
187.067 511.147 190.32 507.603 192.287 502.919 cv
195.765 494.622 li
197.334 490.87 197.507 487.757 196.264 485.386 cv
195.536 483.999 194.352 482.919 192.721 482.162 cv
194.773 481.506 196.649 480.599 198.326 479.448 cv
201.35 477.376 203.608 474.603 205.034 471.194 cv
208.345 463.295 li
210.316 458.594 210.485 455.077 208.841 452.852 cv
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[185.4 0 0 185.4 24.5603 481.356 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[185.4 0 0 185.4 24.5603 481.356 ]ct
clp
/2 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!$#!WiH+"9\l3"pYA=#RLeE$4@4M%1NdW%hB3_&J5Wg',2,q'c%Q$(Dmu,)B'P6*#ot>*ZcCF+<_mP
+sS<X,UF``-RU;j.4H_r.k</%/M8Y/0/,(70etL?1c.'I2E!KQ3&ioY3]fDc4?Yhk5!M7s5s[h(6UO70
77B[97n?0B8P2TJ92&#R:/4S\:f("d;GpFm<)lq!<``@)=BSd1>?b?;?!UcC?XI2L@:E\U@q9+]AS,Oe
BP;*oC2.O"Ci!s+DJsH4E,fl<EcZ;DF`hkNGB\:VH$O^_H[L3hI=?WpIt3*$JqAW-KS5&5L5(J>Ll$tG
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
147.59 469.464 mo
160.693 468.329 li
160.941 467.725 li
145.528 464.825 li
147.59 469.464 li
cp
122.815 495.829 mo
140.964 492.811 li
139.692 489.614 li
125.839 488.309 li
122.815 495.829 li
cp
31.777 513.153 mo
31.5942 510.977 li
99.5854 499.685 li
104.903 486.341 li
44.1876 480.632 li
44.1942 478.453 li
110.339 472.707 li
115.712 459.22 li
56.5983 448.108 li
56.8038 445.942 li
121.004 445.942 li
121.758 445.912 li
137.101 445.912 li
137.114 445.942 li
169.841 445.942 li
170.588 445.912 li
191.742 445.912 li
191.729 445.942 li
204.499 445.942 li
210.133 445.942 213.709 447.074 215.441 449.406 cv
217.197 451.772 217.066 455.269 215.047 460.094 cv
211.732 467.996 li
211.073 469.566 210.231 471.014 209.216 472.3 cv
208.831 472.773 li
208.365 473.301 li
207.928 473.755 li
207.229 474.42 li
206.779 474.822 li
206.309 475.203 li
205.81 475.582 li
205.644 475.703 205.471 475.826 205.298 475.947 cv
203.559 477.135 201.598 478.058 199.432 478.701 cv
201.008 479.494 202.172 480.596 202.913 482.006 cv
204.202 484.469 204.055 487.64 202.469 491.421 cv
198.992 499.721 li
197.089 504.256 193.958 507.679 189.69 509.884 cv
185.501 512.047 180.023 513.153 173.41 513.153 cv
31.777 513.153 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[185.07 0 0 185.07 31.5942 479.533 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[185.07 0 0 185.07 31.5942 479.533 ]ct
clp
/3 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~:f1(e;,U:i;GpFl;c?Xp<)cgs<E3%"<`W7%='&I)=BJ[-=]nm1=^#!4>$G38>?b?;>[1Q??!U`B?=$rF
?XI/J?smAM@:<SQ@U`eU@UinX@q9+\A7T7_AS#IcAnG[gB4kjjBP;'nBk_9qC2.KuCMR^$Ci!p(Ci+$+
D/O6/DJjB2Df9T6E,]c9EH,u=EcQ2AF)uDDFEDVHF`hhLF`qqOG'A.SGB\:VG^+LZH$O^^H?smaH[C*e
I!g<hI=6NlIXZ`pIt)rtIt3'"J:W9&JUrE)JqAW-K7ef0KS5#4KnY58L5(G;LPLY?LkpkCLl$tFM2I1J
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
31.777 512.054 mo
161.296 490.547 li
44.292 479.546 li
171.211 468.545 li
56.8038 447.031 li
204.499 447.031 li
209.709 447.031 213.066 448.043 214.56 450.059 cv
216.048 452.069 215.878 455.276 214.032 459.67 cv
210.727 467.576 li
209.422 470.688 207.406 473.177 204.685 475.04 cv
201.967 476.9 198.695 478.058 194.884 478.511 cv
198.443 479.004 200.802 480.339 201.938 482.511 cv
203.083 484.687 202.92 487.513 201.455 491.004 cv
197.983 499.297 li
196.173 503.613 193.243 506.817 189.184 508.915 cv
185.136 511.006 179.876 512.054 173.41 512.054 cv
31.777 512.054 li
cp
1 1 .15 1 cmyk
f
gsave
148.706 512.886 mo
132.403 471.817 li
115.862 512.886 li
94.411 512.886 li
121.082 445.912 li
137.362 445.912 li
154.344 484.064 li
169.929 445.912 li
191.687 445.912 li
164.024 512.886 li
148.706 512.886 li
cp
clp
121.082 445.912 mo
94.411 512.886 li
121.082 445.912 li
cp
0 0 0 0 cmyk
f
121.585 445.912 mo
94.9037 512.886 li
94.411 512.886 li
121.082 445.912 li
121.585 445.912 li
cp
f
122.09 445.912 mo
95.4028 512.886 li
94.9037 512.886 li
121.585 445.912 li
122.09 445.912 li
cp
.00390625 0 0 0 cmyk
f
122.593 445.912 mo
95.9021 512.886 li
95.4028 512.886 li
122.09 445.912 li
122.593 445.912 li
cp
.0078125 .00390625 .00390625 0 cmyk
f
123.099 445.912 mo
96.3979 512.886 li
95.9021 512.886 li
122.593 445.912 li
123.099 445.912 li
cp
.015625 .00390625 .0078125 0 cmyk
f
123.601 445.912 mo
96.8971 512.886 li
96.3979 512.886 li
123.099 445.912 li
123.601 445.912 li
cp
.0195313 .0117188 .0078125 0 cmyk
f
124.103 445.912 mo
97.3898 512.886 li
96.8971 512.886 li
123.601 445.912 li
124.103 445.912 li
cp
f
124.612 445.912 mo
97.8889 512.886 li
97.3898 512.886 li
124.103 445.912 li
124.612 445.912 li
cp
.0234375 .015625 .0117188 0 cmyk
f
125.115 445.912 mo
98.3849 512.886 li
97.8889 512.886 li
124.612 445.912 li
125.115 445.912 li
cp
.0273438 .0195313 .015625 0 cmyk
f
125.617 445.912 mo
98.884 512.886 li
98.3849 512.886 li
125.115 445.912 li
125.617 445.912 li
cp
.03125 .015625 .0195313 0 cmyk
f
126.123 445.912 mo
99.3832 512.886 li
98.884 512.886 li
125.617 445.912 li
126.123 445.912 li
cp
.0351563 .0195313 .0195313 0 cmyk
f
126.625 445.912 mo
99.879 512.886 li
99.3832 512.886 li
126.123 445.912 li
126.625 445.912 li
cp
.0390625 .0195313 .0234375 0 cmyk
f
127.138 445.912 mo
100.378 512.886 li
99.879 512.886 li
126.625 445.912 li
127.138 445.912 li
cp
.0351563 .0234375 .0234375 0 cmyk
f
127.64 445.912 mo
100.874 512.886 li
100.378 512.886 li
127.138 445.912 li
127.64 445.912 li
cp
.0390625 .0273438 .0234375 0 cmyk
f
128.139 445.912 mo
101.37 512.886 li
100.874 512.886 li
127.64 445.912 li
128.139 445.912 li
cp
.0429688 .03125 .0273438 0 cmyk
f
128.648 445.912 mo
101.866 512.886 li
101.37 512.886 li
128.139 445.912 li
128.648 445.912 li
cp
.046875 .03125 .03125 0 cmyk
f
129.151 445.912 mo
102.365 512.886 li
101.866 512.886 li
128.648 445.912 li
129.151 445.912 li
cp
.0507813 .03125 .0351563 0 cmyk
f
129.656 445.912 mo
102.858 512.886 li
102.365 512.886 li
129.151 445.912 li
129.656 445.912 li
cp
.0546875 .0351563 .0351563 0 cmyk
f
130.162 445.912 mo
103.36 512.886 li
102.858 512.886 li
129.656 445.912 li
130.162 445.912 li
cp
.0546875 .0429688 .0351563 0 cmyk
f
130.664 445.912 mo
103.859 512.886 li
103.36 512.886 li
130.162 445.912 li
130.664 445.912 li
cp
.0625 .0429688 .0390625 0 cmyk
f
131.17 445.912 mo
104.355 512.886 li
103.859 512.886 li
130.664 445.912 li
131.17 445.912 li
cp
.0664063 .0429688 .046875 0 cmyk
f
131.672 445.912 mo
104.854 512.886 li
104.355 512.886 li
131.17 445.912 li
131.672 445.912 li
cp
.0703125 .046875 .0429688 0 cmyk
f
132.175 445.912 mo
105.347 512.886 li
104.854 512.886 li
131.672 445.912 li
132.175 445.912 li
cp
.0742188 .046875 .046875 0 cmyk
f
132.684 445.912 mo
105.846 512.886 li
105.347 512.886 li
132.175 445.912 li
132.684 445.912 li
cp
.0742188 .0507813 .0507813 0 cmyk
f
133.183 445.912 mo
106.339 512.886 li
105.846 512.886 li
132.684 445.912 li
133.183 445.912 li
cp
.0742188 .0546875 .0546875 0 cmyk
f
133.689 445.912 mo
106.841 512.886 li
106.339 512.886 li
133.183 445.912 li
133.689 445.912 li
cp
.078125 .0585938 .0546875 0 cmyk
f
134.198 445.912 mo
107.34 512.886 li
106.841 512.886 li
133.689 445.912 li
134.198 445.912 li
cp
.0820313 .0585938 .0585938 0 cmyk
f
134.697 445.912 mo
107.833 512.886 li
107.34 512.886 li
134.198 445.912 li
134.697 445.912 li
cp
.09375 .0625 .0625 0 cmyk
f
135.203 445.912 mo
108.336 512.886 li
107.833 512.886 li
134.697 445.912 li
135.203 445.912 li
cp
.0976563 .0664063 .0664063 0 cmyk
f
135.708 445.912 mo
108.828 512.886 li
108.336 512.886 li
135.203 445.912 li
135.708 445.912 li
cp
.101563 .0703125 .0703125 0 cmyk
f
136.211 445.912 mo
109.327 512.886 li
108.828 512.886 li
135.708 445.912 li
136.211 445.912 li
cp
f
136.716 445.912 mo
109.823 512.886 li
109.327 512.886 li
136.211 445.912 li
136.716 445.912 li
cp
.105469 .0742188 .0742188 0 cmyk
f
137.219 445.912 mo
110.322 512.886 li
109.823 512.886 li
136.716 445.912 li
137.219 445.912 li
cp
.109375 .0742188 .0742188 0 cmyk
f
137.721 445.912 mo
110.815 512.886 li
110.322 512.886 li
137.219 445.912 li
137.721 445.912 li
cp
.109375 .078125 .078125 0 cmyk
f
138.227 445.912 mo
111.314 512.886 li
110.815 512.886 li
137.721 445.912 li
138.227 445.912 li
cp
.113281 .0820313 .078125 0 cmyk
f
138.733 445.912 mo
111.817 512.886 li
111.314 512.886 li
138.227 445.912 li
138.733 445.912 li
cp
.121094 .078125 .0820313 0 cmyk
f
139.235 445.912 mo
112.309 512.886 li
111.817 512.886 li
138.733 445.912 li
139.235 445.912 li
cp
.121094 .0859375 .0859375 0 cmyk
f
139.741 445.912 mo
112.808 512.886 li
112.309 512.886 li
139.235 445.912 li
139.741 445.912 li
cp
.125 .0898438 .0898438 0 cmyk
f
140.243 445.912 mo
113.304 512.886 li
112.808 512.886 li
139.741 445.912 li
140.243 445.912 li
cp
.128906 .09375 .09375 0 cmyk
f
140.755 445.912 mo
113.804 512.886 li
113.304 512.886 li
140.243 445.912 li
140.755 445.912 li
cp
.128906 .0976563 .0898438 0 cmyk
f
141.251 445.912 mo
114.296 512.886 li
113.804 512.886 li
140.755 445.912 li
141.251 445.912 li
cp
.136719 .09375 .0976563 0 cmyk
f
141.757 445.912 mo
114.795 512.886 li
114.296 512.886 li
141.251 445.912 li
141.757 445.912 li
cp
.140625 .0976563 .101563 0 cmyk
f
142.259 445.912 mo
115.291 512.886 li
114.795 512.886 li
141.757 445.912 li
142.259 445.912 li
cp
.140625 .101563 .101563 0 cmyk
f
142.768 445.912 mo
115.79 512.886 li
115.291 512.886 li
142.259 445.912 li
142.768 445.912 li
cp
.144531 .105469 .101563 0 cmyk
f
143.274 445.912 mo
116.29 512.886 li
115.79 512.886 li
142.768 445.912 li
143.274 445.912 li
cp
.148438 .109375 .105469 0 cmyk
f
143.776 445.912 mo
116.786 512.886 li
116.29 512.886 li
143.274 445.912 li
143.776 445.912 li
cp
.152344 .113281 .105469 0 cmyk
f
144.276 445.912 mo
117.278 512.886 li
116.786 512.886 li
143.776 445.912 li
144.276 445.912 li
cp
.15625 .109375 .113281 0 cmyk
f
144.788 445.912 mo
117.777 512.886 li
117.278 512.886 li
144.276 445.912 li
144.788 445.912 li
cp
.15625 .113281 .117188 0 cmyk
f
145.29 445.912 mo
118.276 512.886 li
117.777 512.886 li
144.788 445.912 li
145.29 445.912 li
cp
.160156 .121094 .113281 0 cmyk
f
145.793 445.912 mo
118.772 512.886 li
118.276 512.886 li
145.29 445.912 li
145.793 445.912 li
cp
.164063 .121094 .117188 0 cmyk
f
146.298 445.912 mo
119.275 512.886 li
118.772 512.886 li
145.793 445.912 li
146.298 445.912 li
cp
.167969 .125 .121094 0 cmyk
f
146.801 445.912 mo
119.767 512.886 li
119.275 512.886 li
146.298 445.912 li
146.801 445.912 li
cp
.171875 .125 .125 0 cmyk
f
147.307 445.912 mo
120.267 512.886 li
119.767 512.886 li
146.801 445.912 li
147.307 445.912 li
cp
.175781 .125 .128906 0 cmyk
f
147.809 445.912 mo
120.766 512.886 li
120.267 512.886 li
147.307 445.912 li
147.809 445.912 li
cp
.175781 .132813 .125 0 cmyk
f
148.315 445.912 mo
121.258 512.886 li
120.766 512.886 li
147.809 445.912 li
148.315 445.912 li
cp
.179688 .136719 .128906 0 cmyk
f
148.82 445.912 mo
121.758 512.886 li
121.258 512.886 li
148.315 445.912 li
148.82 445.912 li
cp
.1875 .140625 .132813 0 cmyk
f
149.323 445.912 mo
122.25 512.886 li
121.758 512.886 li
148.82 445.912 li
149.323 445.912 li
cp
.191406 .136719 .140625 0 cmyk
f
149.828 445.912 mo
122.753 512.886 li
122.25 512.886 li
149.323 445.912 li
149.828 445.912 li
cp
.195313 .144531 .140625 0 cmyk
f
150.331 445.912 mo
123.249 512.886 li
122.753 512.886 li
149.828 445.912 li
150.331 445.912 li
cp
.203125 .148438 .144531 0 cmyk
f
150.833 445.912 mo
123.748 512.886 li
123.249 512.886 li
150.331 445.912 li
150.833 445.912 li
cp
.207031 .15625 .152344 0 cmyk
f
151.342 445.912 mo
124.247 512.886 li
123.748 512.886 li
150.833 445.912 li
151.342 445.912 li
cp
.210938 .15625 .160156 0 cmyk
f
151.845 445.912 mo
124.743 512.886 li
124.247 512.886 li
151.342 445.912 li
151.845 445.912 li
cp
.214844 .160156 .15625 0 cmyk
f
152.347 445.912 mo
125.235 512.886 li
124.743 512.886 li
151.845 445.912 li
152.347 445.912 li
cp
.21875 .164063 .160156 0 cmyk
f
152.853 445.912 mo
125.731 512.886 li
125.235 512.886 li
152.347 445.912 li
152.853 445.912 li
cp
.222656 .164063 .164063 0 cmyk
f
153.359 445.912 mo
126.234 512.886 li
125.731 512.886 li
152.853 445.912 li
153.359 445.912 li
cp
.226563 .167969 .164063 0 cmyk
f
153.861 445.912 mo
126.73 512.886 li
126.234 512.886 li
153.359 445.912 li
153.861 445.912 li
cp
.226563 .175781 .167969 0 cmyk
f
154.37 445.912 mo
127.226 512.886 li
126.73 512.886 li
153.861 445.912 li
154.37 445.912 li
cp
.230469 .171875 .167969 0 cmyk
f
154.869 445.912 mo
127.728 512.886 li
127.226 512.886 li
154.37 445.912 li
154.869 445.912 li
cp
.234375 .175781 .171875 0 cmyk
f
155.378 445.912 mo
128.224 512.886 li
127.728 512.886 li
154.869 445.912 li
155.378 445.912 li
cp
.238281 .179688 .175781 0 cmyk
f
155.877 445.912 mo
128.717 512.886 li
128.224 512.886 li
155.378 445.912 li
155.877 445.912 li
cp
.246094 .183594 .179688 0 cmyk
f
156.38 445.912 mo
129.216 512.886 li
128.717 512.886 li
155.877 445.912 li
156.38 445.912 li
cp
.246094 .1875 .183594 0 cmyk
f
156.889 445.912 mo
129.715 512.886 li
129.216 512.886 li
156.38 445.912 li
156.889 445.912 li
cp
.25 .1875 .183594 0 cmyk
f
157.394 445.912 mo
130.208 512.886 li
129.715 512.886 li
156.889 445.912 li
157.394 445.912 li
cp
.253906 .191406 .1875 0 cmyk
f
157.897 445.912 mo
130.71 512.886 li
130.208 512.886 li
157.394 445.912 li
157.897 445.912 li
cp
.257813 .195313 .191406 0 cmyk
f
158.402 445.912 mo
131.203 512.886 li
130.71 512.886 li
157.897 445.912 li
158.402 445.912 li
cp
.261719 .199219 .195313 0 cmyk
f
158.905 445.912 mo
131.702 512.886 li
131.203 512.886 li
158.402 445.912 li
158.905 445.912 li
cp
.269531 .203125 .199219 0 cmyk
f
159.411 445.912 mo
132.204 512.886 li
131.702 512.886 li
158.905 445.912 li
159.411 445.912 li
cp
.265625 .207031 .195313 0 cmyk
f
159.916 445.912 mo
132.697 512.886 li
132.204 512.886 li
159.411 445.912 li
159.916 445.912 li
cp
.273438 .207031 .203125 0 cmyk
f
160.412 445.912 mo
133.196 512.886 li
132.697 512.886 li
159.916 445.912 li
160.412 445.912 li
cp
.277344 .210938 .207031 0 cmyk
f
160.924 445.912 mo
133.689 512.886 li
133.196 512.886 li
160.412 445.912 li
160.924 445.912 li
cp
.28125 .214844 .210938 0 cmyk
f
161.427 445.912 mo
134.185 512.886 li
133.689 512.886 li
160.924 445.912 li
161.427 445.912 li
cp
.285156 .21875 .214844 0 cmyk
f
161.929 445.912 mo
134.684 512.886 li
134.185 512.886 li
161.427 445.912 li
161.929 445.912 li
cp
.289063 .222656 .210938 0 cmyk
f
162.435 445.912 mo
135.183 512.886 li
134.684 512.886 li
161.929 445.912 li
162.435 445.912 li
cp
.289063 .21875 .21875 0 cmyk
f
162.937 445.912 mo
135.679 512.886 li
135.183 512.886 li
162.435 445.912 li
162.937 445.912 li
cp
.292969 .222656 .21875 0 cmyk
f
163.443 445.912 mo
136.178 512.886 li
135.679 512.886 li
162.937 445.912 li
163.443 445.912 li
cp
.300781 .230469 .226563 0 cmyk
f
163.949 445.912 mo
136.674 512.886 li
136.178 512.886 li
163.443 445.912 li
163.949 445.912 li
cp
.304688 .234375 .230469 0 cmyk
f
164.451 445.912 mo
137.17 512.886 li
136.674 512.886 li
163.949 445.912 li
164.451 445.912 li
cp
.308594 .238281 .226563 0 cmyk
f
164.957 445.912 mo
137.666 512.886 li
137.17 512.886 li
164.451 445.912 li
164.957 445.912 li
cp
.3125 .242188 .230469 0 cmyk
f
165.463 445.912 mo
138.165 512.886 li
137.666 512.886 li
164.957 445.912 li
165.463 445.912 li
cp
.3125 .238281 .234375 0 cmyk
f
165.965 445.912 mo
138.664 512.886 li
138.165 512.886 li
165.463 445.912 li
165.965 445.912 li
cp
.316406 .242188 .238281 0 cmyk
f
166.467 445.912 mo
139.16 512.886 li
138.664 512.886 li
165.965 445.912 li
166.467 445.912 li
cp
.320313 .246094 .242188 0 cmyk
f
166.973 445.912 mo
139.659 512.886 li
139.16 512.886 li
166.467 445.912 li
166.973 445.912 li
cp
.324219 .253906 .242188 0 cmyk
f
167.479 445.912 mo
140.155 512.886 li
139.659 512.886 li
166.973 445.912 li
167.479 445.912 li
cp
.328125 .257813 .246094 0 cmyk
f
167.981 445.912 mo
140.654 512.886 li
140.155 512.886 li
167.479 445.912 li
167.981 445.912 li
cp
.332031 .257813 .253906 0 cmyk
f
168.484 445.912 mo
141.147 512.886 li
140.654 512.886 li
167.981 445.912 li
168.484 445.912 li
cp
.335938 .261719 .257813 0 cmyk
f
168.996 445.912 mo
141.646 512.886 li
141.147 512.886 li
168.484 445.912 li
168.996 445.912 li
cp
.339844 .265625 .261719 0 cmyk
f
169.492 445.912 mo
142.142 512.886 li
141.646 512.886 li
168.996 445.912 li
169.492 445.912 li
cp
.34375 .269531 .257813 0 cmyk
f
169.997 445.912 mo
142.641 512.886 li
142.142 512.886 li
169.492 445.912 li
169.997 445.912 li
cp
.351563 .273438 .261719 0 cmyk
f
170.506 445.912 mo
143.14 512.886 li
142.641 512.886 li
169.997 445.912 li
170.506 445.912 li
cp
.355469 .269531 .269531 0 cmyk
f
171.005 445.912 mo
143.636 512.886 li
143.14 512.886 li
170.506 445.912 li
171.005 445.912 li
cp
.355469 .277344 .273438 0 cmyk
f
171.515 445.912 mo
144.135 512.886 li
143.636 512.886 li
171.005 445.912 li
171.515 445.912 li
cp
.359375 .28125 .269531 0 cmyk
f
172.02 445.912 mo
144.635 512.886 li
144.135 512.886 li
171.515 445.912 li
172.02 445.912 li
cp
.367188 .285156 .273438 0 cmyk
f
172.523 445.912 mo
145.127 512.886 li
144.635 512.886 li
172.02 445.912 li
172.523 445.912 li
cp
.371094 .292969 .28125 0 cmyk
f
173.028 445.912 mo
145.623 512.886 li
145.127 512.886 li
172.523 445.912 li
173.028 445.912 li
cp
.378906 .289063 .289063 0 cmyk
f
173.531 445.912 mo
146.122 512.886 li
145.623 512.886 li
173.028 445.912 li
173.531 445.912 li
cp
.378906 .296875 .292969 0 cmyk
f
174.036 445.912 mo
146.621 512.886 li
146.122 512.886 li
173.531 445.912 li
174.036 445.912 li
cp
.382813 .300781 .289063 0 cmyk
f
174.539 445.912 mo
147.117 512.886 li
146.621 512.886 li
174.036 445.912 li
174.539 445.912 li
cp
.386719 .304688 .292969 .00390625 cmyk
f
175.041 445.912 mo
147.616 512.886 li
147.117 512.886 li
174.539 445.912 li
175.041 445.912 li
cp
.390625 .308594 .296875 .00390625 cmyk
f
175.55 445.912 mo
148.112 512.886 li
147.616 512.886 li
175.041 445.912 li
175.55 445.912 li
cp
.390625 .308594 .304688 .00390625 cmyk
f
176.053 445.912 mo
148.608 512.886 li
148.112 512.886 li
175.55 445.912 li
176.053 445.912 li
cp
.394531 .3125 .308594 .00390625 cmyk
f
176.555 445.912 mo
149.104 512.886 li
148.608 512.886 li
176.053 445.912 li
176.555 445.912 li
cp
.402344 .316406 .304688 .00390625 cmyk
f
177.061 445.912 mo
149.603 512.886 li
149.104 512.886 li
176.555 445.912 li
177.061 445.912 li
cp
.40625 .320313 .308594 .00390625 cmyk
f
177.563 445.912 mo
150.103 512.886 li
149.603 512.886 li
177.061 445.912 li
177.563 445.912 li
cp
.410156 .316406 .316406 .00390625 cmyk
f
178.069 445.912 mo
150.598 512.886 li
150.103 512.886 li
177.563 445.912 li
178.069 445.912 li
cp
.410156 .324219 .316406 .00390625 cmyk
f
178.575 445.912 mo
151.098 512.886 li
150.598 512.886 li
178.069 445.912 li
178.575 445.912 li
cp
.414063 .328125 .3125 .00390625 cmyk
f
179.077 445.912 mo
151.59 512.886 li
151.098 512.886 li
178.575 445.912 li
179.077 445.912 li
cp
.417969 .332031 .320313 .00390625 cmyk
f
179.583 445.912 mo
152.093 512.886 li
151.59 512.886 li
179.077 445.912 li
179.583 445.912 li
cp
.421875 .335938 .320313 .0078125 cmyk
f
180.085 445.912 mo
152.585 512.886 li
152.093 512.886 li
179.583 445.912 li
180.085 445.912 li
cp
.421875 .332031 .328125 .0078125 cmyk
f
180.588 445.912 mo
153.084 512.886 li
152.585 512.886 li
180.085 445.912 li
180.588 445.912 li
cp
.425781 .335938 .332031 .0078125 cmyk
f
181.097 445.912 mo
153.58 512.886 li
153.084 512.886 li
180.588 445.912 li
181.097 445.912 li
cp
.429688 .339844 .328125 .0078125 cmyk
f
181.599 445.912 mo
154.076 512.886 li
153.58 512.886 li
181.097 445.912 li
181.599 445.912 li
cp
.433594 .34375 .332031 .0078125 cmyk
f
182.101 445.912 mo
154.572 512.886 li
154.076 512.886 li
181.599 445.912 li
182.101 445.912 li
cp
.4375 .34375 .339844 .0078125 cmyk
f
182.607 445.912 mo
155.071 512.886 li
154.572 512.886 li
182.101 445.912 li
182.607 445.912 li
cp
.4375 .347656 .34375 .0078125 cmyk
f
183.109 445.912 mo
155.574 512.886 li
155.071 512.886 li
182.607 445.912 li
183.109 445.912 li
cp
.441406 .351563 .339844 .0078125 cmyk
f
183.615 445.912 mo
156.066 512.886 li
155.574 512.886 li
183.109 445.912 li
183.615 445.912 li
cp
.445313 .355469 .34375 .0117188 cmyk
f
184.118 445.912 mo
156.566 512.886 li
156.066 512.886 li
183.615 445.912 li
184.118 445.912 li
cp
.449219 .359375 .347656 .0117188 cmyk
f
184.627 445.912 mo
157.062 512.886 li
156.566 512.886 li
184.118 445.912 li
184.627 445.912 li
cp
.449219 .359375 .355469 .015625 cmyk
f
185.126 445.912 mo
157.557 512.886 li
157.062 512.886 li
184.627 445.912 li
185.126 445.912 li
cp
.453125 .363281 .351563 .015625 cmyk
f
185.635 445.912 mo
158.053 512.886 li
157.557 512.886 li
185.126 445.912 li
185.635 445.912 li
cp
.457031 .367188 .351563 .015625 cmyk
f
186.14 445.912 mo
158.552 512.886 li
158.053 512.886 li
185.635 445.912 li
186.14 445.912 li
cp
.460938 .371094 .355469 .0195313 cmyk
f
186.643 445.912 mo
159.048 512.886 li
158.552 512.886 li
186.14 445.912 li
186.643 445.912 li
cp
.460938 .367188 .363281 .0195313 cmyk
f
187.149 445.912 mo
159.547 512.886 li
159.048 512.886 li
186.643 445.912 li
187.149 445.912 li
cp
.464844 .371094 .359375 .0195313 cmyk
f
187.654 445.912 mo
160.047 512.886 li
159.547 512.886 li
187.149 445.912 li
187.654 445.912 li
cp
.46875 .375 .363281 .0195313 cmyk
f
188.157 445.912 mo
160.543 512.886 li
160.047 512.886 li
187.654 445.912 li
188.157 445.912 li
cp
.472656 .378906 .367188 .0234375 cmyk
f
188.659 445.912 mo
161.038 512.886 li
160.543 512.886 li
188.157 445.912 li
188.659 445.912 li
cp
.472656 .378906 .371094 .0234375 cmyk
f
189.165 445.912 mo
161.534 512.886 li
161.038 512.886 li
188.659 445.912 li
189.165 445.912 li
cp
.476563 .382813 .367188 .0234375 cmyk
f
189.667 445.912 mo
162.034 512.886 li
161.534 512.886 li
189.165 445.912 li
189.667 445.912 li
cp
.480469 .386719 .371094 .0273438 cmyk
f
190.173 445.912 mo
162.53 512.886 li
162.034 512.886 li
189.667 445.912 li
190.173 445.912 li
cp
.484375 .390625 .375 .03125 cmyk
f
190.675 445.912 mo
163.029 512.886 li
162.53 512.886 li
190.173 445.912 li
190.675 445.912 li
cp
f
191.181 445.912 mo
163.528 512.886 li
163.029 512.886 li
190.675 445.912 li
191.181 445.912 li
cp
.484375 .390625 .382813 .03125 cmyk
f
191.687 445.912 mo
164.024 512.886 li
163.528 512.886 li
191.181 445.912 li
191.687 445.912 li
cp
.488281 .394531 .386719 .0351563 cmyk
f
164.024 512.886 mo
191.687 445.912 li
164.024 512.886 li
cp
f
grestore
132.553 468.701 mo
115.21 511.789 li
95.9445 511.789 li
121.758 447.008 li
136.406 447.008 li
154.217 487.063 li
170.588 447.008 li
190.121 447.008 li
163.381 511.789 li
149.682 511.789 li
132.553 468.701 li
cp
0 0 0 0 cmyk
f
201.938 482.511 mo
200.802 480.339 198.443 479.004 194.884 478.511 cv
198.695 478.058 201.967 476.9 204.685 475.04 cv
207.174 473.331 209.069 471.102 210.375 468.352 cv
181.622 467.608 li
44.292 479.546 li
161.296 490.547 li
171.818 491.34 li
187.132 491.34 li
201.318 491.34 li
201.455 491.004 li
202.92 487.513 203.083 484.687 201.938 482.511 cv
cp
1 1 .15 1 cmyk
f
gsave
148.706 512.886 mo
132.403 471.817 li
115.862 512.886 li
94.411 512.886 li
121.082 445.912 li
137.362 445.912 li
154.344 484.064 li
169.929 445.912 li
191.687 445.912 li
164.024 512.886 li
148.706 512.886 li
cp
clp
grestore
587.576 378.035 mo
591.419 378.035 592.274 373.996 592.274 370.205 cv
592.274 351.413 li
592.274 347.426 591.588 343.583 587.576 343.583 cv
583.563 343.583 582.877 347.426 582.877 351.413 cv
582.877 370.205 li
582.877 373.996 583.784 378.035 587.576 378.035 cv
cp
587.576 383.174 mo
580.235 383.174 576.613 377.742 576.613 370.205 cv
576.613 351.413 li
576.613 343.655 580.02 338.444 587.576 338.444 cv
595.092 338.444 598.538 343.681 598.538 351.413 cv
598.538 370.205 li
598.538 377.791 594.968 383.174 587.576 383.174 cv
cp
0 0 0 1 cmyk
f
615.451 346.715 mo
609.187 365.556 li
615.451 365.556 li
615.451 346.715 li
cp
602.922 371.478 mo
602.922 364.502 li
613.885 338.859 li
621.715 338.859 li
621.715 365.556 li
626.556 365.556 li
626.556 371.478 li
621.715 371.478 li
621.715 382.733 li
615.451 382.733 li
615.451 371.478 li
602.922 371.478 li
cp
f
640.213 343.583 mo
636.468 343.583 635.515 347.596 635.515 351.413 cv
635.515 352.979 li
629.251 352.979 li
629.251 351.413 li
629.251 343.557 632.357 338.444 640.213 338.444 cv
647.43 338.444 651.175 342.728 651.175 349.847 cv
651.175 355.524 648.898 358.923 646.477 362.375 cv
635.515 376.469 li
651.175 376.469 li
651.175 382.733 li
629.225 382.733 li
629.225 376.469 li
640.213 360.809 li
642.536 357.507 644.911 354.741 644.911 349.847 cv
644.911 346.617 643.443 343.583 640.213 343.583 cv
cp
f
665.002 343.583 mo
661.772 343.583 661.035 346.617 661.035 349.847 cv
661.035 353.273 661.55 356.724 665.002 356.724 cv
668.428 356.724 668.917 353.273 668.917 349.847 cv
668.917 346.666 668.18 343.583 665.002 343.583 cv
cp
665.002 378.035 mo
669.211 378.035 669.674 374.365 669.674 370.231 cv
669.674 366.414 668.865 362.718 665.002 362.718 cv
661.106 362.718 660.278 366.388 660.278 370.231 cv
660.278 374.414 660.767 378.035 665.002 378.035 cv
cp
658.757 359.586 mo
655.997 357.507 654.647 354.594 654.647 349.847 cv
654.647 342.8 657.955 338.444 665.002 338.444 cv
672.023 338.444 675.298 342.826 675.298 349.847 cv
675.298 354.594 673.98 357.507 671.214 359.586 cv
674.444 361.716 675.938 364.75 675.938 370.231 cv
675.938 378.205 672.976 383.174 665.002 383.174 cv
656.996 383.174 654.014 378.205 654.014 370.231 cv
654.014 364.724 655.456 361.69 658.757 359.586 cv
cp
f
685.334 338.885 mo
690.032 338.885 li
690.032 382.733 li
683.768 382.733 li
683.768 348.281 li
679.07 348.281 li
679.07 343.583 li
681.66 342.653 684.107 341.26 685.334 338.885 cv
cp
f
706.031 338.444 mo
713.255 338.444 716.994 342.728 716.994 349.847 cv
716.994 354.936 714.527 358.068 710.73 359.243 cv
714.84 360.613 716.994 364.502 716.994 370.205 cv
716.994 378.061 713.888 383.174 706.031 383.174 cv
698.815 383.174 695.069 378.89 695.069 371.771 cv
695.069 370.205 li
701.333 370.205 li
701.333 374.561 701.823 378.035 706.031 378.035 cv
710.24 378.035 710.73 374.561 710.73 370.205 cv
710.73 365.507 709.164 362.375 704.466 362.375 cv
704.466 356.111 li
709.046 356.111 710.73 354.447 710.73 349.847 cv
710.73 346.03 709.777 343.583 706.031 343.583 cv
701.823 343.583 701.333 347.057 701.333 351.413 cv
695.069 351.413 li
695.069 349.847 li
695.069 342.751 698.867 338.444 706.031 338.444 cv
cp
f
726.122 338.885 mo
730.82 338.885 li
730.82 382.733 li
724.556 382.733 li
724.556 348.281 li
719.858 348.281 li
719.858 343.583 li
722.449 342.653 724.896 341.26 726.122 338.885 cv
cp
f
746.82 338.444 mo
754.043 338.444 757.782 342.728 757.782 349.847 cv
757.782 354.936 755.315 358.068 751.518 359.243 cv
755.629 360.613 757.782 364.502 757.782 370.205 cv
757.782 378.061 754.676 383.174 746.82 383.174 cv
739.603 383.174 735.858 378.89 735.858 371.771 cv
735.858 370.205 li
742.122 370.205 li
742.122 374.561 742.611 378.035 746.82 378.035 cv
751.028 378.035 751.518 374.561 751.518 370.205 cv
751.518 365.507 749.952 362.375 745.254 362.375 cv
745.254 356.111 li
749.834 356.111 751.518 354.447 751.518 349.847 cv
751.518 346.03 750.565 343.583 746.82 343.583 cv
742.611 343.583 742.122 347.057 742.122 351.413 cv
735.858 351.413 li
735.858 349.847 li
735.858 342.751 739.655 338.444 746.82 338.444 cv
cp
f
771.804 343.583 mo
768.059 343.583 767.106 347.596 767.106 351.413 cv
767.106 352.979 li
760.842 352.979 li
760.842 351.413 li
760.842 343.557 763.948 338.444 771.804 338.444 cv
779.021 338.444 782.766 342.728 782.766 349.847 cv
782.766 355.524 780.489 358.923 778.068 362.375 cv
767.106 376.469 li
782.766 376.469 li
782.766 382.733 li
760.816 382.733 li
760.816 376.469 li
771.804 360.809 li
774.127 357.507 776.502 354.741 776.502 349.847 cv
776.502 346.617 775.034 343.583 771.804 343.583 cv
cp
f
797.35 378.035 mo
801.193 378.035 802.048 373.996 802.048 370.205 cv
802.048 351.413 li
802.048 347.426 801.363 343.583 797.35 343.583 cv
793.337 343.583 792.652 347.426 792.652 351.413 cv
792.652 370.205 li
792.652 373.996 793.559 378.035 797.35 378.035 cv
cp
797.35 383.174 mo
790.009 383.174 786.388 377.742 786.388 370.205 cv
786.388 351.413 li
786.388 343.655 789.787 338.444 797.35 338.444 cv
804.86 338.444 808.312 343.681 808.312 351.413 cv
808.312 370.205 li
808.312 377.791 804.736 383.174 797.35 383.174 cv
cp
f
569.038 423.182 mo
570.884 423.182 572.039 424.729 572.039 426.556 cv
572.039 444.356 li
567.863 444.356 li
567.863 428.696 li
567.863 427.371 567.654 426.608 566.297 426.608 cv
565.123 426.608 564.372 427.26 563.687 427.828 cv
563.687 444.356 li
559.511 444.356 li
559.511 423.476 li
563.687 423.476 li
563.687 425.727 li
565.155 424.389 566.545 423.182 569.038 423.182 cv
cp
f
585.109 430.927 mo
585.109 428.794 584.894 426.608 583.001 426.608 cv
581.846 426.608 580.639 426.98 579.869 427.436 cv
579.869 440.571 li
580.802 440.943 581.925 441.224 583.001 441.224 cv
584.881 441.224 585.122 438.19 585.122 435.449 cv
585.122 434.503 585.089 433.59 585.089 432.852 cv
585.089 432.265 585.109 431.599 585.109 430.927 cv
cp
584.045 444.65 mo
582.14 444.65 580.835 443.455 579.869 442.464 cv
579.869 444.356 li
575.693 444.356 li
575.693 415.137 li
579.869 415.137 li
579.869 425.544 li
580.998 424.357 582.055 423.182 584.111 423.182 cv
589.22 423.182 589.266 429.283 589.266 434.666 cv
589.266 434.94 li
589.266 439.182 588.221 444.65 584.045 444.65 cv
cp
f
596.476 430.784 mo
596.476 437.048 li
596.476 439.136 596.476 441.224 598.564 441.224 cv
600.652 441.224 600.652 439.136 600.652 437.048 cv
600.652 430.784 li
600.652 428.696 600.652 426.608 598.564 426.608 cv
596.476 426.608 596.476 428.696 596.476 430.784 cv
cp
592.3 437.048 mo
592.3 430.784 li
592.3 426.151 593.866 423.182 598.564 423.182 cv
603.262 423.182 604.828 426.151 604.828 430.784 cv
604.828 437.048 li
604.828 441.681 603.262 444.65 598.564 444.65 cv
593.866 444.65 592.3 441.681 592.3 437.048 cv
cp
f
613.832 444.65 mo
610.472 444.65 609.134 442.888 609.102 439.593 cv
609.102 426.608 li
607.014 426.608 li
607.014 423.476 li
609.102 423.476 li
609.102 416.168 li
613.278 416.168 li
613.278 423.476 li
616.41 423.476 li
616.41 426.608 li
613.278 426.608 li
613.278 438.79 li
613.278 440.278 613.506 441.224 615.007 441.224 cv
615.398 441.224 616.038 441.126 616.41 441.061 cv
616.41 444.454 li
615.366 444.584 614.844 444.65 613.832 444.65 cv
cp
f
628.514 423.182 mo
630.36 423.182 631.515 424.729 631.515 426.556 cv
631.515 444.356 li
627.339 444.356 li
627.339 428.696 li
627.339 427.436 627.196 426.608 625.904 426.608 cv
624.729 426.608 623.848 427.26 623.163 427.828 cv
623.163 444.356 li
618.987 444.356 li
618.987 415.124 li
623.163 415.124 li
623.163 425.727 li
624.631 424.389 626.021 423.182 628.514 423.182 cv
cp
f
641.042 426.608 mo
638.889 426.608 638.954 429.675 638.954 431.828 cv
643.13 431.828 li
643.13 429.655 643.182 426.608 641.042 426.608 cv
cp
641.042 441.224 mo
643.15 441.224 643.15 439.149 643.15 437.048 cv
647.306 437.048 li
647.306 441.857 645.577 444.65 641.029 444.65 cv
635.332 444.65 634.778 439.345 634.778 433.427 cv
634.778 427.763 635.594 423.182 641.042 423.182 cv
646.49 423.182 647.306 427.763 647.306 433.427 cv
647.306 433.916 li
638.954 433.916 li
638.954 434.96 li
638.954 437.374 638.693 441.224 641.042 441.224 cv
cp
f
663.736 435.515 mo
663.736 428.937 li
663.671 428.481 663.442 428.109 662.855 428.109 cv
660.604 428.109 660.637 430.764 660.637 433.048 cv
660.637 434.647 661.028 436.167 662.529 436.167 cv
663.227 436.167 663.671 436.004 663.736 435.515 cv
cp
669.087 439.593 mo
666.966 439.593 665.367 438.79 664.597 437.505 cv
664.141 438.529 663.292 439.593 661.811 439.593 cv
658.235 439.593 656.461 436.572 656.461 433.048 cv
656.461 429.068 657.648 424.827 661.42 424.827 cv
662.888 424.827 663.671 425.707 663.736 427.045 cv
663.736 424.977 li
667.912 424.977 li
667.912 434.242 li
667.912 435.266 667.977 436.167 669.021 436.167 cv
670.666 436.167 670.914 433.603 670.914 431.828 cv
670.914 425.597 668.839 421.845 662.725 421.845 cv
656.983 421.845 654.373 425.988 654.373 431.828 cv
654.373 439.038 656.624 443.312 663.736 443.312 cv
665.413 443.312 667.24 442.836 668.565 442.411 cv
670.098 445.609 li
668.173 446.053 666.052 446.444 663.736 446.444 cv
654.144 446.444 650.197 441.498 650.197 431.828 cv
650.197 423.815 654.777 418.713 662.725 418.713 cv
670.894 418.713 675.09 423.652 675.09 431.828 cv
675.09 436.148 673.243 439.593 669.087 439.593 cv
cp
f
684.779 426.086 mo
682.626 426.086 682.169 428.63 682.169 430.784 cv
682.169 432.918 682.659 435.221 684.779 435.221 cv
686.913 435.221 687.389 432.918 687.389 430.784 cv
687.389 428.63 686.9 426.086 684.779 426.086 cv
cp
689.477 445.968 mo
689.477 445.792 689.458 445.609 689.412 445.433 cv
689.262 444.617 688.172 444.075 686.13 443.834 cv
682.691 443.423 li
681.908 443.997 681.158 445.237 681.158 446.555 cv
681.158 447.795 684.531 447.521 685.823 447.521 cv
687.305 447.521 689.477 447.423 689.477 445.968 cv
cp
684.779 423.182 mo
687.174 423.182 688.316 424.161 689.282 425.642 cv
689.967 424.37 691.154 423.182 693.131 423.182 cv
693.131 426.608 li
691.937 426.608 691.109 427.065 690.521 427.652 cv
690.796 428.467 691.043 429.557 691.043 430.784 cv
691.043 435.058 689.034 438.353 684.779 438.353 cv
684.323 438.353 683.866 438.301 683.455 438.235 cv
682.672 438.105 li
682.476 438.464 682.104 438.94 682.104 439.443 cv
682.104 440.963 686.13 440.8 687.618 440.996 cv
690.424 441.368 693.131 442.216 693.131 445.4 cv
693.131 449.296 689.654 450.6 685.823 450.6 cv
682.704 450.6 677.471 450.568 677.471 447.534 cv
677.471 445.185 678.972 443.717 680.603 442.901 cv
679.638 442.64 678.515 442.053 678.515 441.074 cv
678.515 439.508 679.866 437.974 680.603 437.048 cv
679.311 435.515 678.515 433.394 678.515 430.784 cv
678.515 426.51 680.636 423.182 684.779 423.182 cv
cp
f
707.402 428.011 mo
707.402 444.356 li
703.226 444.356 li
703.226 429.198 li
703.226 428.011 703.343 426.608 702.182 426.608 cv
700.844 426.608 699.8 427.306 699.05 427.926 cv
699.05 444.356 li
694.874 444.356 li
694.874 423.476 li
699.05 423.476 li
699.05 425.838 li
700.179 424.5 701.79 423.182 704.257 423.182 cv
706.325 423.182 707.095 424.109 707.402 425.936 cv
708.629 424.337 710.031 423.182 712.622 423.182 cv
715.839 423.182 715.754 425.955 715.754 429.166 cv
715.754 444.356 li
711.578 444.356 li
711.578 429.12 li
711.578 427.959 711.676 426.608 710.534 426.608 cv
709.164 426.608 708.172 427.391 707.402 428.011 cv
cp
f
722.573 438.627 mo
722.573 440.193 723.16 441.224 724.661 441.224 cv
725.672 441.224 726.311 440.278 726.749 439.691 cv
726.749 433.916 li
725.104 435.025 722.573 436.102 722.573 438.627 cv
cp
730.925 429.74 mo
730.925 439.136 li
730.925 441.27 731.055 442.868 731.466 444.356 cv
727.303 444.356 li
726.749 441.224 li
725.92 442.868 724.987 444.65 722.573 444.65 cv
720.158 444.65 718.396 442.17 718.396 439.736 cv
718.396 434.307 722.723 432.82 726.749 431.241 cv
726.749 429.74 li
726.749 427.893 726.409 426.412 724.661 426.412 cv
722.951 426.412 722.573 427.913 722.573 429.74 cv
718.396 429.74 li
718.449 425.792 720.7 423.182 724.661 423.182 cv
728.628 423.182 730.925 425.858 730.925 429.74 cv
cp
f
738.807 423.476 mo
738.807 444.356 li
734.631 444.356 li
734.631 423.476 li
738.807 423.476 li
cp
738.807 416.168 mo
738.807 420.344 li
734.631 420.344 li
734.631 416.168 li
738.807 416.168 li
cp
f
742.885 444.356 mo
742.885 415.124 li
747.061 415.124 li
747.061 444.356 li
742.885 444.356 li
cp
f
754.219 440.18 mo
754.219 444.356 li
750.043 444.356 li
750.043 440.18 li
754.219 440.18 li
cp
f
763.048 441.224 mo
765.136 441.224 765.136 439.136 765.136 437.048 cv
769.312 437.048 li
769.312 441.629 767.693 444.65 763.048 444.65 cv
757.384 444.65 756.783 439.56 756.783 433.916 cv
756.783 428.272 757.384 423.182 763.048 423.182 cv
767.824 423.182 769.312 426.034 769.312 430.784 cv
765.136 430.784 li
765.136 428.826 764.972 426.425 763.048 426.425 cv
760.535 426.425 760.96 431.273 760.96 433.916 cv
760.96 436.539 760.483 441.224 763.048 441.224 cv
cp
f
775.654 430.784 mo
775.654 437.048 li
775.654 439.136 775.654 441.224 777.742 441.224 cv
779.83 441.224 779.83 439.136 779.83 437.048 cv
779.83 430.784 li
779.83 428.696 779.83 426.608 777.742 426.608 cv
775.654 426.608 775.654 428.696 775.654 430.784 cv
cp
771.478 437.048 mo
771.478 430.784 li
771.478 426.151 773.044 423.182 777.742 423.182 cv
782.44 423.182 784.006 426.151 784.006 430.784 cv
784.006 437.048 li
784.006 441.681 782.44 444.65 777.742 444.65 cv
773.044 444.65 771.478 441.681 771.478 437.048 cv
cp
f
799.96 428.011 mo
799.96 444.356 li
795.784 444.356 li
795.784 429.198 li
795.784 428.011 795.901 426.608 794.74 426.608 cv
793.402 426.608 792.358 427.306 791.608 427.926 cv
791.608 444.356 li
787.432 444.356 li
787.432 423.476 li
791.608 423.476 li
791.608 425.838 li
792.737 424.5 794.348 423.182 796.815 423.182 cv
798.883 423.182 799.653 424.109 799.96 425.936 cv
801.187 424.337 802.589 423.182 805.18 423.182 cv
808.397 423.182 808.312 425.955 808.312 429.166 cv
808.312 444.356 li
804.136 444.356 li
804.136 429.12 li
804.136 427.959 804.234 426.608 803.092 426.608 cv
801.722 426.608 800.73 427.391 799.96 428.011 cv
cp
f
589.787 493.875 mo
585.775 493.875 li
581.905 472.995 li
585.611 472.995 li
587.928 488.85 li
590.114 472.995 li
593.931 472.995 li
596.149 488.687 li
598.433 472.995 li
602.152 472.995 li
598.107 493.875 li
594.257 493.875 li
592.039 479.487 li
589.787 493.875 li
cp
1 0 0 0 cmyk
f
610.485 493.875 mo
606.472 493.875 li
602.609 472.995 li
606.309 472.995 li
608.625 488.85 li
610.811 472.995 li
614.628 472.995 li
616.847 488.687 li
619.131 472.995 li
622.85 472.995 li
618.804 493.875 li
614.955 493.875 li
612.736 479.487 li
610.485 493.875 li
cp
f
631.189 493.875 mo
627.176 493.875 li
623.307 472.995 li
627.013 472.995 li
629.329 488.85 li
631.515 472.995 li
635.332 472.995 li
637.551 488.687 li
639.835 472.995 li
643.554 472.995 li
639.509 493.875 li
635.659 493.875 li
633.44 479.487 li
631.189 493.875 li
cp
f
648.024 489.699 mo
648.024 493.875 li
643.848 493.875 li
643.848 489.699 li
648.024 489.699 li
cp
f
660.389 480.449 mo
660.389 478.312 660.173 476.127 658.281 476.127 cv
657.126 476.127 655.919 476.502 655.149 476.959 cv
655.149 490.09 li
656.082 490.465 657.204 490.743 658.281 490.743 cv
660.16 490.743 660.402 487.709 660.402 484.968 cv
660.402 484.022 660.369 483.108 660.369 482.374 cv
660.369 481.787 660.389 481.118 660.389 480.449 cv
cp
659.325 494.168 mo
657.42 494.168 656.115 492.978 655.149 491.983 cv
655.149 493.875 li
650.973 493.875 li
650.973 464.659 li
655.149 464.659 li
655.149 475.066 li
656.278 473.875 657.335 472.701 659.39 472.701 cv
664.5 472.701 664.545 478.802 664.545 484.185 cv
664.545 484.462 li
664.545 488.704 663.501 494.168 659.325 494.168 cv
cp
f
669.654 492.929 mo
664.924 472.995 li
669.1 472.995 li
669.981 477.872 670.894 482.701 671.723 487.611 cv
672.506 482.652 673.452 477.872 674.32 472.995 cv
678.496 472.995 li
673.276 494.919 li
672.525 498.165 669.981 499.095 665.968 499.095 cv
665.968 495.963 li
668.121 495.963 669.654 495.049 669.654 492.929 cv
cp
f
689.928 472.701 mo
691.774 472.701 692.929 474.251 692.929 476.078 cv
692.929 493.875 li
688.753 493.875 li
688.753 478.214 li
688.753 476.893 688.544 476.127 687.187 476.127 cv
686.013 476.127 685.262 476.779 684.577 477.35 cv
684.577 493.875 li
680.401 493.875 li
680.401 472.995 li
684.577 472.995 li
684.577 475.246 li
686.045 473.908 687.435 472.701 689.928 472.701 cv
cp
f
705.999 480.449 mo
705.999 478.312 705.784 476.127 703.891 476.127 cv
702.736 476.127 701.529 476.502 700.759 476.959 cv
700.759 490.09 li
701.692 490.465 702.815 490.743 703.891 490.743 cv
705.771 490.743 706.012 487.709 706.012 484.968 cv
706.012 484.022 705.979 483.108 705.979 482.374 cv
705.979 481.787 705.999 481.118 705.999 480.449 cv
cp
704.935 494.168 mo
703.03 494.168 701.725 492.978 700.759 491.983 cv
700.759 493.875 li
696.583 493.875 li
696.583 464.659 li
700.759 464.659 li
700.759 475.066 li
701.888 473.875 702.945 472.701 705.001 472.701 cv
710.11 472.701 710.155 478.802 710.155 484.185 cv
710.155 484.462 li
710.155 488.704 709.111 494.168 704.935 494.168 cv
cp
f
716.896 489.699 mo
716.896 493.875 li
712.72 493.875 li
712.72 489.699 li
716.896 489.699 li
cp
f
725.718 490.743 mo
727.806 490.743 727.806 488.655 727.806 486.567 cv
731.982 486.567 li
731.982 491.151 730.37 494.168 725.718 494.168 cv
720.06 494.168 719.454 489.079 719.454 483.435 cv
719.454 477.79 720.06 472.701 725.718 472.701 cv
730.5 472.701 731.982 475.556 731.982 480.303 cv
727.806 480.303 li
727.806 478.345 727.643 475.947 725.718 475.947 cv
723.206 475.947 723.63 480.792 723.63 483.435 cv
723.63 486.061 723.16 490.743 725.718 490.743 cv
cp
f
738.331 480.303 mo
738.331 486.567 li
738.331 488.655 738.331 490.743 740.419 490.743 cv
742.507 490.743 742.507 488.655 742.507 486.567 cv
742.507 480.303 li
742.507 478.214 742.507 476.127 740.419 476.127 cv
738.331 476.127 738.331 478.214 738.331 480.303 cv
cp
734.155 486.567 mo
734.155 480.303 li
734.155 475.67 735.721 472.701 740.419 472.701 cv
745.117 472.701 746.683 475.67 746.683 480.303 cv
746.683 486.567 li
746.683 491.2 745.117 494.168 740.419 494.168 cv
735.721 494.168 734.155 491.2 734.155 486.567 cv
cp
f
762.636 477.529 mo
762.636 493.875 li
758.46 493.875 li
758.46 478.72 li
758.46 477.529 758.571 476.127 757.416 476.127 cv
756.079 476.127 755.035 476.828 754.284 477.448 cv
754.284 493.875 li
750.108 493.875 li
750.108 472.995 li
754.284 472.995 li
754.284 475.36 li
755.407 474.022 757.025 472.701 759.485 472.701 cv
761.56 472.701 762.323 473.631 762.636 475.458 cv
763.857 473.859 765.26 472.701 767.857 472.701 cv
771.067 472.701 770.989 475.474 770.989 478.688 cv
770.989 493.875 li
766.813 493.875 li
766.813 478.639 li
766.813 477.481 766.91 476.127 765.769 476.127 cv
764.398 476.127 763.4 476.91 762.636 477.529 cv
cp
f
777.951 489.699 mo
777.951 493.875 li
773.775 493.875 li
773.775 489.699 li
777.951 489.699 li
cp
f
784.071 488.149 mo
784.071 489.715 784.659 490.743 786.159 490.743 cv
787.171 490.743 787.804 489.797 788.247 489.209 cv
788.247 483.435 li
786.597 484.544 784.071 485.62 784.071 488.149 cv
cp
792.423 479.259 mo
792.423 488.655 li
792.423 490.792 792.554 492.39 792.958 493.875 cv
788.802 493.875 li
788.247 490.743 li
787.412 492.39 786.486 494.168 784.071 494.168 cv
781.657 494.168 779.895 491.689 779.895 489.258 cv
779.895 483.826 784.215 482.342 788.247 480.759 cv
788.247 479.259 li
788.247 477.415 787.901 475.931 786.159 475.931 cv
784.443 475.931 784.071 477.432 784.071 479.259 cv
779.895 479.259 li
779.941 475.311 782.192 472.701 786.159 472.701 cv
790.12 472.701 792.423 475.376 792.423 479.259 cv
cp
f
798.818 494.168 mo
796.958 494.168 795.784 492.651 795.784 490.792 cv
795.784 472.995 li
799.96 472.995 li
799.96 489.519 li
799.96 490.384 800.547 490.987 801.395 490.987 cv
802.616 490.987 803.431 490.09 804.136 489.519 cv
804.136 472.995 li
808.312 472.995 li
808.312 493.875 li
804.136 493.875 li
804.136 491.624 li
802.648 492.945 801.311 494.168 798.818 494.168 cv
cp
f
248.409 191.647 mo
241.884 191.647 li
241.884 259.23 li
248.651 259.23 li
261.655 259.23 260.944 250.399 260.944 237.727 cv
260.944 210.08 li
260.944 198.322 260.604 191.647 248.409 191.647 cv
cp
248.553 268.447 mo
229.597 268.447 li
229.597 182.433 li
248.651 182.433 li
266.653 182.433 273.23 188.962 273.23 207.007 cv
273.23 240.8 li
273.23 259.083 266.895 268.447 248.553 268.447 cv
cp
0 0 0 1 cmyk
f
296.271 228.51 mo
296.271 259.23 li
317.771 259.23 li
317.771 268.447 li
283.984 268.447 li
283.984 182.433 li
317.771 182.433 li
317.771 191.647 li
296.271 191.647 li
296.271 219.297 li
311.63 219.297 li
311.63 228.51 li
296.271 228.51 li
cp
f
344.654 191.647 mo
338.703 191.647 335.434 195.147 335.434 201.01 cv
335.434 206.338 338.207 210.465 341.581 213.15 cv
356.941 225.44 li
363.224 230.526 369.221 238.206 369.221 249.201 cv
369.221 261.964 360.627 269.308 347.721 269.308 cv
331.643 269.308 324.054 258.891 323.147 243.87 cv
335.434 240.8 li
335.865 249.674 338.403 259.23 347.721 259.23 cv
353.867 259.23 356.941 256.157 356.941 250.014 cv
356.941 242.291 352.184 238.259 347.721 234.653 cv
332.361 222.367 li
327.075 218.24 323.095 211.424 323.095 202.302 cv
323.095 189.536 331.734 181.569 344.654 181.569 cv
359.864 181.569 368.118 189.966 369.221 203.937 cv
356.941 207.007 li
356.406 198.847 353.332 191.647 344.654 191.647 cv
cp
f
391.06 182.433 mo
391.06 268.447 li
378.773 268.447 li
378.773 182.433 li
391.06 182.433 li
cp
f
439.541 237.727 mo
439.541 234.653 li
427.248 234.653 li
427.248 225.535 li
451.828 225.535 li
451.828 268.447 li
442.608 268.447 li
439.541 259.23 li
437.714 264.32 434.204 269.308 427.248 269.308 cv
407.19 269.308 402.675 255.198 402.675 234.941 cv
402.675 213.15 li
402.675 194.674 409.245 181.569 427.731 181.569 cv
444.911 181.569 451.104 192.802 451.104 210.08 cv
438.817 210.08 li
438.817 199.617 438.001 191.647 427.731 191.647 cv
417.461 191.647 414.961 199.617 414.961 210.08 cv
414.961 237.727 li
414.961 249.054 416.645 259.23 427.248 259.23 cv
437.806 259.23 439.541 248.96 439.541 237.727 cv
cp
f
474.052 211.232 mo
474.052 268.447 li
461.766 268.447 li
461.766 182.433 li
470.979 182.433 li
492.486 235.616 li
492.486 182.433 li
504.766 182.433 li
504.766 268.447 li
496.035 268.447 li
474.052 211.232 li
cp
f
536.406 191.647 mo
530.455 191.647 527.186 195.147 527.186 201.01 cv
527.186 206.338 529.966 210.465 533.333 213.15 cv
548.693 225.44 li
554.976 230.526 560.979 238.206 560.979 249.201 cv
560.979 261.964 552.386 269.308 539.473 269.308 cv
523.395 269.308 515.806 258.891 514.899 243.87 cv
527.186 240.8 li
527.617 249.674 530.155 259.23 539.473 259.23 cv
545.619 259.23 548.693 256.157 548.693 250.014 cv
548.693 242.291 543.936 238.259 539.473 234.653 cv
524.119 222.367 li
518.834 218.24 514.854 211.424 514.854 202.302 cv
514.854 189.536 523.493 181.569 536.406 181.569 cv
551.616 181.569 559.87 189.966 560.979 203.937 cv
548.693 207.007 li
548.158 198.847 545.091 191.647 536.406 191.647 cv
cp
f
605.18 228.51 mo
599.04 228.51 li
599.04 259.23 li
605.18 259.23 li
615.783 259.23 620.54 254.62 620.54 243.87 cv
620.54 233.117 615.783 228.51 605.18 228.51 cv
cp
620.54 203.937 mo
620.54 191.794 611.131 191.647 599.04 191.647 cv
599.04 219.297 li
605.18 219.297 li
615.359 219.297 620.54 214.305 620.54 203.937 cv
cp
608.253 268.447 mo
586.747 268.447 li
586.747 182.433 li
605.18 182.433 li
620.69 182.433 631.391 188.769 631.391 203.937 cv
631.391 215.114 626.445 219.871 617.467 222.367 cv
627.026 225.535 632.827 231.052 632.827 243.87 cv
632.827 259.038 623.418 268.447 608.253 268.447 cv
cp
f
653.413 240.8 mo
634.987 182.433 li
647.273 182.433 li
659.56 225.44 li
671.847 182.433 li
684.133 182.433 li
665.707 240.8 li
665.707 268.447 li
653.413 268.447 li
653.413 240.8 li
cp
f
719.225 211.232 mo
719.225 268.447 li
706.938 268.447 li
706.938 182.433 li
716.152 182.433 li
737.652 235.616 li
737.652 182.433 li
749.945 182.433 li
749.945 268.447 li
741.208 268.447 li
719.225 211.232 li
cp
f
780.659 228.51 mo
774.519 228.51 li
774.519 259.23 li
780.659 259.23 li
791.262 259.23 796.019 254.62 796.019 243.87 cv
796.019 233.117 791.262 228.51 780.659 228.51 cv
cp
796.019 203.937 mo
796.019 191.794 786.616 191.647 774.519 191.647 cv
774.519 219.297 li
780.659 219.297 li
790.838 219.297 796.019 214.305 796.019 203.937 cv
cp
783.732 268.447 mo
762.232 268.447 li
762.232 182.433 li
780.659 182.433 li
796.169 182.433 806.87 188.769 806.87 203.937 cv
806.87 215.114 801.93 219.871 792.952 222.367 cv
802.505 225.535 808.312 231.052 808.312 243.87 cv
808.312 259.038 798.903 268.447 783.732 268.447 cv
cp
f
248.168 138.164 mo
236.445 168.434 li
229.943 168.434 li
247.515 122.925 li
252.425 122.925 li
252.947 151.064 li
263.883 122.925 li
270.431 122.925 li
252.699 168.434 li
248.08 168.434 li
248.168 138.164 li
cp
f
283.155 132.68 mo
272.248 152.183 li
278.767 152.183 li
283.155 132.68 li
cp
262.634 168.434 mo
256.128 168.434 li
283.706 122.925 li
290.254 122.925 li
282.137 168.434 li
275.635 168.434 li
277.664 157.061 li
269.521 157.061 li
262.634 168.434 li
cp
f
311.624 127.799 mo
308.149 127.799 li
294 163.563 li
297.585 163.563 li
304.473 163.563 305.947 158.888 308.609 152.183 cv
314.423 137.551 li
316.893 131.329 318.113 127.799 311.624 127.799 cv
cp
295.598 168.434 mo
285.569 168.434 li
303.533 122.925 li
313.686 122.925 li
323.274 122.925 325.402 126.377 321.601 135.929 cv
314.479 153.811 li
310.632 163.484 305.298 168.434 295.598 168.434 cv
cp
f
339.362 122.925 mo
321.151 168.434 li
314.652 168.434 li
332.817 122.925 li
339.362 122.925 li
cp
f
352.445 132.68 mo
341.326 152.183 li
347.851 152.183 li
352.445 132.68 li
cp
331.538 168.434 mo
325.036 168.434 li
353.101 122.925 li
359.645 122.925 li
351.048 168.434 li
344.546 168.434 li
346.693 157.061 li
338.553 157.061 li
331.538 168.434 li
cp
f
381.746 147.306 mo
378.486 147.306 li
371.857 163.563 li
375.11 163.563 li
380.724 163.563 384.245 161.122 386.571 155.433 cv
388.9 149.746 387.377 147.306 381.746 147.306 cv
cp
395.22 134.301 mo
397.853 127.877 392.874 127.799 386.437 127.799 cv
380.47 142.432 li
383.736 142.432 li
389.142 142.432 392.972 139.789 395.22 134.301 cv
cp
374.744 168.434 mo
363.368 168.434 li
381.873 122.925 li
391.696 122.925 li
399.957 122.925 404.286 126.279 400.991 134.301 cv
398.564 140.219 394.91 142.735 389.599 144.056 cv
393.983 145.73 395.869 148.65 393.086 155.433 cv
389.791 163.458 382.773 168.434 374.744 168.434 cv
cp
f
417.105 127.799 mo
415.467 127.799 li
409.438 142.432 li
411.073 142.432 li
416.351 142.432 420.061 140.422 422.256 135.114 cv
424.452 129.806 422.393 127.799 417.105 127.799 cv
cp
418.703 145.681 mo
416.606 168.434 li
410.152 168.434 li
412.325 147.306 li
407.432 147.306 li
398.724 168.434 li
392.222 168.434 li
410.932 122.925 li
419.115 122.925 li
428.452 122.925 432.54 126.073 428.791 135.114 cv
426.566 140.474 423.066 144.307 418.703 145.681 cv
cp
f
446.128 122.925 mo
427.17 168.434 li
420.668 168.434 li
439.577 122.925 li
446.128 122.925 li
cp
f
459.658 152.183 mo
460.34 150.555 li
453.818 150.555 li
455.844 145.73 li
468.898 145.73 li
459.329 168.434 li
454.451 168.434 li
454.872 163.563 li
452.777 166.251 449.812 168.894 446.132 168.894 cv
435.512 168.894 436.243 161.429 440.716 150.708 cv
445.528 139.179 li
449.609 129.401 456.007 122.468 465.857 122.468 cv
475.012 122.468 475.811 128.409 471.958 137.551 cv
465.423 137.551 li
467.752 132.017 469.093 127.799 463.619 127.799 cv
458.151 127.799 455.058 132.017 452.742 137.551 cv
446.621 152.183 li
444.115 158.177 442.752 163.563 448.366 163.563 cv
453.955 163.563 457.156 158.124 459.658 152.183 cv
cp
f
490.655 122.925 mo
471.39 168.434 li
464.891 168.434 li
484.104 122.925 li
490.655 122.925 li
cp
f
514.726 128.713 mo
506.551 128.713 li
489.628 168.434 li
483.125 168.434 li
500.009 128.713 li
491.83 128.713 li
494.287 122.925 li
517.206 122.925 li
514.726 128.713 li
cp
f
537.424 128.713 mo
529.245 128.713 li
512.185 168.434 li
505.679 168.434 li
522.7 128.713 li
514.521 128.713 li
516.997 122.925 li
539.916 122.925 li
537.424 128.713 li
cp
f
539.098 147.306 mo
532.073 163.563 li
543.46 163.563 li
541.342 168.434 li
523.464 168.434 li
543.091 122.925 li
561.097 122.925 li
558.976 127.799 li
547.528 127.799 li
541.202 142.432 li
549.365 142.432 li
547.254 147.306 li
539.098 147.306 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 2 2
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (2)]
[/TrimBox [57.100006103515 0 538.18005371093 841.89001464843]]
[/BleedBox [57.100006103515 0 538.18005371093 841.89001464843]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[0 -1 1 0 0 841.89 ]ct
gsave
np
gsave
0 57.1 mo
0 538.18 li
841.89 538.18 li
841.89 57.1 li
cp
clp
[1 0 0 1 0 0 ]ct
849.586 545.234 mo
-13.1252 545.234 li
-13.1252 52.2518 li
849.586 52.2518 li
849.586 545.234 li
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
1 1 .15 1 cmyk
f
863.788 545.234 mo
265.877 545.234 li
696.844 52.2518 li
863.788 52.2518 li
863.788 545.234 li
cp
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[273.982 0 0 273.982 564.832 298.743 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.13 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[273.982 0 0 273.982 564.832 298.743 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~zz!<E3%!<E3%!WiE)!WiE)!s8W-!s8W."9\i1"9\i2"U,&5"U,&6"pP89"pP8:#6tJ=#6tM?#RC\A#RC
_C#mgnE#mgqG$47+I$4@4L$O[=M$OdFP$k*OQ$k3XT%1NaU%1WjX%LrsY%hB0]%hB0]&.fBa&.fBa&J5
Te&J5Te&eYfi&eYfj',)#m',)#n'GM5q'GM5r'bqGu'bqK"()@Z$()@]&(Ddl((Ddo*(`4),(`4,.)&X
;0)&aD3)B'M4)B0V7)]K_8)]Th;*#oq<*??.@*??.@*Zc@D*Zc@D+!2RH+!2RH+<VdL+<VdM~>
]
>>
0 0 0 0 0 1 [
]true true []
/Separation
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
854.695 302.325 mo
-94.1012 302.325 li
-94.1012 281.236 li
854.695 281.236 li
854.695 302.325 li
cp
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[948.797 0 0 948.797 -94.1012 291.78 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.120183 ]
/C1 [.317148 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds [.398773 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[948.797 0 0 948.797 -94.1012 291.78 ]ct
clp
/1 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~*ZlIH+<_mP+sS<X,UF``-7:/g-n$Mn.Olr!/1`A)/hSe10JG491,:XA1c.'I2E!KQ3&ioY3]]>a4?Pbi
5!D1q5X7V$6:+%,6psI47Rfj;7n?0B8P2TJ92&#R9hnGZ:Jakb;,L4h;c?Uo<)cjt<`W7&='&L+=]nm2
>$>-7>[1N>?!^iD?XI/J?t!JP@U`eV@q9+\AS#FbAnPahBP;'nBkhBtCMR^%Ci+$+DJj?1DfBZ7EH,u=
EcZ;CFEDVIF`qqOGB\7UG^4R[H?smaH[L3gI=6NmIXcisJ:N0$JV&K*K7ef0KS>,6L5(G<LPUbBM2@+I
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
812.961 302.374 mo
809.64 297.894 802.27 295.62 791.06 295.62 cv
763.837 295.62 li
763.857 295.565 li
719.248 295.565 li
719.225 295.62 li
652.506 295.62 li
652.487 295.565 li
619.101 295.565 li
619.082 295.62 li
502.114 288.198 li
486.072 300.077 li
608.165 323.032 li
597.19 350.594 li
476.251 354.861 li
460.601 366.753 li
586.055 378.551 li
575.149 405.93 li
450.399 421.538 li
435.147 433.417 li
725.45 433.417 li
739.097 433.417 750.451 431.126 759.191 426.605 cv
768.32 421.89 774.988 414.625 779.018 405.02 cv
786.153 388.009 li
789.376 380.309 789.722 373.938 787.174 369.07 cv
785.68 366.228 783.256 364.019 779.912 362.463 cv
784.117 361.119 787.964 359.256 791.409 356.894 cv
797.608 352.653 802.231 346.96 805.157 339.974 cv
811.946 323.779 li
815.989 314.135 816.331 306.932 812.961 302.374 cv
cp
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[380.111 0 0 380.111 435.147 360.809 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[380.111 0 0 380.111 435.147 360.809 ]ct
clp
/2 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!$#!WiH+"9\l3"pYA=#RLeE$4@4M%1NdW%hB3_&J5Wg',2,q'c%Q$(Dmu,)B'P6*#ot>*ZcCF+<_mP
+sS<X,UF``-RU;j.4H_r.k</%/M8Y/0/,(70etL?1c.'I2E!KQ3&ioY3]fDc4?Yhk5!M7s5s[h(6UO70
77B[97n?0B8P2TJ92&#R:/4S\:f("d;GpFm<)lq!<``@)=BSd1>?b?;?!UcC?XI2L@:E\U@q9+]AS,Oe
BP;*oC2.O"Ci!s+DJsH4E,fl<EcZ;DF`hkNGB\:VH$O^_H[L3hI=?WpIt3*$JqAW-KS5&5L5(J>Ll$tG
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
687.386 336.435 mo
714.247 334.099 li
714.749 332.866 li
683.161 326.924 li
687.386 336.435 li
cp
636.589 390.479 mo
673.798 384.299 li
671.191 377.735 li
642.794 375.063 li
636.589 390.479 li
cp
449.939 425.991 mo
449.57 421.535 li
588.959 398.384 li
599.865 371.031 li
475.387 359.325 li
475.403 354.855 li
611.007 343.074 li
622.025 315.431 li
500.835 292.645 li
501.249 288.198 li
632.876 288.198 li
634.419 288.143 li
665.883 288.143 li
665.909 288.198 li
732.996 288.198 li
734.536 288.143 li
777.902 288.143 li
777.879 288.198 li
804.058 288.198 li
815.61 288.198 822.944 290.521 826.488 295.297 cv
830.089 300.159 829.822 307.33 825.678 317.222 cv
818.892 333.42 li
817.545 336.64 815.806 339.609 813.734 342.239 cv
812.938 343.208 li
811.979 344.291 li
811.092 345.217 li
809.663 346.584 li
808.73 347.403 li
807.767 348.19 li
806.753 348.969 li
806.407 349.224 806.054 349.475 805.695 349.72 cv
802.136 352.157 798.11 354.046 793.67 355.364 cv
796.903 356.992 799.291 359.25 800.802 362.137 cv
803.454 367.191 803.151 373.69 799.895 381.451 cv
792.769 398.462 li
788.864 407.764 782.45 414.775 773.697 419.3 cv
765.109 423.74 753.877 425.991 740.311 425.991 cv
449.939 425.991 li
cp
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[379.433 0 0 379.433 449.57 357.067 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[379.433 0 0 379.433 449.57 357.067 ]ct
clp
/3 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~:f1(e;,U:i;GpFl;c?Xp<)cgs<E3%"<`W7%='&I)=BJ[-=]nm1=^#!4>$G38>?b?;>[1Q??!U`B?=$rF
?XI/J?smAM@:<SQ@U`eU@UinX@q9+\A7T7_AS#IcAnG[gB4kjjBP;'nBk_9qC2.KuCMR^$Ci!p(Ci+$+
D/O6/DJjB2Df9T6E,]c9EH,u=EcQ2AF)uDDFEDVHF`hhLF`qqOG'A.SGB\:VG^+LZH$O^^H?smaH[C*e
I!g<hI=6NlIXZ`pIt)rtIt3'"J:W9&JUrE)JqAW-K7ef0KS5#4KnY58L5(G;LPLY?LkpkCLl$tFM2I1J
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
449.939 423.747 mo
715.486 379.65 li
475.596 357.093 li
735.815 334.539 li
501.249 290.443 li
804.058 290.443 li
814.746 290.443 821.626 292.508 824.687 296.635 cv
827.744 300.769 827.385 307.336 823.607 316.354 cv
816.824 332.556 li
814.149 338.937 810.018 344.033 804.443 347.857 cv
798.864 351.677 792.162 354.056 784.339 354.976 cv
791.65 355.987 796.476 358.721 798.815 363.178 cv
801.154 367.634 800.821 373.438 797.823 380.587 cv
790.701 397.594 li
786.985 406.439 780.978 413.01 772.669 417.31 cv
764.362 421.603 753.576 423.747 740.311 423.747 cv
449.939 423.747 li
cp
1 1 .15 1 cmyk
f
gsave
689.67 425.443 mo
656.249 341.254 li
622.335 425.443 li
578.356 425.443 li
633.039 288.143 li
666.415 288.143 li
701.229 366.355 li
733.179 288.143 li
777.791 288.143 li
721.075 425.443 li
689.67 425.443 li
cp
clp
633.039 288.143 mo
578.356 425.443 li
633.039 288.143 li
cp
0 0 0 0 cmyk
f
634.07 288.143 mo
579.367 425.443 li
578.356 425.443 li
633.039 288.143 li
634.07 288.143 li
cp
f
635.104 288.143 mo
580.391 425.443 li
579.367 425.443 li
634.07 288.143 li
635.104 288.143 li
cp
.00390625 0 0 0 cmyk
f
636.135 288.143 mo
581.413 425.443 li
580.391 425.443 li
635.104 288.143 li
636.135 288.143 li
cp
.0078125 .00390625 .00390625 0 cmyk
f
637.169 288.143 mo
582.431 425.443 li
581.413 425.443 li
636.135 288.143 li
637.169 288.143 li
cp
.015625 .00390625 .0078125 0 cmyk
f
638.204 288.143 mo
583.448 425.443 li
582.431 425.443 li
637.169 288.143 li
638.204 288.143 li
cp
.0195313 .0117188 .0078125 0 cmyk
f
639.238 288.143 mo
584.47 425.443 li
583.448 425.443 li
638.204 288.143 li
639.238 288.143 li
cp
f
640.279 288.143 mo
585.488 425.443 li
584.47 425.443 li
639.238 288.143 li
640.279 288.143 li
cp
.0234375 .015625 .0117188 0 cmyk
f
641.309 288.143 mo
586.505 425.443 li
585.488 425.443 li
640.279 288.143 li
641.309 288.143 li
cp
.0273438 .0195313 .015625 0 cmyk
f
642.344 288.143 mo
587.527 425.443 li
586.505 425.443 li
641.309 288.143 li
642.344 288.143 li
cp
.03125 .015625 .0195313 0 cmyk
f
643.371 288.143 mo
588.544 425.443 li
587.527 425.443 li
642.344 288.143 li
643.371 288.143 li
cp
.0351563 .0195313 .0195313 0 cmyk
f
644.409 288.143 mo
589.566 425.443 li
588.544 425.443 li
643.371 288.143 li
644.409 288.143 li
cp
.0390625 .0195313 .0234375 0 cmyk
f
645.443 288.143 mo
590.584 425.443 li
589.566 425.443 li
644.409 288.143 li
645.443 288.143 li
cp
.0351563 .0234375 .0234375 0 cmyk
f
646.477 288.143 mo
591.608 425.443 li
590.584 425.443 li
645.443 288.143 li
646.477 288.143 li
cp
.0390625 .0273438 .0234375 0 cmyk
f
647.512 288.143 mo
592.626 425.443 li
591.608 425.443 li
646.477 288.143 li
647.512 288.143 li
cp
.0429688 .03125 .0273438 0 cmyk
f
648.546 288.143 mo
593.641 425.443 li
592.626 425.443 li
647.512 288.143 li
648.546 288.143 li
cp
.046875 .03125 .03125 0 cmyk
f
649.577 288.143 mo
594.665 425.443 li
593.641 425.443 li
648.546 288.143 li
649.577 288.143 li
cp
.0507813 .03125 .0351563 0 cmyk
f
650.614 288.143 mo
595.68 425.443 li
594.665 425.443 li
649.577 288.143 li
650.614 288.143 li
cp
.0546875 .0351563 .0351563 0 cmyk
f
651.648 288.143 mo
596.704 425.443 li
595.68 425.443 li
650.614 288.143 li
651.648 288.143 li
cp
.0546875 .0429688 .0351563 0 cmyk
f
652.683 288.143 mo
597.722 425.443 li
596.704 425.443 li
651.648 288.143 li
652.683 288.143 li
cp
.0625 .0429688 .0390625 0 cmyk
f
653.714 288.143 mo
598.74 425.443 li
597.722 425.443 li
652.683 288.143 li
653.714 288.143 li
cp
.0664063 .0429688 .046875 0 cmyk
f
654.748 288.143 mo
599.761 425.443 li
598.74 425.443 li
653.714 288.143 li
654.748 288.143 li
cp
.0703125 .046875 .0429688 0 cmyk
f
655.782 288.143 mo
600.779 425.443 li
599.761 425.443 li
654.748 288.143 li
655.782 288.143 li
cp
.0742188 .046875 .046875 0 cmyk
f
656.816 288.143 mo
601.8 425.443 li
600.779 425.443 li
655.782 288.143 li
656.816 288.143 li
cp
.0742188 .0507813 .0507813 0 cmyk
f
657.851 288.143 mo
602.818 425.443 li
601.8 425.443 li
656.816 288.143 li
657.851 288.143 li
cp
.0742188 .0546875 .0546875 0 cmyk
f
658.881 288.143 mo
603.839 425.443 li
602.818 425.443 li
657.851 288.143 li
658.881 288.143 li
cp
.078125 .0585938 .0546875 0 cmyk
f
659.922 288.143 mo
604.857 425.443 li
603.839 425.443 li
658.881 288.143 li
659.922 288.143 li
cp
.0820313 .0585938 .0585938 0 cmyk
f
660.95 288.143 mo
605.872 425.443 li
604.857 425.443 li
659.922 288.143 li
660.95 288.143 li
cp
.09375 .0625 .0625 0 cmyk
f
661.987 288.143 mo
606.896 425.443 li
605.872 425.443 li
660.95 288.143 li
661.987 288.143 li
cp
.0976563 .0664063 .0664063 0 cmyk
f
663.022 288.143 mo
607.917 425.443 li
606.896 425.443 li
661.987 288.143 li
663.022 288.143 li
cp
.101563 .0703125 .0703125 0 cmyk
f
664.053 288.143 mo
608.935 425.443 li
607.917 425.443 li
663.022 288.143 li
664.053 288.143 li
cp
f
665.09 288.143 mo
609.953 425.443 li
608.935 425.443 li
664.053 288.143 li
665.09 288.143 li
cp
.105469 .0742188 .0742188 0 cmyk
f
666.121 288.143 mo
610.978 425.443 li
609.953 425.443 li
665.09 288.143 li
666.121 288.143 li
cp
.109375 .0742188 .0742188 0 cmyk
f
667.155 288.143 mo
611.992 425.443 li
610.978 425.443 li
666.121 288.143 li
667.155 288.143 li
cp
.109375 .078125 .078125 0 cmyk
f
668.189 288.143 mo
613.01 425.443 li
611.992 425.443 li
667.155 288.143 li
668.189 288.143 li
cp
.113281 .0820313 .078125 0 cmyk
f
669.227 288.143 mo
614.035 425.443 li
613.01 425.443 li
668.189 288.143 li
669.227 288.143 li
cp
.121094 .078125 .0820313 0 cmyk
f
670.258 288.143 mo
615.053 425.443 li
614.035 425.443 li
669.227 288.143 li
670.258 288.143 li
cp
.121094 .0859375 .0859375 0 cmyk
f
671.292 288.143 mo
616.074 425.443 li
615.053 425.443 li
670.258 288.143 li
671.292 288.143 li
cp
.125 .0898438 .0898438 0 cmyk
f
672.323 288.143 mo
617.092 425.443 li
616.074 425.443 li
671.292 288.143 li
672.323 288.143 li
cp
.128906 .09375 .09375 0 cmyk
f
673.361 288.143 mo
618.113 425.443 li
617.092 425.443 li
672.323 288.143 li
673.361 288.143 li
cp
.128906 .0976563 .0898438 0 cmyk
f
674.395 288.143 mo
619.128 425.443 li
618.113 425.443 li
673.361 288.143 li
674.395 288.143 li
cp
.136719 .09375 .0976563 0 cmyk
f
675.429 288.143 mo
620.149 425.443 li
619.128 425.443 li
674.395 288.143 li
675.429 288.143 li
cp
.140625 .0976563 .101563 0 cmyk
f
676.46 288.143 mo
621.17 425.443 li
620.149 425.443 li
675.429 288.143 li
676.46 288.143 li
cp
.140625 .101563 .101563 0 cmyk
f
677.494 288.143 mo
622.191 425.443 li
621.17 425.443 li
676.46 288.143 li
677.494 288.143 li
cp
.144531 .105469 .101563 0 cmyk
f
678.528 288.143 mo
623.206 425.443 li
622.191 425.443 li
677.494 288.143 li
678.528 288.143 li
cp
.148438 .109375 .105469 0 cmyk
f
679.563 288.143 mo
624.227 425.443 li
623.206 425.443 li
678.528 288.143 li
679.563 288.143 li
cp
.152344 .113281 .105469 0 cmyk
f
680.6 288.143 mo
625.248 425.443 li
624.227 425.443 li
679.563 288.143 li
680.6 288.143 li
cp
.15625 .109375 .113281 0 cmyk
f
681.634 288.143 mo
626.266 425.443 li
625.248 425.443 li
680.6 288.143 li
681.634 288.143 li
cp
.15625 .113281 .117188 0 cmyk
f
682.665 288.143 mo
627.287 425.443 li
626.266 425.443 li
681.634 288.143 li
682.665 288.143 li
cp
.160156 .121094 .113281 0 cmyk
f
683.7 288.143 mo
628.305 425.443 li
627.287 425.443 li
682.665 288.143 li
683.7 288.143 li
cp
.164063 .121094 .117188 0 cmyk
f
684.734 288.143 mo
629.326 425.443 li
628.305 425.443 li
683.7 288.143 li
684.734 288.143 li
cp
.167969 .125 .121094 0 cmyk
f
685.768 288.143 mo
630.344 425.443 li
629.326 425.443 li
684.734 288.143 li
685.768 288.143 li
cp
.171875 .125 .125 0 cmyk
f
686.799 288.143 mo
631.365 425.443 li
630.344 425.443 li
685.768 288.143 li
686.799 288.143 li
cp
.175781 .125 .128906 0 cmyk
f
687.836 288.143 mo
632.383 425.443 li
631.365 425.443 li
686.799 288.143 li
687.836 288.143 li
cp
.175781 .132813 .125 0 cmyk
f
688.867 288.143 mo
633.401 425.443 li
632.383 425.443 li
687.836 288.143 li
688.867 288.143 li
cp
.179688 .136719 .128906 0 cmyk
f
689.905 288.143 mo
634.422 425.443 li
633.401 425.443 li
688.867 288.143 li
689.905 288.143 li
cp
.1875 .140625 .132813 0 cmyk
f
690.936 288.143 mo
635.437 425.443 li
634.422 425.443 li
689.905 288.143 li
690.936 288.143 li
cp
.191406 .136719 .140625 0 cmyk
f
691.973 288.143 mo
636.461 425.443 li
635.437 425.443 li
690.936 288.143 li
691.973 288.143 li
cp
.195313 .144531 .140625 0 cmyk
f
693.004 288.143 mo
637.479 425.443 li
636.461 425.443 li
691.973 288.143 li
693.004 288.143 li
cp
.203125 .148438 .144531 0 cmyk
f
694.035 288.143 mo
638.497 425.443 li
637.479 425.443 li
693.004 288.143 li
694.035 288.143 li
cp
.207031 .15625 .152344 0 cmyk
f
695.076 288.143 mo
639.518 425.443 li
638.497 425.443 li
694.035 288.143 li
695.076 288.143 li
cp
.210938 .15625 .160156 0 cmyk
f
696.107 288.143 mo
640.536 425.443 li
639.518 425.443 li
695.076 288.143 li
696.107 288.143 li
cp
.214844 .160156 .15625 0 cmyk
f
697.141 288.143 mo
641.561 425.443 li
640.536 425.443 li
696.107 288.143 li
697.141 288.143 li
cp
.21875 .164063 .160156 0 cmyk
f
698.172 288.143 mo
642.575 425.443 li
641.561 425.443 li
697.141 288.143 li
698.172 288.143 li
cp
.222656 .164063 .164063 0 cmyk
f
699.21 288.143 mo
643.6 425.443 li
642.575 425.443 li
698.172 288.143 li
699.21 288.143 li
cp
.226563 .167969 .164063 0 cmyk
f
700.241 288.143 mo
644.618 425.443 li
643.6 425.443 li
699.21 288.143 li
700.241 288.143 li
cp
.226563 .175781 .167969 0 cmyk
f
701.281 288.143 mo
645.632 425.443 li
644.618 425.443 li
700.241 288.143 li
701.281 288.143 li
cp
.230469 .171875 .167969 0 cmyk
f
702.316 288.143 mo
646.657 425.443 li
645.632 425.443 li
701.281 288.143 li
702.316 288.143 li
cp
.234375 .175781 .171875 0 cmyk
f
703.346 288.143 mo
647.675 425.443 li
646.657 425.443 li
702.316 288.143 li
703.346 288.143 li
cp
.238281 .179688 .175781 0 cmyk
f
704.381 288.143 mo
648.693 425.443 li
647.675 425.443 li
703.346 288.143 li
704.381 288.143 li
cp
.246094 .183594 .179688 0 cmyk
f
705.412 288.143 mo
649.714 425.443 li
648.693 425.443 li
704.381 288.143 li
705.412 288.143 li
cp
.246094 .1875 .183594 0 cmyk
f
706.446 288.143 mo
650.732 425.443 li
649.714 425.443 li
705.412 288.143 li
706.446 288.143 li
cp
.25 .1875 .183594 0 cmyk
f
707.48 288.143 mo
651.75 425.443 li
650.732 425.443 li
706.446 288.143 li
707.48 288.143 li
cp
.253906 .191406 .1875 0 cmyk
f
708.514 288.143 mo
652.774 425.443 li
651.75 425.443 li
707.48 288.143 li
708.514 288.143 li
cp
.257813 .195313 .191406 0 cmyk
f
709.549 288.143 mo
653.789 425.443 li
652.774 425.443 li
708.514 288.143 li
709.549 288.143 li
cp
.261719 .199219 .195313 0 cmyk
f
710.583 288.143 mo
654.81 425.443 li
653.789 425.443 li
709.549 288.143 li
710.583 288.143 li
cp
.269531 .203125 .199219 0 cmyk
f
711.614 288.143 mo
655.831 425.443 li
654.81 425.443 li
710.583 288.143 li
711.614 288.143 li
cp
.265625 .207031 .195313 0 cmyk
f
712.651 288.143 mo
656.846 425.443 li
655.831 425.443 li
711.614 288.143 li
712.651 288.143 li
cp
.273438 .207031 .203125 0 cmyk
f
713.682 288.143 mo
657.867 425.443 li
656.846 425.443 li
712.651 288.143 li
713.682 288.143 li
cp
.277344 .210938 .207031 0 cmyk
f
714.723 288.143 mo
658.888 425.443 li
657.867 425.443 li
713.682 288.143 li
714.723 288.143 li
cp
.28125 .214844 .210938 0 cmyk
f
715.751 288.143 mo
659.906 425.443 li
658.888 425.443 li
714.723 288.143 li
715.751 288.143 li
cp
.285156 .21875 .214844 0 cmyk
f
716.788 288.143 mo
660.924 425.443 li
659.906 425.443 li
715.751 288.143 li
716.788 288.143 li
cp
.289063 .222656 .210938 0 cmyk
f
717.819 288.143 mo
661.948 425.443 li
660.924 425.443 li
716.788 288.143 li
717.819 288.143 li
cp
.289063 .21875 .21875 0 cmyk
f
718.853 288.143 mo
662.963 425.443 li
661.948 425.443 li
717.819 288.143 li
718.853 288.143 li
cp
.292969 .222656 .21875 0 cmyk
f
719.888 288.143 mo
663.984 425.443 li
662.963 425.443 li
718.853 288.143 li
719.888 288.143 li
cp
.300781 .230469 .226563 0 cmyk
f
720.922 288.143 mo
665.005 425.443 li
663.984 425.443 li
719.888 288.143 li
720.922 288.143 li
cp
.304688 .234375 .230469 0 cmyk
f
721.956 288.143 mo
666.02 425.443 li
665.005 425.443 li
720.922 288.143 li
721.956 288.143 li
cp
.308594 .238281 .226563 0 cmyk
f
722.99 288.143 mo
667.044 425.443 li
666.02 425.443 li
721.956 288.143 li
722.99 288.143 li
cp
.3125 .242188 .230469 0 cmyk
f
724.028 288.143 mo
668.062 425.443 li
667.044 425.443 li
722.99 288.143 li
724.028 288.143 li
cp
.3125 .238281 .234375 0 cmyk
f
725.055 288.143 mo
669.08 425.443 li
668.062 425.443 li
724.028 288.143 li
725.055 288.143 li
cp
.316406 .242188 .238281 0 cmyk
f
726.09 288.143 mo
670.101 425.443 li
669.08 425.443 li
725.055 288.143 li
726.09 288.143 li
cp
.320313 .246094 .242188 0 cmyk
f
727.127 288.143 mo
671.122 425.443 li
670.101 425.443 li
726.09 288.143 li
727.127 288.143 li
cp
.324219 .253906 .242188 0 cmyk
f
728.161 288.143 mo
672.137 425.443 li
671.122 425.443 li
727.127 288.143 li
728.161 288.143 li
cp
.328125 .257813 .246094 0 cmyk
f
729.192 288.143 mo
673.158 425.443 li
672.137 425.443 li
728.161 288.143 li
729.192 288.143 li
cp
.332031 .257813 .253906 0 cmyk
f
730.23 288.143 mo
674.183 425.443 li
673.158 425.443 li
729.192 288.143 li
730.23 288.143 li
cp
.335938 .261719 .257813 0 cmyk
f
731.261 288.143 mo
675.194 425.443 li
674.183 425.443 li
730.23 288.143 li
731.261 288.143 li
cp
.339844 .265625 .261719 0 cmyk
f
732.295 288.143 mo
676.219 425.443 li
675.194 425.443 li
731.261 288.143 li
732.295 288.143 li
cp
.34375 .269531 .257813 0 cmyk
f
733.326 288.143 mo
677.24 425.443 li
676.219 425.443 li
732.295 288.143 li
733.326 288.143 li
cp
.351563 .273438 .261719 0 cmyk
f
734.367 288.143 mo
678.258 425.443 li
677.24 425.443 li
733.326 288.143 li
734.367 288.143 li
cp
.355469 .269531 .269531 0 cmyk
f
735.398 288.143 mo
679.276 425.443 li
678.258 425.443 li
734.367 288.143 li
735.398 288.143 li
cp
.355469 .277344 .273438 0 cmyk
f
736.432 288.143 mo
680.297 425.443 li
679.276 425.443 li
735.398 288.143 li
736.432 288.143 li
cp
.359375 .28125 .269531 0 cmyk
f
737.466 288.143 mo
681.318 425.443 li
680.297 425.443 li
736.432 288.143 li
737.466 288.143 li
cp
.367188 .285156 .273438 0 cmyk
f
738.497 288.143 mo
682.333 425.443 li
681.318 425.443 li
737.466 288.143 li
738.497 288.143 li
cp
.371094 .292969 .28125 0 cmyk
f
739.535 288.143 mo
683.354 425.443 li
682.333 425.443 li
738.497 288.143 li
739.535 288.143 li
cp
.378906 .289063 .289063 0 cmyk
f
740.565 288.143 mo
684.375 425.443 li
683.354 425.443 li
739.535 288.143 li
740.565 288.143 li
cp
.378906 .296875 .292969 0 cmyk
f
741.6 288.143 mo
685.393 425.443 li
684.375 425.443 li
740.565 288.143 li
741.6 288.143 li
cp
.382813 .300781 .289063 0 cmyk
f
742.634 288.143 mo
686.414 425.443 li
685.393 425.443 li
741.6 288.143 li
742.634 288.143 li
cp
.386719 .304688 .292969 .00390625 cmyk
f
743.668 288.143 mo
687.432 425.443 li
686.414 425.443 li
742.634 288.143 li
743.668 288.143 li
cp
.390625 .308594 .296875 .00390625 cmyk
f
744.702 288.143 mo
688.456 425.443 li
687.432 425.443 li
743.668 288.143 li
744.702 288.143 li
cp
.390625 .308594 .304688 .00390625 cmyk
f
745.737 288.143 mo
689.471 425.443 li
688.456 425.443 li
744.702 288.143 li
745.737 288.143 li
cp
.394531 .3125 .308594 .00390625 cmyk
f
746.774 288.143 mo
690.489 425.443 li
689.471 425.443 li
745.737 288.143 li
746.774 288.143 li
cp
.402344 .316406 .304688 .00390625 cmyk
f
747.802 288.143 mo
691.513 425.443 li
690.489 425.443 li
746.774 288.143 li
747.802 288.143 li
cp
.40625 .320313 .308594 .00390625 cmyk
f
748.839 288.143 mo
692.531 425.443 li
691.513 425.443 li
747.802 288.143 li
748.839 288.143 li
cp
.410156 .316406 .316406 .00390625 cmyk
f
749.873 288.143 mo
693.552 425.443 li
692.531 425.443 li
748.839 288.143 li
749.873 288.143 li
cp
.410156 .324219 .316406 .00390625 cmyk
f
750.908 288.143 mo
694.57 425.443 li
693.552 425.443 li
749.873 288.143 li
750.908 288.143 li
cp
.414063 .328125 .3125 .00390625 cmyk
f
751.939 288.143 mo
695.588 425.443 li
694.57 425.443 li
750.908 288.143 li
751.939 288.143 li
cp
.417969 .332031 .320313 .00390625 cmyk
f
752.976 288.143 mo
696.606 425.443 li
695.588 425.443 li
751.939 288.143 li
752.976 288.143 li
cp
.421875 .335938 .320313 .0078125 cmyk
f
754.007 288.143 mo
697.627 425.443 li
696.606 425.443 li
752.976 288.143 li
754.007 288.143 li
cp
.421875 .332031 .328125 .0078125 cmyk
f
755.041 288.143 mo
698.645 425.443 li
697.627 425.443 li
754.007 288.143 li
755.041 288.143 li
cp
.425781 .335938 .332031 .0078125 cmyk
f
756.079 288.143 mo
699.67 425.443 li
698.645 425.443 li
755.041 288.143 li
756.079 288.143 li
cp
.429688 .339844 .328125 .0078125 cmyk
f
757.11 288.143 mo
700.684 425.443 li
699.67 425.443 li
756.079 288.143 li
757.11 288.143 li
cp
.433594 .34375 .332031 .0078125 cmyk
f
758.144 288.143 mo
701.705 425.443 li
700.684 425.443 li
757.11 288.143 li
758.144 288.143 li
cp
.4375 .34375 .339844 .0078125 cmyk
f
759.178 288.143 mo
702.72 425.443 li
701.705 425.443 li
758.144 288.143 li
759.178 288.143 li
cp
.4375 .347656 .34375 .0078125 cmyk
f
760.212 288.143 mo
703.745 425.443 li
702.72 425.443 li
759.178 288.143 li
760.212 288.143 li
cp
.441406 .351563 .339844 .0078125 cmyk
f
761.243 288.143 mo
704.762 425.443 li
703.745 425.443 li
760.212 288.143 li
761.243 288.143 li
cp
.445313 .355469 .34375 .0117188 cmyk
f
762.281 288.143 mo
705.784 425.443 li
704.762 425.443 li
761.243 288.143 li
762.281 288.143 li
cp
.449219 .359375 .347656 .0117188 cmyk
f
763.312 288.143 mo
706.802 425.443 li
705.784 425.443 li
762.281 288.143 li
763.312 288.143 li
cp
.449219 .359375 .355469 .015625 cmyk
f
764.346 288.143 mo
707.819 425.443 li
706.802 425.443 li
763.312 288.143 li
764.346 288.143 li
cp
.453125 .363281 .351563 .015625 cmyk
f
765.38 288.143 mo
708.841 425.443 li
707.819 425.443 li
764.346 288.143 li
765.38 288.143 li
cp
.457031 .367188 .351563 .015625 cmyk
f
766.415 288.143 mo
709.859 425.443 li
708.841 425.443 li
765.38 288.143 li
766.415 288.143 li
cp
.460938 .371094 .355469 .0195313 cmyk
f
767.449 288.143 mo
710.88 425.443 li
709.859 425.443 li
766.415 288.143 li
767.449 288.143 li
cp
.460938 .367188 .363281 .0195313 cmyk
f
768.483 288.143 mo
711.901 425.443 li
710.88 425.443 li
767.449 288.143 li
768.483 288.143 li
cp
.464844 .371094 .359375 .0195313 cmyk
f
769.52 288.143 mo
712.916 425.443 li
711.901 425.443 li
768.483 288.143 li
769.52 288.143 li
cp
.46875 .375 .363281 .0195313 cmyk
f
770.551 288.143 mo
713.94 425.443 li
712.916 425.443 li
769.52 288.143 li
770.551 288.143 li
cp
.472656 .378906 .367188 .0234375 cmyk
f
771.586 288.143 mo
714.958 425.443 li
713.94 425.443 li
770.551 288.143 li
771.586 288.143 li
cp
.472656 .378906 .371094 .0234375 cmyk
f
772.62 288.143 mo
715.976 425.443 li
714.958 425.443 li
771.586 288.143 li
772.62 288.143 li
cp
.476563 .382813 .367188 .0234375 cmyk
f
773.651 288.143 mo
716.994 425.443 li
715.976 425.443 li
772.62 288.143 li
773.651 288.143 li
cp
.480469 .386719 .371094 .0273438 cmyk
f
774.685 288.143 mo
718.018 425.443 li
716.994 425.443 li
773.651 288.143 li
774.685 288.143 li
cp
.484375 .390625 .375 .03125 cmyk
f
775.719 288.143 mo
719.033 425.443 li
718.018 425.443 li
774.685 288.143 li
775.719 288.143 li
cp
f
776.753 288.143 mo
720.054 425.443 li
719.033 425.443 li
775.719 288.143 li
776.753 288.143 li
cp
.484375 .390625 .382813 .03125 cmyk
f
777.788 288.143 mo
721.075 425.443 li
720.054 425.443 li
776.753 288.143 li
777.788 288.143 li
cp
.488281 .394531 .386719 .0351563 cmyk
f
721.075 425.443 mo
777.788 288.143 li
721.075 425.443 li
cp
f
grestore
656.562 334.856 mo
620.994 423.202 li
581.491 423.202 li
634.419 290.387 li
664.454 290.387 li
700.975 372.502 li
734.536 290.387 li
774.587 290.387 li
719.76 423.202 li
691.67 423.202 li
656.562 334.856 li
cp
0 0 0 0 cmyk
f
798.815 363.178 mo
796.476 358.721 791.65 355.987 784.339 354.976 cv
792.162 354.056 798.864 351.677 804.443 347.857 cv
809.545 344.363 813.428 339.785 816.1 334.151 cv
757.149 332.624 li
475.596 357.093 li
715.486 379.65 li
737.062 381.278 li
768.45 381.278 li
797.536 381.278 li
797.823 380.587 li
800.821 373.438 801.154 367.634 798.815 363.178 cv
cp
1 1 .15 1 cmyk
f
gsave
689.67 425.443 mo
656.249 341.254 li
622.335 425.443 li
578.356 425.443 li
633.039 288.143 li
666.415 288.143 li
701.229 366.355 li
733.179 288.143 li
777.791 288.143 li
721.075 425.443 li
689.67 425.443 li
cp
clp
grestore
58.0665 190.169 mo
51.2544 190.169 li
51.2544 260.705 li
58.3145 260.705 li
71.8932 260.705 71.1395 251.488 71.1395 238.262 cv
71.1395 209.405 li
71.1395 197.131 70.7904 190.169 58.0665 190.169 cv
cp
58.2166 270.323 mo
38.4294 270.323 li
38.4294 180.551 li
58.3145 180.551 li
77.1034 180.551 83.9678 187.366 83.9678 206.198 cv
83.9678 241.469 li
83.9678 260.555 77.3514 270.323 58.2166 270.323 cv
cp
0 0 0 .85 cmyk
f
108.013 228.647 mo
108.013 260.705 li
130.452 260.705 li
130.452 270.323 li
95.1877 270.323 li
95.1877 180.551 li
130.452 180.551 li
130.452 190.169 li
108.013 190.169 li
108.013 219.026 li
124.038 219.026 li
124.038 228.647 li
108.013 228.647 li
cp
f
158.507 190.169 mo
152.298 190.169 148.889 193.829 148.889 199.94 cv
148.889 205.499 151.793 209.806 155.3 212.615 cv
171.332 225.437 li
177.893 230.748 184.157 238.764 184.157 250.235 cv
184.157 263.556 175.188 271.223 161.711 271.223 cv
144.928 271.223 137.017 260.352 136.067 244.673 cv
148.889 241.469 li
149.339 250.734 151.995 260.705 161.711 260.705 cv
168.125 260.705 171.332 257.501 171.332 251.084 cv
171.332 243.022 166.37 238.813 161.711 235.058 cv
145.682 222.23 li
140.171 217.923 136.015 210.811 136.015 201.291 cv
136.015 187.963 145.033 179.651 158.507 179.651 cv
174.386 179.651 183.002 188.417 184.157 202.994 cv
171.332 206.198 li
170.781 197.682 167.577 190.169 158.507 190.169 cv
cp
f
206.952 180.551 mo
206.952 270.323 li
194.124 270.323 li
194.124 180.551 li
206.952 180.551 li
cp
f
257.548 238.262 mo
257.548 235.058 li
244.723 235.058 li
244.723 225.538 li
270.369 225.538 li
270.369 270.323 li
260.751 270.323 li
257.548 260.705 li
255.646 266.013 251.985 271.223 244.723 271.223 cv
223.78 271.223 219.073 256.493 219.073 235.355 cv
219.073 212.615 li
219.073 193.324 225.937 179.651 245.222 179.651 cv
263.156 179.651 269.616 191.373 269.616 209.405 cv
256.794 209.405 li
256.794 198.485 255.942 190.169 245.222 190.169 cv
234.501 190.169 231.894 198.485 231.894 209.405 cv
231.894 238.262 li
231.894 250.082 233.65 260.705 244.723 260.705 cv
255.743 260.705 257.548 249.981 257.548 238.262 cv
cp
f
293.566 210.609 mo
293.566 270.323 li
280.741 270.323 li
280.741 180.551 li
290.356 180.551 li
312.802 236.056 li
312.802 180.551 li
325.627 180.551 li
325.627 270.323 li
316.511 270.323 li
293.566 210.609 li
cp
f
358.637 190.169 mo
352.425 190.169 349.022 193.829 349.022 199.94 cv
349.022 205.499 351.926 209.806 355.433 212.615 cv
371.462 225.437 li
378.026 230.748 384.287 238.764 384.287 250.235 cv
384.287 263.556 375.322 271.223 361.844 271.223 cv
345.062 271.223 337.147 260.352 336.194 244.673 cv
349.022 241.469 li
349.469 250.734 352.125 260.705 361.844 260.705 cv
368.258 260.705 371.462 257.501 371.462 251.084 cv
371.462 243.022 366.503 238.813 361.844 235.058 cv
345.812 222.23 li
340.305 217.923 336.145 210.811 336.145 201.291 cv
336.145 187.963 345.163 179.651 358.637 179.651 cv
374.519 179.651 383.139 188.417 384.287 202.994 cv
371.462 206.198 li
370.911 197.682 367.704 190.169 358.637 190.169 cv
cp
f
430.426 228.647 mo
424.012 228.647 li
424.012 260.705 li
430.426 260.705 li
441.496 260.705 446.455 255.896 446.455 244.673 cv
446.455 233.453 441.496 228.647 430.426 228.647 cv
cp
446.455 202.994 mo
446.455 190.319 436.634 190.169 424.012 190.169 cv
424.012 219.026 li
430.426 219.026 li
441.045 219.026 446.455 213.816 446.455 202.994 cv
cp
433.633 270.323 mo
411.19 270.323 li
411.19 180.551 li
430.426 180.551 li
446.605 180.551 457.776 187.164 457.776 202.994 cv
457.776 214.664 452.618 219.623 443.251 222.23 cv
453.218 225.538 459.276 231.296 459.276 244.673 cv
459.276 260.503 449.46 270.323 433.633 270.323 cv
cp
f
480.77 241.469 mo
461.534 180.551 li
474.359 180.551 li
487.181 225.437 li
500.009 180.551 li
512.831 180.551 li
493.595 241.469 li
493.595 270.323 li
480.77 270.323 li
480.77 241.469 li
cp
f
54.3049 193.931 mo
47.4927 193.931 li
47.4927 264.463 li
54.5528 264.463 li
68.1315 264.463 67.3778 255.25 67.3778 242.024 cv
67.3778 213.166 li
67.3778 200.893 67.0287 193.931 54.3049 193.931 cv
cp
54.4549 274.084 mo
34.6677 274.084 li
34.6677 184.313 li
54.5528 184.313 li
73.3417 184.313 80.2061 191.128 80.2061 209.959 cv
80.2061 245.231 li
80.2061 264.313 73.5897 274.084 54.4549 274.084 cv
cp
f
104.251 232.409 mo
104.251 264.463 li
126.691 264.463 li
126.691 274.084 li
91.4259 274.084 li
91.4259 184.313 li
126.691 184.313 li
126.691 193.931 li
104.251 193.931 li
104.251 222.788 li
120.28 222.788 li
120.28 232.409 li
104.251 232.409 li
cp
f
154.745 193.931 mo
148.537 193.931 145.127 197.588 145.127 203.702 cv
145.127 209.261 148.031 213.568 151.538 216.377 cv
167.57 229.199 li
174.131 234.51 180.395 242.526 180.395 253.997 cv
180.395 267.318 171.427 274.985 157.949 274.985 cv
141.167 274.985 133.255 264.114 132.305 248.434 cv
145.127 245.231 li
145.577 254.496 148.233 264.463 157.949 264.463 cv
164.363 264.463 167.57 261.259 167.57 254.845 cv
167.57 246.784 162.608 242.575 157.949 238.82 cv
141.92 225.991 li
136.41 221.685 132.257 214.573 132.257 205.053 cv
132.257 191.725 141.271 183.412 154.745 183.412 cv
170.624 183.412 179.24 192.179 180.395 206.755 cv
167.57 209.959 li
167.019 201.444 163.815 193.931 154.745 193.931 cv
cp
f
203.191 184.313 mo
203.191 274.084 li
190.362 274.084 li
190.362 184.313 li
203.191 184.313 li
cp
f
253.786 242.024 mo
253.786 238.82 li
240.961 238.82 li
240.961 229.3 li
266.608 229.3 li
266.608 274.084 li
256.99 274.084 li
253.786 264.463 li
251.884 269.775 248.223 274.985 240.961 274.985 cv
220.019 274.985 215.311 260.255 215.311 239.117 cv
215.311 216.377 li
215.311 197.085 222.175 183.412 241.46 183.412 cv
259.394 183.412 265.854 195.134 265.854 213.166 cv
253.032 213.166 li
253.032 202.247 252.181 193.931 241.46 193.931 cv
230.739 193.931 228.133 202.247 228.133 213.166 cv
228.133 242.024 li
228.133 253.844 229.888 264.463 240.961 264.463 cv
251.982 264.463 253.786 253.743 253.786 242.024 cv
cp
f
289.804 214.37 mo
289.804 274.084 li
276.979 274.084 li
276.979 184.313 li
286.594 184.313 li
309.04 239.818 li
309.04 184.313 li
321.865 184.313 li
321.865 274.084 li
312.75 274.084 li
289.804 214.37 li
cp
f
354.875 193.931 mo
348.664 193.931 345.261 197.588 345.261 203.702 cv
345.261 209.261 348.164 213.568 351.672 216.377 cv
367.704 229.199 li
374.265 234.51 380.525 242.526 380.525 253.997 cv
380.525 267.318 371.56 274.985 358.083 274.985 cv
341.3 274.985 333.385 264.114 332.432 248.434 cv
345.261 245.231 li
345.708 254.496 348.363 264.463 358.083 264.463 cv
364.497 264.463 367.704 261.259 367.704 254.845 cv
367.704 246.784 362.741 242.575 358.083 238.82 cv
342.05 225.991 li
336.543 221.685 332.384 214.573 332.384 205.053 cv
332.384 191.725 341.401 183.412 354.875 183.412 cv
370.757 183.412 379.377 192.179 380.525 206.755 cv
367.704 209.959 li
367.149 201.444 363.942 193.931 354.875 193.931 cv
cp
f
426.664 232.409 mo
420.25 232.409 li
420.25 264.463 li
426.664 264.463 li
437.734 264.463 442.693 259.658 442.693 248.434 cv
442.693 237.214 437.734 232.409 426.664 232.409 cv
cp
442.693 206.755 mo
442.693 194.081 432.876 193.931 420.25 193.931 cv
420.25 222.788 li
426.664 222.788 li
437.284 222.788 442.693 217.577 442.693 206.755 cv
cp
429.871 274.084 mo
407.428 274.084 li
407.428 184.313 li
426.664 184.313 li
442.843 184.313 454.014 190.926 454.014 206.755 cv
454.014 218.426 448.856 223.385 439.489 225.991 cv
449.46 229.3 455.518 235.058 455.518 248.434 cv
455.518 264.264 445.698 274.084 429.871 274.084 cv
cp
f
477.008 245.231 mo
457.772 184.313 li
470.597 184.313 li
483.419 229.199 li
496.248 184.313 li
509.069 184.313 li
489.833 245.231 li
489.833 274.084 li
477.008 274.084 li
477.008 245.231 li
cp
f
55.7143 192.524 mo
48.8988 192.524 li
48.8988 263.054 li
55.9655 263.054 li
69.5409 263.054 68.7872 253.84 68.7872 240.614 cv
68.7872 211.757 li
68.7872 199.48 68.4381 192.524 55.7143 192.524 cv
cp
55.8643 272.675 mo
36.0771 272.675 li
36.0771 182.903 li
55.9655 182.903 li
74.7511 182.903 81.6155 189.719 81.6155 208.55 cv
81.6155 243.818 li
81.6155 262.904 74.9991 272.675 55.8643 272.675 cv
cp
0 0 0 0 cmyk
f
105.657 230.996 mo
105.657 263.054 li
128.103 263.054 li
128.103 272.675 li
92.8354 272.675 li
92.8354 182.903 li
128.103 182.903 li
128.103 192.524 li
105.657 192.524 li
105.657 221.378 li
121.689 221.378 li
121.689 230.996 li
105.657 230.996 li
cp
f
156.158 192.524 mo
149.946 192.524 146.54 196.178 146.54 202.292 cv
146.54 207.852 149.444 212.155 152.951 214.967 cv
168.98 227.789 li
175.544 233.1 181.805 241.117 181.805 252.588 cv
181.805 265.909 172.836 273.579 159.362 273.579 cv
142.579 273.579 134.668 262.705 133.715 247.022 cv
146.54 243.818 li
146.987 253.087 149.643 263.054 159.362 263.054 cv
165.773 263.054 168.98 259.85 168.98 253.436 cv
168.98 245.374 164.021 241.165 159.362 237.407 cv
143.33 224.582 li
137.822 220.276 133.666 213.163 133.666 203.643 cv
133.666 190.316 142.68 182.003 156.158 182.003 cv
172.037 182.003 180.653 190.769 181.805 205.346 cv
168.98 208.55 li
168.428 200.038 165.224 192.524 156.158 192.524 cv
cp
f
204.6 182.903 mo
204.6 272.675 li
191.775 272.675 li
191.775 182.903 li
204.6 182.903 li
cp
f
255.195 240.614 mo
255.195 237.407 li
242.37 237.407 li
242.37 227.89 li
268.017 227.89 li
268.017 272.675 li
258.399 272.675 li
255.195 263.054 li
253.29 268.365 249.636 273.579 242.37 273.579 cv
221.431 273.579 216.72 258.845 216.72 237.707 cv
216.72 214.967 li
216.72 195.676 223.585 182.003 242.869 182.003 cv
260.807 182.003 267.267 193.725 267.267 211.757 cv
254.445 211.757 li
254.445 200.837 253.59 192.524 242.869 192.524 cv
232.149 192.524 229.545 200.837 229.545 211.757 cv
229.545 240.614 li
229.545 252.434 231.297 263.054 242.37 263.054 cv
253.391 263.054 255.195 252.336 255.195 240.614 cv
cp
f
291.21 212.961 mo
291.21 272.675 li
278.389 272.675 li
278.389 182.903 li
288.007 182.903 li
310.446 238.409 li
310.446 182.903 li
323.275 182.903 li
323.275 272.675 li
314.159 272.675 li
291.21 212.961 li
cp
f
356.285 192.524 mo
350.073 192.524 346.67 196.178 346.67 202.292 cv
346.67 207.852 349.574 212.155 353.081 214.967 cv
369.113 227.789 li
375.674 233.1 381.935 241.117 381.935 252.588 cv
381.935 265.909 372.966 273.579 359.492 273.579 cv
342.709 273.579 334.795 262.705 333.842 247.022 cv
346.67 243.818 li
347.117 253.087 349.773 263.054 359.492 263.054 cv
365.906 263.054 369.113 259.85 369.113 253.436 cv
369.113 245.374 364.151 241.165 359.492 237.407 cv
343.46 224.582 li
337.953 220.276 333.793 213.163 333.793 203.643 cv
333.793 190.316 342.811 182.003 356.285 182.003 cv
372.167 182.003 380.783 190.769 381.935 205.346 cv
369.113 208.55 li
368.562 200.038 365.351 192.524 356.285 192.524 cv
cp
f
428.07 230.996 mo
421.659 230.996 li
421.659 263.054 li
428.07 263.054 li
439.147 263.054 444.102 258.245 444.102 247.022 cv
444.102 235.805 439.147 230.996 428.07 230.996 cv
cp
444.102 205.346 mo
444.102 192.671 434.285 192.524 421.659 192.524 cv
421.659 221.378 li
428.07 221.378 li
438.693 221.378 444.102 216.165 444.102 205.346 cv
cp
431.281 272.675 mo
408.838 272.675 li
408.838 182.903 li
428.07 182.903 li
444.253 182.903 455.427 189.513 455.427 205.346 cv
455.427 217.019 450.265 221.975 440.899 224.582 cv
450.869 227.89 456.927 233.649 456.927 247.022 cv
456.927 262.855 447.107 272.675 431.281 272.675 cv
cp
f
478.418 243.818 mo
459.182 182.903 li
472.007 182.903 li
484.829 227.789 li
497.657 182.903 li
510.479 182.903 li
491.246 243.818 li
491.246 272.675 li
478.418 272.675 li
478.418 243.818 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
[/CSD [/1 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 2
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize A4.FullBleed
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
