%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: bynbbusinesscard.ai
%%Creator: Adobe Graphics Manager
%%For: Nadia Bothe
%%CreationDate: 3/03/14
%%BoundingBox: 6 3 150 255
%%HiResBoundingBox: 6 3 150 255
%%CropBox: 6 3 150 255
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%TargetDevice: (Canon MX350 series) (3010.000) 705
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
156.000000 258.000000 0.000000 0.000000 1 

%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [6 3 150 255]]
[/BleedBox [6 3 150 255]]
]xpdfm
Adobe_AGM_Core/ps gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
156.000000 258.000000 0.000000 0.000000 1 

%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -258 translate
pgsv
[0 -1 1 0 0 258 ]ct
gsave
np
gsave
3 6 mo
3 150 li
255 150 li
255 6 li
cp
clp
[1 0 0 1 0 0 ]ct
258.116 152.111 mo
-.116211 152.111 li
-.116211 4.54883 li
258.116 4.54883 li
258.116 152.111 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[172.43 -82.4916 82.4916 172.43 18.5234 131.183 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.54416 ]
/C1 [.317148 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.293349 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.293349 ]
/C1 [.120183 ]
/N 1 
>>
]
/Bounds [.429448 .530106 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[172.43 -82.4916 82.4916 172.43 18.5234 131.183 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~MMd7ILkphAL5(D8KS+o/Jq8K'J:E&tIXQWlI!^0cH$OXZGB\4RF`heJF)uABEH#l8Df0H0D/=$(CMITu
BkV0mAnGUcA7T1[@U`bS?sm>K?=$oB>[(E9>$5!1=BAR)<`N.!;c?Rl;,L.d:f'q`:JX_\:/4PY9he>U
9MA,Q91qoM8kMZH8OuBC7n6'=7R]a76psF16UF++5s[e%5X7Ou5!D.n4Ztni4?GVc3]]8]3B/uW2`EWQ
2Dm?L1c.!E1GU^@0ekC:0J>(4/hSb./M&G(.k<,".Olkr-n$Jk-RU5f,pai_,U=TZ,9e<T+X%sN+<M[I
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
259.832 71.334 mo
62.5088 71.334 li
62.5088 -4.95117 li
259.832 -4.95117 li
259.832 71.334 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[72.9649 0 0 92.0816 161.17 33.1904 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.13 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[72.9649 0 0 92.0816 161.17 33.1904 ]ct
clp
/1 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~zz!<E3%!<E3%!WiE)!WiE)!s8W-!s8W."9\i1"9\i2"U,&5"U,&6"pP89"pP8:#6tJ=#6tM?#RC\A#RC
_C#mgnE#mgqG$47+I$4@4L$O[=M$OdFP$k*OQ$k3XT%1NaU%1WjX%LrsY%hB0]%hB0]&.fBa&.fBa&J5
Te&J5Te&eYfi&eYfj',)#m',)#n'GM5q'GM5r'bqGu'bqK"()@Z$()@]&(Ddl((Ddo*(`4),(`4,.)&X
;0)&aD3)B'M4)B0V7)]K_8)]Th;*#oq<*??.@*??.@*Zc@D*Zc@D+!2RH+!2RH+<VdL+<VdM~>
]
>>
0 0 0 0 0 1 [
]true true []
/Separation
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
.770508 3.29492 mo
.770508 148.584 li
62.5088 71.7168 li
62.5088 3.29492 li
.770508 3.29492 li
cp
1 1 .15 1 cmyk
f
258.116 123.38 mo
21.3457 122.932 li
23.6934 120.044 li
258.116 120.044 li
258.116 123.38 li
cp
0 0 0 .22 cmyk
f
62.8525 124.469 mo
62.3643 123.811 61.2861 123.478 59.6416 123.478 cv
55.6494 123.478 li
55.6523 123.471 li
49.1084 123.471 li
49.1064 123.478 li
39.3203 123.478 li
39.3184 123.471 li
34.4229 123.471 li
34.4209 123.478 li
21.7939 122.382 li
19.6309 125.143 li
32.8174 127.498 li
31.21 131.541 li
14.1426 132.167 li
12.6484 134.049 li
29.5752 135.641 li
27.9775 139.656 li
6.44141 141.945 li
5.09277 143.688 li
50.0186 143.688 li
52.0195 143.688 53.6846 143.352 54.9688 142.689 cv
56.3076 141.996 57.2842 140.931 57.874 139.523 cv
58.9199 137.026 li
59.3945 135.897 59.4443 134.964 59.0703 134.249 cv
58.8516 133.832 58.4961 133.509 58.0059 133.282 cv
58.6221 133.084 59.1865 132.811 59.6924 132.465 cv
60.6025 131.844 61.2783 131.008 61.71 129.983 cv
62.7051 127.608 li
63.2959 126.193 63.3457 125.138 62.8525 124.469 cv
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[58.0957 0 0 58.0957 5.09277 133.035 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[58.0957 0 0 58.0957 5.09277 133.035 ]ct
clp
/2 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!$#!WiH+"9\l3"pYA=#RLeE$4@4M%1NdW%hB3_&J5Wg',2,q'c%Q$(Dmu,)B'P6*#ot>*ZcCF+<_mP
+sS<X,UF``-RU;j.4H_r.k</%/M8Y/0/,(70etL?1c.'I2E!KQ3&ioY3]fDc4?Yhk5!M7s5s[h(6UO70
77B[97n?0B8P2TJ92&#R:/4S\:f("d;GpFm<)lq!<``@)=BSd1>?b?;?!UcC?XI2L@:E\U@q9+]AS,Oe
BP;*oC2.O"Ci!s+DJsH4E,fl<EcZ;DF`hkNGB\:VH$O^_H[L3hI=?WpIt3*$JqAW-KS5&5L5(J>Ll$tG
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
44.4375 129.464 mo
48.375 129.121 li
48.4482 128.939 li
43.8184 128.07 li
44.4375 129.464 li
cp
36.9863 137.392 mo
42.4434 136.483 li
42.0625 135.521 li
37.8965 135.128 li
36.9863 137.392 li
cp
6.00293 142.524 mo
6.44141 141.945 li
30.002 138.549 li
31.6006 134.537 li
13.5967 132.822 li
14.1133 132.167 li
33.2344 130.438 li
34.8516 126.384 li
21.2998 122.978 li
21.7939 122.382 li
36.4434 122.389 li
36.6689 122.382 li
41.2832 122.382 li
41.2861 122.389 li
51.126 122.389 li
51.3525 122.382 li
57.7129 122.382 li
57.708 122.389 li
61.5479 122.389 li
63.2412 122.389 64.3184 122.729 64.8369 123.433 cv
65.3643 124.145 65.3252 125.195 64.7178 126.646 cv
63.7227 129.023 li
63.5244 129.494 63.2695 129.931 62.9678 130.316 cv
62.8506 130.457 li
62.71 130.616 li
62.5791 130.752 li
62.3691 130.952 li
62.2314 131.074 li
62.0908 131.188 li
61.9434 131.303 li
61.8906 131.341 61.8408 131.377 61.7881 131.412 cv
61.2666 131.77 60.6758 132.046 60.0234 132.241 cv
60.4971 132.479 60.8477 132.811 61.0693 133.234 cv
61.46 133.976 61.4141 134.928 60.9375 136.066 cv
59.8916 138.561 li
59.3184 139.926 58.3799 140.952 57.0957 141.617 cv
55.835 142.268 54.1875 142.599 52.1982 142.599 cv
6.00293 142.524 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[59.2021 0 0 59.2021 6.00293 132.49 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[59.2021 0 0 59.2021 6.00293 132.49 ]ct
clp
/3 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~:f1(e;,U:i;GpFl;c?Xp<)cgs<E3%"<`W7%='&I)=BJ[-=]nm1=^#!4>$G38>?b?;>[1Q??!U`B?=$rF
?XI/J?smAM@:<SQ@U`eU@UinX@q9+\A7T7_AS#IcAnG[gB4kjjBP;'nBk_9qC2.KuCMR^$Ci!p(Ci+$+
D/O6/DJjB2Df9T6E,]c9EH,u=EcQ2AF)uDDFEDVHF`hhLF`qqOG'A.SGB\:VG^+LZH$O^^H?smaH[C*e
I!g<hI=6NlIXZ`pIt)rtIt3'"J:W9&JUrE)JqAW-K7ef0KS5#4KnY58L5(G;LPLY?LkpkCLl$tFM2I1J
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
6.20313 142.27 mo
48.5586 135.803 li
14.1875 132.494 li
51.5381 129.188 li
21.5293 122.72 li
61.5479 122.72 li
63.1152 122.72 64.123 123.022 64.5732 123.628 cv
65.0205 124.232 64.9678 125.197 64.4131 126.52 cv
63.4199 128.895 li
63.0273 129.83 62.4219 130.578 61.6045 131.139 cv
60.7852 131.7 59.8018 132.048 58.6563 132.184 cv
59.7275 132.332 60.4355 132.732 60.7783 133.387 cv
61.1211 134.04 61.0732 134.89 60.6328 135.938 cv
59.5869 138.435 li
59.0439 139.73 58.1631 140.695 56.9434 141.324 cv
55.7256 141.955 54.1445 142.27 52.1982 142.27 cv
6.20313 142.27 li
cp
1 1 .15 1 cmyk
f
gsave
44.7705 142.563 mo
39.8711 130.216 li
34.8975 142.563 li
28.4463 142.563 li
36.4668 122.427 li
41.3623 122.427 li
46.4668 133.896 li
51.1523 122.427 li
57.6963 122.427 li
49.3779 142.563 li
44.7705 142.563 li
cp
clp
36.4668 122.427 mo
28.4463 142.563 li
36.4668 122.427 li
cp
0 0 0 0 cmyk
f
36.6172 122.427 mo
28.5947 142.563 li
28.4463 142.563 li
36.4668 122.427 li
36.6172 122.427 li
cp
f
36.7695 122.427 mo
28.7441 142.563 li
28.5947 142.563 li
36.6172 122.427 li
36.7695 122.427 li
cp
.00390601 0 0 0 cmyk
f
36.9199 122.427 mo
28.8945 142.563 li
28.7441 142.563 li
36.7695 122.427 li
36.9199 122.427 li
cp
.00781298 .00390601 .00390601 0 cmyk
f
37.0723 122.427 mo
29.0439 142.563 li
28.8945 142.563 li
36.9199 122.427 li
37.0723 122.427 li
cp
.015625 .00390601 .00781298 0 cmyk
f
37.2246 122.427 mo
29.1943 142.563 li
29.0439 142.563 li
37.0723 122.427 li
37.2246 122.427 li
cp
.019531 .011719 .00781298 0 cmyk
f
37.374 122.427 mo
29.3447 142.563 li
29.1943 142.563 li
37.2246 122.427 li
37.374 122.427 li
cp
f
37.5273 122.427 mo
29.4922 142.563 li
29.3447 142.563 li
37.374 122.427 li
37.5273 122.427 li
cp
.023438 .015625 .011719 0 cmyk
f
37.6797 122.427 mo
29.6426 142.563 li
29.4922 142.563 li
37.5273 122.427 li
37.6797 122.427 li
cp
.027344 .019531 .015625 0 cmyk
f
37.832 122.427 mo
29.792 142.563 li
29.6426 142.563 li
37.6797 122.427 li
37.832 122.427 li
cp
.03125 .015625 .019531 0 cmyk
f
37.9814 122.427 mo
29.9404 142.563 li
29.792 142.563 li
37.832 122.427 li
37.9814 122.427 li
cp
.035156 .019531 .019531 0 cmyk
f
38.1348 122.427 mo
30.0898 142.563 li
29.9404 142.563 li
37.9814 122.427 li
38.1348 122.427 li
cp
.039063 .019531 .023438 0 cmyk
f
38.2842 122.427 mo
30.2402 142.563 li
30.0898 142.563 li
38.1348 122.427 li
38.2842 122.427 li
cp
.035156 .023438 .023438 0 cmyk
f
38.4365 122.427 mo
30.3906 142.563 li
30.2402 142.563 li
38.2842 122.427 li
38.4365 122.427 li
cp
.039063 .027344 .023438 0 cmyk
f
38.5889 122.427 mo
30.54 142.563 li
30.3906 142.563 li
38.4365 122.427 li
38.5889 122.427 li
cp
.042969 .03125 .027344 0 cmyk
f
38.7422 122.427 mo
30.6885 142.563 li
30.54 142.563 li
38.5889 122.427 li
38.7422 122.427 li
cp
.046875 .03125 .03125 0 cmyk
f
38.8916 122.427 mo
30.8379 142.563 li
30.6885 142.563 li
38.7422 122.427 li
38.8916 122.427 li
cp
.050781 .03125 .035156 0 cmyk
f
39.0439 122.427 mo
30.9883 142.563 li
30.8379 142.563 li
38.8916 122.427 li
39.0439 122.427 li
cp
.054688 .035156 .035156 0 cmyk
f
39.1943 122.427 mo
31.1387 142.563 li
30.9883 142.563 li
39.0439 122.427 li
39.1943 122.427 li
cp
.054688 .042969 .035156 0 cmyk
f
39.3467 122.427 mo
31.2861 142.563 li
31.1387 142.563 li
39.1943 122.427 li
39.3467 122.427 li
cp
.0625 .042969 .039063 0 cmyk
f
39.499 122.427 mo
31.4365 142.563 li
31.2861 142.563 li
39.3467 122.427 li
39.499 122.427 li
cp
.066406 .042969 .046875 0 cmyk
f
39.6494 122.427 mo
31.5859 142.563 li
31.4365 142.563 li
39.499 122.427 li
39.6494 122.427 li
cp
.070313 .046875 .042969 0 cmyk
f
39.8018 122.427 mo
31.7363 142.563 li
31.5859 142.563 li
39.6494 122.427 li
39.8018 122.427 li
cp
.074219 .046875 .046875 0 cmyk
f
39.9541 122.427 mo
31.8857 142.563 li
31.7363 142.563 li
39.8018 122.427 li
39.9541 122.427 li
cp
.074219 .050781 .050781 0 cmyk
f
40.1045 122.427 mo
32.0342 142.563 li
31.8857 142.563 li
39.9541 122.427 li
40.1045 122.427 li
cp
.074219 .054688 .054688 0 cmyk
f
40.2568 122.427 mo
32.1836 142.563 li
32.0342 142.563 li
40.1045 122.427 li
40.2568 122.427 li
cp
.078125 .058594 .054688 0 cmyk
f
40.4092 122.427 mo
32.334 142.563 li
32.1836 142.563 li
40.2568 122.427 li
40.4092 122.427 li
cp
.082031 .058594 .058594 0 cmyk
f
40.5596 122.427 mo
32.4814 142.563 li
32.334 142.563 li
40.4092 122.427 li
40.5596 122.427 li
cp
.09375 .0625 .0625 0 cmyk
f
40.7119 122.427 mo
32.6318 142.563 li
32.4814 142.563 li
40.5596 122.427 li
40.7119 122.427 li
cp
.097656 .066406 .066406 0 cmyk
f
40.8643 122.427 mo
32.7822 142.563 li
32.6318 142.563 li
40.7119 122.427 li
40.8643 122.427 li
cp
.101563 .070313 .070313 0 cmyk
f
41.0146 122.427 mo
32.9316 142.563 li
32.7822 142.563 li
40.8643 122.427 li
41.0146 122.427 li
cp
f
41.167 122.427 mo
33.082 142.563 li
32.9316 142.563 li
41.0146 122.427 li
41.167 122.427 li
cp
.105469 .074219 .074219 0 cmyk
f
41.3193 122.427 mo
33.2324 142.563 li
33.082 142.563 li
41.167 122.427 li
41.3193 122.427 li
cp
.109375 .074219 .074219 0 cmyk
f
41.4697 122.427 mo
33.3799 142.563 li
33.2324 142.563 li
41.3193 122.427 li
41.4697 122.427 li
cp
.109375 .078125 .078125 0 cmyk
f
41.6221 122.427 mo
33.5303 142.563 li
33.3799 142.563 li
41.4697 122.427 li
41.6221 122.427 li
cp
.113281 .082031 .078125 0 cmyk
f
41.7744 122.427 mo
33.6797 142.563 li
33.5303 142.563 li
41.6221 122.427 li
41.7744 122.427 li
cp
.121094 .078125 .082031 0 cmyk
f
41.9238 122.427 mo
33.8271 142.563 li
33.6797 142.563 li
41.7744 122.427 li
41.9238 122.427 li
cp
.121094 .085938 .085938 0 cmyk
f
42.0771 122.427 mo
33.9775 142.563 li
33.8271 142.563 li
41.9238 122.427 li
42.0771 122.427 li
cp
.125 .089844 .089844 0 cmyk
f
42.2266 122.427 mo
34.1279 142.563 li
33.9775 142.563 li
42.0771 122.427 li
42.2266 122.427 li
cp
.128906 .09375 .09375 0 cmyk
f
42.3789 122.427 mo
34.2783 142.563 li
34.1279 142.563 li
42.2266 122.427 li
42.3789 122.427 li
cp
.128906 .097656 .089844 0 cmyk
f
42.5313 122.427 mo
34.4258 142.563 li
34.2783 142.563 li
42.3789 122.427 li
42.5313 122.427 li
cp
.136719 .09375 .097656 0 cmyk
f
42.6846 122.427 mo
34.5752 142.563 li
34.4258 142.563 li
42.5313 122.427 li
42.6846 122.427 li
cp
.140625 .097656 .101563 0 cmyk
f
42.834 122.427 mo
34.7256 142.563 li
34.5752 142.563 li
42.6846 122.427 li
42.834 122.427 li
cp
.140625 .101563 .101563 0 cmyk
f
42.9863 122.427 mo
34.876 142.563 li
34.7256 142.563 li
42.834 122.427 li
42.9863 122.427 li
cp
.144531 .105469 .101563 0 cmyk
f
43.1367 122.427 mo
35.0234 142.563 li
34.876 142.563 li
42.9863 122.427 li
43.1367 122.427 li
cp
.148438 .109375 .105469 0 cmyk
f
43.2891 122.427 mo
35.1738 142.563 li
35.0234 142.563 li
43.1367 122.427 li
43.2891 122.427 li
cp
.152344 .113281 .105469 0 cmyk
f
43.4414 122.427 mo
35.3232 142.563 li
35.1738 142.563 li
43.2891 122.427 li
43.4414 122.427 li
cp
.15625 .109375 .113281 0 cmyk
f
43.5938 122.427 mo
35.4736 142.563 li
35.3232 142.563 li
43.4414 122.427 li
43.5938 122.427 li
cp
.15625 .113281 .117188 0 cmyk
f
43.7441 122.427 mo
35.624 142.563 li
35.4736 142.563 li
43.5938 122.427 li
43.7441 122.427 li
cp
.160156 .121094 .113281 0 cmyk
f
43.8965 122.427 mo
35.7715 142.563 li
35.624 142.563 li
43.7441 122.427 li
43.8965 122.427 li
cp
.164063 .121094 .117188 0 cmyk
f
44.0469 122.427 mo
35.9209 142.563 li
35.7715 142.563 li
43.8965 122.427 li
44.0469 122.427 li
cp
.167969 .125 .121094 0 cmyk
f
44.1992 122.427 mo
36.0713 142.563 li
35.9209 142.563 li
44.0469 122.427 li
44.1992 122.427 li
cp
.171875 .125 .125 0 cmyk
f
44.3516 122.427 mo
36.2217 142.563 li
36.0713 142.563 li
44.1992 122.427 li
44.3516 122.427 li
cp
.175781 .125 .128906 0 cmyk
f
44.502 122.427 mo
36.3691 142.563 li
36.2217 142.563 li
44.3516 122.427 li
44.502 122.427 li
cp
.175781 .132813 .125 0 cmyk
f
44.6543 122.427 mo
36.5195 142.563 li
36.3691 142.563 li
44.502 122.427 li
44.6543 122.427 li
cp
.179688 .136719 .128906 0 cmyk
f
44.8066 122.427 mo
36.6689 142.563 li
36.5195 142.563 li
44.6543 122.427 li
44.8066 122.427 li
cp
.1875 .140625 .132813 0 cmyk
f
44.9561 122.427 mo
36.8174 142.563 li
36.6689 142.563 li
44.8066 122.427 li
44.9561 122.427 li
cp
.191406 .136719 .140625 0 cmyk
f
45.1094 122.427 mo
36.9697 142.563 li
36.8174 142.563 li
44.9561 122.427 li
45.1094 122.427 li
cp
.195313 .144531 .140625 0 cmyk
f
45.2617 122.427 mo
37.1172 142.563 li
36.9697 142.563 li
45.1094 122.427 li
45.2617 122.427 li
cp
.203125 .148438 .144531 0 cmyk
f
45.4111 122.427 mo
37.2676 142.563 li
37.1172 142.563 li
45.2617 122.427 li
45.4111 122.427 li
cp
.207031 .15625 .152344 0 cmyk
f
45.5645 122.427 mo
37.417 142.563 li
37.2676 142.563 li
45.4111 122.427 li
45.5645 122.427 li
cp
.210938 .15625 .160156 0 cmyk
f
45.7168 122.427 mo
37.5654 142.563 li
37.417 142.563 li
45.5645 122.427 li
45.7168 122.427 li
cp
.214844 .160156 .15625 0 cmyk
f
45.8662 122.427 mo
37.7148 142.563 li
37.5654 142.563 li
45.7168 122.427 li
45.8662 122.427 li
cp
.21875 .164063 .160156 0 cmyk
f
46.0186 122.427 mo
37.8652 142.563 li
37.7148 142.563 li
45.8662 122.427 li
46.0186 122.427 li
cp
.222656 .164063 .164063 0 cmyk
f
46.1719 122.427 mo
38.0156 142.563 li
37.8652 142.563 li
46.0186 122.427 li
46.1719 122.427 li
cp
.226563 .167969 .164063 0 cmyk
f
46.3213 122.427 mo
38.165 142.563 li
38.0156 142.563 li
46.1719 122.427 li
46.3213 122.427 li
cp
.226563 .175781 .167969 0 cmyk
f
46.4736 122.427 mo
38.3135 142.563 li
38.165 142.563 li
46.3213 122.427 li
46.4736 122.427 li
cp
.230469 .171875 .167969 0 cmyk
f
46.626 122.427 mo
38.4629 142.563 li
38.3135 142.563 li
46.4736 122.427 li
46.626 122.427 li
cp
.234375 .175781 .171875 0 cmyk
f
46.7764 122.427 mo
38.6133 142.563 li
38.4629 142.563 li
46.626 122.427 li
46.7764 122.427 li
cp
.238281 .179688 .175781 0 cmyk
f
46.9287 122.427 mo
38.7627 142.563 li
38.6133 142.563 li
46.7764 122.427 li
46.9287 122.427 li
cp
.246094 .183594 .179688 0 cmyk
f
47.0811 122.427 mo
38.9111 142.563 li
38.7627 142.563 li
46.9287 122.427 li
47.0811 122.427 li
cp
.246094 .1875 .183594 0 cmyk
f
47.2314 122.427 mo
39.0615 142.563 li
38.9111 142.563 li
47.0811 122.427 li
47.2314 122.427 li
cp
.25 .1875 .183594 0 cmyk
f
47.3838 122.427 mo
39.2109 142.563 li
39.0615 142.563 li
47.2314 122.427 li
47.3838 122.427 li
cp
.253906 .191406 .1875 0 cmyk
f
47.5361 122.427 mo
39.3613 142.563 li
39.2109 142.563 li
47.3838 122.427 li
47.5361 122.427 li
cp
.257813 .195313 .191406 0 cmyk
f
47.6865 122.427 mo
39.5088 142.563 li
39.3613 142.563 li
47.5361 122.427 li
47.6865 122.427 li
cp
.261719 .199219 .195313 0 cmyk
f
47.8389 122.427 mo
39.6592 142.563 li
39.5088 142.563 li
47.6865 122.427 li
47.8389 122.427 li
cp
.269531 .203125 .199219 0 cmyk
f
47.9893 122.427 mo
39.8086 142.563 li
39.6592 142.563 li
47.8389 122.427 li
47.9893 122.427 li
cp
.265625 .207031 .195313 0 cmyk
f
48.1416 122.427 mo
39.957 142.563 li
39.8086 142.563 li
47.9893 122.427 li
48.1416 122.427 li
cp
.273438 .207031 .203125 0 cmyk
f
48.2939 122.427 mo
40.1064 142.563 li
39.957 142.563 li
48.1416 122.427 li
48.2939 122.427 li
cp
.277344 .210938 .207031 0 cmyk
f
48.4463 122.427 mo
40.2568 142.563 li
40.1064 142.563 li
48.2939 122.427 li
48.4463 122.427 li
cp
.28125 .214844 .210938 0 cmyk
f
48.5967 122.427 mo
40.4072 142.563 li
40.2568 142.563 li
48.4463 122.427 li
48.5967 122.427 li
cp
.285156 .21875 .214844 0 cmyk
f
48.749 122.427 mo
40.5566 142.563 li
40.4072 142.563 li
48.5967 122.427 li
48.749 122.427 li
cp
.289063 .222656 .210938 0 cmyk
f
48.8994 122.427 mo
40.707 142.563 li
40.5566 142.563 li
48.749 122.427 li
48.8994 122.427 li
cp
.289063 .21875 .21875 0 cmyk
f
49.0518 122.427 mo
40.8545 142.563 li
40.707 142.563 li
48.8994 122.427 li
49.0518 122.427 li
cp
.292969 .222656 .21875 0 cmyk
f
49.2041 122.427 mo
41.0049 142.563 li
40.8545 142.563 li
49.0518 122.427 li
49.2041 122.427 li
cp
.300781 .230469 .226563 0 cmyk
f
49.3535 122.427 mo
41.1553 142.563 li
41.0049 142.563 li
49.2041 122.427 li
49.3535 122.427 li
cp
.304688 .234375 .230469 0 cmyk
f
49.5068 122.427 mo
41.3027 142.563 li
41.1553 142.563 li
49.3535 122.427 li
49.5068 122.427 li
cp
.308594 .238281 .226563 0 cmyk
f
49.6592 122.427 mo
41.4521 142.563 li
41.3027 142.563 li
49.5068 122.427 li
49.6592 122.427 li
cp
.3125 .242188 .230469 0 cmyk
f
49.8115 122.427 mo
41.6025 142.563 li
41.4521 142.563 li
49.6592 122.427 li
49.8115 122.427 li
cp
.3125 .238281 .234375 0 cmyk
f
49.9609 122.427 mo
41.7529 142.563 li
41.6025 142.563 li
49.8115 122.427 li
49.9609 122.427 li
cp
.316406 .242188 .238281 0 cmyk
f
50.1143 122.427 mo
41.9033 142.563 li
41.7529 142.563 li
49.9609 122.427 li
50.1143 122.427 li
cp
.320313 .246094 .242188 0 cmyk
f
50.2637 122.427 mo
42.0508 142.563 li
41.9033 142.563 li
50.1143 122.427 li
50.2637 122.427 li
cp
.324219 .253906 .242188 0 cmyk
f
50.416 122.427 mo
42.2002 142.563 li
42.0508 142.563 li
50.2637 122.427 li
50.416 122.427 li
cp
.328125 .257813 .246094 0 cmyk
f
50.5684 122.427 mo
42.3506 142.563 li
42.2002 142.563 li
50.416 122.427 li
50.5684 122.427 li
cp
.332031 .257813 .253906 0 cmyk
f
50.7188 122.427 mo
42.501 142.563 li
42.3506 142.563 li
50.5684 122.427 li
50.7188 122.427 li
cp
.335938 .261719 .257813 0 cmyk
f
50.8711 122.427 mo
42.6484 142.563 li
42.501 142.563 li
50.7188 122.427 li
50.8711 122.427 li
cp
.339844 .265625 .261719 0 cmyk
f
51.0234 122.427 mo
42.7988 142.563 li
42.6484 142.563 li
50.8711 122.427 li
51.0234 122.427 li
cp
.34375 .269531 .257813 0 cmyk
f
51.1738 122.427 mo
42.9482 142.563 li
42.7988 142.563 li
51.0234 122.427 li
51.1738 122.427 li
cp
.351563 .273438 .261719 0 cmyk
f
51.3262 122.427 mo
43.0986 142.563 li
42.9482 142.563 li
51.1738 122.427 li
51.3262 122.427 li
cp
.355469 .269531 .269531 0 cmyk
f
51.4785 122.427 mo
43.2461 142.563 li
43.0986 142.563 li
51.3262 122.427 li
51.4785 122.427 li
cp
.355469 .277344 .273438 0 cmyk
f
51.6289 122.427 mo
43.3965 142.563 li
43.2461 142.563 li
51.4785 122.427 li
51.6289 122.427 li
cp
.359375 .28125 .269531 0 cmyk
f
51.7813 122.427 mo
43.5459 142.563 li
43.3965 142.563 li
51.6289 122.427 li
51.7813 122.427 li
cp
.367188 .285156 .273438 0 cmyk
f
51.9316 122.427 mo
43.6963 142.563 li
43.5459 142.563 li
51.7813 122.427 li
51.9316 122.427 li
cp
.371094 .292969 .28125 0 cmyk
f
52.084 122.427 mo
43.8447 142.563 li
43.6963 142.563 li
51.9316 122.427 li
52.084 122.427 li
cp
.378906 .289063 .289063 0 cmyk
f
52.2363 122.427 mo
43.9941 142.563 li
43.8447 142.563 li
52.084 122.427 li
52.2363 122.427 li
cp
.378906 .296875 .292969 0 cmyk
f
52.3857 122.427 mo
44.1445 142.563 li
43.9941 142.563 li
52.2363 122.427 li
52.3857 122.427 li
cp
.382813 .300781 .289063 0 cmyk
f
52.5391 122.427 mo
44.2939 142.563 li
44.1445 142.563 li
52.3857 122.427 li
52.5391 122.427 li
cp
.386719 .304688 .292969 .00390601 cmyk
f
52.6914 122.427 mo
44.4443 142.563 li
44.2939 142.563 li
52.5391 122.427 li
52.6914 122.427 li
cp
.390625 .308594 .296875 .00390601 cmyk
f
52.8438 122.427 mo
44.5947 142.563 li
44.4443 142.563 li
52.6914 122.427 li
52.8438 122.427 li
cp
.390625 .308594 .304688 .00390601 cmyk
f
52.9932 122.427 mo
44.7422 142.563 li
44.5947 142.563 li
52.8438 122.427 li
52.9932 122.427 li
cp
.394531 .3125 .308594 .00390601 cmyk
f
53.1465 122.427 mo
44.8926 142.563 li
44.7422 142.563 li
52.9932 122.427 li
53.1465 122.427 li
cp
.402344 .316406 .304688 .00390601 cmyk
f
53.2959 122.427 mo
45.042 142.563 li
44.8926 142.563 li
53.1465 122.427 li
53.2959 122.427 li
cp
.40625 .320313 .308594 .00390601 cmyk
f
53.4482 122.427 mo
45.1924 142.563 li
45.042 142.563 li
53.2959 122.427 li
53.4482 122.427 li
cp
.410156 .316406 .316406 .00390601 cmyk
f
53.6006 122.427 mo
45.3398 142.563 li
45.1924 142.563 li
53.4482 122.427 li
53.6006 122.427 li
cp
.410156 .324219 .316406 .00390601 cmyk
f
53.7539 122.427 mo
45.4902 142.563 li
45.3398 142.563 li
53.6006 122.427 li
53.7539 122.427 li
cp
.414063 .328125 .3125 .00390601 cmyk
f
53.9033 122.427 mo
45.6406 142.563 li
45.4902 142.563 li
53.7539 122.427 li
53.9033 122.427 li
cp
.417969 .332031 .320313 .00390601 cmyk
f
54.0557 122.427 mo
45.7881 142.563 li
45.6406 142.563 li
53.9033 122.427 li
54.0557 122.427 li
cp
.421875 .335938 .320313 .00781298 cmyk
f
54.2061 122.427 mo
45.9385 142.563 li
45.7881 142.563 li
54.0557 122.427 li
54.2061 122.427 li
cp
.421875 .332031 .328125 .00781298 cmyk
f
54.3584 122.427 mo
46.0879 142.563 li
45.9385 142.563 li
54.2061 122.427 li
54.3584 122.427 li
cp
.425781 .335938 .332031 .00781298 cmyk
f
54.5107 122.427 mo
46.2383 142.563 li
46.0879 142.563 li
54.3584 122.427 li
54.5107 122.427 li
cp
.429688 .339844 .328125 .00781298 cmyk
f
54.6611 122.427 mo
46.3857 142.563 li
46.2383 142.563 li
54.5107 122.427 li
54.6611 122.427 li
cp
.433594 .34375 .332031 .00781298 cmyk
f
54.8135 122.427 mo
46.5361 142.563 li
46.3857 142.563 li
54.6611 122.427 li
54.8135 122.427 li
cp
.4375 .34375 .339844 .00781298 cmyk
f
54.9658 122.427 mo
46.6865 142.563 li
46.5361 142.563 li
54.8135 122.427 li
54.9658 122.427 li
cp
.4375 .347656 .34375 .00781298 cmyk
f
55.1162 122.427 mo
46.8359 142.563 li
46.6865 142.563 li
54.9658 122.427 li
55.1162 122.427 li
cp
.441406 .351563 .339844 .00781298 cmyk
f
55.2686 122.427 mo
46.9863 142.563 li
46.8359 142.563 li
55.1162 122.427 li
55.2686 122.427 li
cp
.445313 .355469 .34375 .011719 cmyk
f
55.4209 122.427 mo
47.1338 142.563 li
46.9863 142.563 li
55.2686 122.427 li
55.4209 122.427 li
cp
.449219 .359375 .347656 .011719 cmyk
f
55.5713 122.427 mo
47.2842 142.563 li
47.1338 142.563 li
55.4209 122.427 li
55.5713 122.427 li
cp
.449219 .359375 .355469 .015625 cmyk
f
55.7236 122.427 mo
47.4336 142.563 li
47.2842 142.563 li
55.5713 122.427 li
55.7236 122.427 li
cp
.453125 .363281 .351563 .015625 cmyk
f
55.876 122.427 mo
47.584 142.563 li
47.4336 142.563 li
55.7236 122.427 li
55.876 122.427 li
cp
.457031 .367188 .351563 .015625 cmyk
f
56.0264 122.427 mo
47.7314 142.563 li
47.584 142.563 li
55.876 122.427 li
56.0264 122.427 li
cp
.460938 .371094 .355469 .019531 cmyk
f
56.1787 122.427 mo
47.8818 142.563 li
47.7314 142.563 li
56.0264 122.427 li
56.1787 122.427 li
cp
.460938 .367188 .363281 .019531 cmyk
f
56.3311 122.427 mo
48.0322 142.563 li
47.8818 142.563 li
56.1787 122.427 li
56.3311 122.427 li
cp
.464844 .371094 .359375 .019531 cmyk
f
56.4814 122.427 mo
48.1797 142.563 li
48.0322 142.563 li
56.3311 122.427 li
56.4814 122.427 li
cp
.46875 .375 .363281 .019531 cmyk
f
56.6338 122.427 mo
48.332 142.563 li
48.1797 142.563 li
56.4814 122.427 li
56.6338 122.427 li
cp
.472656 .378906 .367188 .023438 cmyk
f
56.7861 122.427 mo
48.4795 142.563 li
48.332 142.563 li
56.6338 122.427 li
56.7861 122.427 li
cp
.472656 .378906 .371094 .023438 cmyk
f
56.9365 122.427 mo
48.6299 142.563 li
48.4795 142.563 li
56.7861 122.427 li
56.9365 122.427 li
cp
.476563 .382813 .367188 .023438 cmyk
f
57.0889 122.427 mo
48.7803 142.563 li
48.6299 142.563 li
56.9365 122.427 li
57.0889 122.427 li
cp
.480469 .386719 .371094 .027344 cmyk
f
57.2383 122.427 mo
48.9297 142.563 li
48.7803 142.563 li
57.0889 122.427 li
57.2383 122.427 li
cp
.484375 .390625 .375 .03125 cmyk
f
57.3906 122.427 mo
49.0771 142.563 li
48.9297 142.563 li
57.2383 122.427 li
57.3906 122.427 li
cp
f
57.5439 122.427 mo
49.2275 142.563 li
49.0771 142.563 li
57.3906 122.427 li
57.5439 122.427 li
cp
.484375 .390625 .382813 .03125 cmyk
f
57.6934 122.427 mo
49.3779 142.563 li
49.2275 142.563 li
57.5439 122.427 li
57.6934 122.427 li
cp
.488281 .394531 .386719 .035156 cmyk
f
49.3779 142.563 mo
57.6934 122.427 li
49.3779 142.563 li
cp
f
grestore
39.916 129.232 mo
34.6992 142.188 li
28.9063 142.188 li
36.6689 122.711 li
41.0742 122.711 li
46.4287 134.754 li
51.3525 122.711 li
57.2246 122.711 li
49.1846 142.188 li
45.0635 142.188 li
39.916 129.232 li
cp
0 0 0 0 cmyk
f
60.7783 133.387 mo
60.4355 132.732 59.7275 132.332 58.6563 132.184 cv
59.8018 132.048 60.7852 131.7 61.6045 131.139 cv
62.3525 130.626 62.9219 129.954 63.3125 129.13 cv
54.668 128.906 li
13.8828 132.494 li
48.5586 135.803 li
51.7217 136.041 li
56.3262 136.041 li
60.5898 136.041 li
60.6328 135.938 li
61.0732 134.89 61.1211 134.04 60.7783 133.387 cv
cp
1 1 .15 1 cmyk
f
gsave
44.7705 142.518 mo
39.8711 130.171 li
34.8975 142.518 li
28.4463 142.518 li
36.4668 122.382 li
41.3623 122.382 li
46.4668 133.852 li
51.1523 122.382 li
57.6963 122.382 li
49.3779 142.518 li
44.7705 142.518 li
cp
clp
grestore
178.877 98.793 mo
180.027 98.793 180.283 97.584 180.283 96.4492 cv
180.283 90.8242 li
180.283 89.6309 180.078 88.4805 178.877 88.4805 cv
177.676 88.4805 177.471 89.6309 177.471 90.8242 cv
177.471 96.4492 li
177.471 97.584 177.742 98.793 178.877 98.793 cv
cp
178.877 100.331 mo
176.68 100.331 175.596 98.7051 175.596 96.4492 cv
175.596 90.8242 li
175.596 88.502 176.615 86.9424 178.877 86.9424 cv
181.127 86.9424 182.158 88.5098 182.158 90.8242 cv
182.158 96.4492 li
182.158 98.7197 181.09 100.331 178.877 100.331 cv
cp
0 0 0 1 cmyk
f
187.221 89.418 mo
185.346 95.0576 li
187.221 95.0576 li
187.221 89.418 li
cp
183.471 96.8301 mo
183.471 94.7422 li
186.752 87.0664 li
189.096 87.0664 li
189.096 95.0576 li
190.545 95.0576 li
190.545 96.8301 li
189.096 96.8301 li
189.096 100.199 li
187.221 100.199 li
187.221 96.8301 li
183.471 96.8301 li
cp
f
194.633 88.4805 mo
193.512 88.4805 193.227 89.6816 193.227 90.8242 cv
193.227 91.293 li
191.352 91.293 li
191.352 90.8242 li
191.352 88.4727 192.281 86.9424 194.633 86.9424 cv
196.793 86.9424 197.914 88.2246 197.914 90.3555 cv
197.914 92.0547 197.232 93.0723 196.508 94.1055 cv
193.227 98.3242 li
197.914 98.3242 li
197.914 100.199 li
191.344 100.199 li
191.344 98.3242 li
194.633 93.6367 li
195.328 92.6484 196.039 91.8203 196.039 90.3555 cv
196.039 89.3887 195.6 88.4805 194.633 88.4805 cv
cp
f
202.053 88.4805 mo
201.086 88.4805 200.865 89.3887 200.865 90.3555 cv
200.865 91.3809 201.02 92.4141 202.053 92.4141 cv
203.078 92.4141 203.225 91.3809 203.225 90.3555 cv
203.225 89.4033 203.004 88.4805 202.053 88.4805 cv
cp
202.053 98.793 mo
203.313 98.793 203.451 97.6943 203.451 96.457 cv
203.451 95.3145 203.209 94.208 202.053 94.208 cv
200.887 94.208 200.639 95.3066 200.639 96.457 cv
200.639 97.709 200.785 98.793 202.053 98.793 cv
cp
200.184 93.2705 mo
199.357 92.6484 198.953 91.7764 198.953 90.3555 cv
198.953 88.2461 199.943 86.9424 202.053 86.9424 cv
204.154 86.9424 205.135 88.2539 205.135 90.3555 cv
205.135 91.7764 204.74 92.6484 203.912 93.2705 cv
204.879 93.9082 205.326 94.8164 205.326 96.457 cv
205.326 98.8438 204.439 100.331 202.053 100.331 cv
199.656 100.331 198.764 98.8438 198.764 96.457 cv
198.764 94.8086 199.195 93.9004 200.184 93.2705 cv
cp
f
208.139 87.0742 mo
209.545 87.0742 li
209.545 100.199 li
207.67 100.199 li
207.67 89.8867 li
206.264 89.8867 li
206.264 88.4805 li
207.039 88.2021 207.771 87.7852 208.139 87.0742 cv
cp
f
214.334 86.9424 mo
216.496 86.9424 217.615 88.2246 217.615 90.3555 cv
217.615 91.8789 216.877 92.8164 215.74 93.168 cv
216.971 93.5781 217.615 94.7422 217.615 96.4492 cv
217.615 98.8008 216.686 100.331 214.334 100.331 cv
212.174 100.331 211.053 99.0488 211.053 96.918 cv
211.053 96.4492 li
212.928 96.4492 li
212.928 97.7529 213.074 98.793 214.334 98.793 cv
215.594 98.793 215.74 97.7529 215.74 96.4492 cv
215.74 95.043 215.271 94.1055 213.865 94.1055 cv
213.865 92.2305 li
215.236 92.2305 215.74 91.7324 215.74 90.3555 cv
215.74 89.2129 215.455 88.4805 214.334 88.4805 cv
213.074 88.4805 212.928 89.5205 212.928 90.8242 cv
211.053 90.8242 li
211.053 90.3555 li
211.053 88.2314 212.189 86.9424 214.334 86.9424 cv
cp
f
220.348 87.0742 mo
221.754 87.0742 li
221.754 100.199 li
219.879 100.199 li
219.879 89.8867 li
218.473 89.8867 li
218.473 88.4805 li
219.248 88.2021 219.98 87.7852 220.348 87.0742 cv
cp
f
226.543 86.9424 mo
228.705 86.9424 229.824 88.2246 229.824 90.3555 cv
229.824 91.8789 229.086 92.8164 227.949 93.168 cv
229.18 93.5781 229.824 94.7422 229.824 96.4492 cv
229.824 98.8008 228.895 100.331 226.543 100.331 cv
224.383 100.331 223.262 99.0488 223.262 96.918 cv
223.262 96.4492 li
225.137 96.4492 li
225.137 97.7529 225.283 98.793 226.543 98.793 cv
227.803 98.793 227.949 97.7529 227.949 96.4492 cv
227.949 95.043 227.48 94.1055 226.074 94.1055 cv
226.074 92.2305 li
227.445 92.2305 227.949 91.7324 227.949 90.3555 cv
227.949 89.2129 227.664 88.4805 226.543 88.4805 cv
225.283 88.4805 225.137 89.5205 225.137 90.8242 cv
223.262 90.8242 li
223.262 90.3555 li
223.262 88.2314 224.398 86.9424 226.543 86.9424 cv
cp
f
234.021 88.4805 mo
232.9 88.4805 232.615 89.6816 232.615 90.8242 cv
232.615 91.293 li
230.74 91.293 li
230.74 90.8242 li
230.74 88.4727 231.67 86.9424 234.021 86.9424 cv
236.182 86.9424 237.303 88.2246 237.303 90.3555 cv
237.303 92.0547 236.621 93.0723 235.896 94.1055 cv
232.615 98.3242 li
237.303 98.3242 li
237.303 100.199 li
230.732 100.199 li
230.732 98.3242 li
234.021 93.6367 li
234.717 92.6484 235.428 91.8203 235.428 90.3555 cv
235.428 89.3887 234.988 88.4805 234.021 88.4805 cv
cp
f
241.668 98.793 mo
242.818 98.793 243.074 97.584 243.074 96.4492 cv
243.074 90.8242 li
243.074 89.6309 242.869 88.4805 241.668 88.4805 cv
240.467 88.4805 240.262 89.6309 240.262 90.8242 cv
240.262 96.4492 li
240.262 97.584 240.533 98.793 241.668 98.793 cv
cp
241.668 100.331 mo
239.471 100.331 238.387 98.7051 238.387 96.4492 cv
238.387 90.8242 li
238.387 88.502 239.404 86.9424 241.668 86.9424 cv
243.916 86.9424 244.949 88.5098 244.949 90.8242 cv
244.949 96.4492 li
244.949 98.7197 243.879 100.331 241.668 100.331 cv
cp
f
173.328 108.056 mo
173.881 108.056 174.227 108.519 174.227 109.065 cv
174.227 114.394 li
172.977 114.394 li
172.977 109.706 li
172.977 109.31 172.914 109.081 172.508 109.081 cv
172.156 109.081 171.932 109.276 171.727 109.446 cv
171.727 114.394 li
170.477 114.394 li
170.477 108.144 li
171.727 108.144 li
171.727 108.817 li
172.166 108.417 172.582 108.056 173.328 108.056 cv
cp
f
178.139 110.374 mo
178.139 109.735 178.074 109.081 177.508 109.081 cv
177.162 109.081 176.801 109.192 176.57 109.329 cv
176.57 113.261 li
176.85 113.372 177.186 113.456 177.508 113.456 cv
178.07 113.456 178.143 112.548 178.143 111.728 cv
178.143 111.444 178.133 111.171 178.133 110.95 cv
178.133 110.774 178.139 110.575 178.139 110.374 cv
cp
177.82 114.481 mo
177.25 114.481 176.859 114.124 176.57 113.827 cv
176.57 114.394 li
175.32 114.394 li
175.32 105.647 li
176.57 105.647 li
176.57 108.763 li
176.908 108.407 177.225 108.056 177.84 108.056 cv
179.369 108.056 179.383 109.882 179.383 111.493 cv
179.383 111.575 li
179.383 112.845 179.07 114.481 177.82 114.481 cv
cp
f
181.541 110.331 mo
181.541 112.206 li
181.541 112.831 181.541 113.456 182.166 113.456 cv
182.791 113.456 182.791 112.831 182.791 112.206 cv
182.791 110.331 li
182.791 109.706 182.791 109.081 182.166 109.081 cv
181.541 109.081 181.541 109.706 181.541 110.331 cv
cp
180.291 112.206 mo
180.291 110.331 li
180.291 108.944 180.76 108.056 182.166 108.056 cv
183.572 108.056 184.041 108.944 184.041 110.331 cv
184.041 112.206 li
184.041 113.593 183.572 114.481 182.166 114.481 cv
180.76 114.481 180.291 113.593 180.291 112.206 cv
cp
f
186.736 114.481 mo
185.73 114.481 185.33 113.954 185.32 112.968 cv
185.32 109.081 li
184.695 109.081 li
184.695 108.144 li
185.32 108.144 li
185.32 105.956 li
186.57 105.956 li
186.57 108.144 li
187.508 108.144 li
187.508 109.081 li
186.57 109.081 li
186.57 112.728 li
186.57 113.173 186.639 113.456 187.088 113.456 cv
187.205 113.456 187.396 113.427 187.508 113.407 cv
187.508 114.423 li
187.195 114.462 187.039 114.481 186.736 114.481 cv
cp
f
191.131 108.056 mo
191.684 108.056 192.029 108.519 192.029 109.065 cv
192.029 114.394 li
190.779 114.394 li
190.779 109.706 li
190.779 109.329 190.736 109.081 190.35 109.081 cv
189.998 109.081 189.734 109.276 189.529 109.446 cv
189.529 114.394 li
188.279 114.394 li
188.279 105.644 li
189.529 105.644 li
189.529 108.817 li
189.969 108.417 190.385 108.056 191.131 108.056 cv
cp
f
194.881 109.081 mo
194.236 109.081 194.256 109.999 194.256 110.644 cv
195.506 110.644 li
195.506 109.993 195.521 109.081 194.881 109.081 cv
cp
194.881 113.456 mo
195.512 113.456 195.512 112.835 195.512 112.206 cv
196.756 112.206 li
196.756 113.646 196.238 114.481 194.877 114.481 cv
193.172 114.481 193.006 112.894 193.006 111.122 cv
193.006 109.427 193.25 108.056 194.881 108.056 cv
196.512 108.056 196.756 109.427 196.756 111.122 cv
196.756 111.269 li
194.256 111.269 li
194.256 111.581 li
194.256 112.304 194.178 113.456 194.881 113.456 cv
cp
f
201.674 111.747 mo
201.674 109.778 li
201.654 109.642 201.586 109.53 201.41 109.53 cv
200.736 109.53 200.746 110.325 200.746 111.009 cv
200.746 111.487 200.863 111.942 201.313 111.942 cv
201.521 111.942 201.654 111.894 201.674 111.747 cv
cp
203.275 112.968 mo
202.641 112.968 202.162 112.728 201.932 112.343 cv
201.795 112.649 201.541 112.968 201.098 112.968 cv
200.027 112.968 199.496 112.063 199.496 111.009 cv
199.496 109.817 199.852 108.548 200.98 108.548 cv
201.42 108.548 201.654 108.812 201.674 109.212 cv
201.674 108.593 li
202.924 108.593 li
202.924 111.366 li
202.924 111.673 202.943 111.942 203.256 111.942 cv
203.748 111.942 203.822 111.175 203.822 110.644 cv
203.822 108.778 203.201 107.655 201.371 107.655 cv
199.652 107.655 198.871 108.896 198.871 110.644 cv
198.871 112.802 199.545 114.081 201.674 114.081 cv
202.176 114.081 202.723 113.938 203.119 113.812 cv
203.578 114.769 li
203.002 114.901 202.367 115.019 201.674 115.019 cv
198.803 115.019 197.621 113.538 197.621 110.644 cv
197.621 108.245 198.992 106.718 201.371 106.718 cv
203.816 106.718 205.072 108.196 205.072 110.644 cv
205.072 111.937 204.52 112.968 203.275 112.968 cv
cp
f
207.973 108.925 mo
207.328 108.925 207.191 109.687 207.191 110.331 cv
207.191 110.97 207.338 111.659 207.973 111.659 cv
208.611 111.659 208.754 110.97 208.754 110.331 cv
208.754 109.687 208.607 108.925 207.973 108.925 cv
cp
209.379 114.876 mo
209.379 114.823 209.373 114.769 209.359 114.716 cv
209.314 114.472 208.988 114.31 208.377 114.237 cv
207.348 114.114 li
207.113 114.286 206.889 114.657 206.889 115.052 cv
206.889 115.423 207.898 115.341 208.285 115.341 cv
208.729 115.341 209.379 115.312 209.379 114.876 cv
cp
207.973 108.056 mo
208.689 108.056 209.031 108.349 209.32 108.792 cv
209.525 108.411 209.881 108.056 210.473 108.056 cv
210.473 109.081 li
210.115 109.081 209.867 109.218 209.691 109.394 cv
209.773 109.638 209.848 109.964 209.848 110.331 cv
209.848 111.61 209.246 112.597 207.973 112.597 cv
207.836 112.597 207.699 112.581 207.576 112.562 cv
207.342 112.522 li
207.283 112.63 207.172 112.772 207.172 112.923 cv
207.172 113.378 208.377 113.329 208.822 113.388 cv
209.662 113.499 210.473 113.753 210.473 114.706 cv
210.473 115.872 209.432 116.263 208.285 116.263 cv
207.352 116.263 205.785 116.253 205.785 115.345 cv
205.785 114.642 206.234 114.202 206.723 113.958 cv
206.434 113.88 206.098 113.704 206.098 113.411 cv
206.098 112.942 206.502 112.483 206.723 112.206 cv
206.336 111.747 206.098 111.112 206.098 110.331 cv
206.098 109.052 206.732 108.056 207.973 108.056 cv
cp
f
214.744 109.501 mo
214.744 114.394 li
213.494 114.394 li
213.494 109.856 li
213.494 109.501 213.529 109.081 213.182 109.081 cv
212.781 109.081 212.469 109.29 212.244 109.476 cv
212.244 114.394 li
210.994 114.394 li
210.994 108.144 li
212.244 108.144 li
212.244 108.851 li
212.582 108.45 213.064 108.056 213.803 108.056 cv
214.422 108.056 214.652 108.333 214.744 108.88 cv
215.111 108.401 215.531 108.056 216.307 108.056 cv
217.27 108.056 217.244 108.886 217.244 109.847 cv
217.244 114.394 li
215.994 114.394 li
215.994 109.833 li
215.994 109.485 216.023 109.081 215.682 109.081 cv
215.271 109.081 214.975 109.315 214.744 109.501 cv
cp
f
219.285 112.679 mo
219.285 113.147 219.461 113.456 219.91 113.456 cv
220.213 113.456 220.404 113.173 220.535 112.997 cv
220.535 111.269 li
220.043 111.601 219.285 111.923 219.285 112.679 cv
cp
221.785 110.019 mo
221.785 112.831 li
221.785 113.47 221.824 113.948 221.947 114.394 cv
220.701 114.394 li
220.535 113.456 li
220.287 113.948 220.008 114.481 219.285 114.481 cv
218.563 114.481 218.035 113.739 218.035 113.011 cv
218.035 111.386 219.33 110.94 220.535 110.468 cv
220.535 110.019 li
220.535 109.466 220.434 109.022 219.91 109.022 cv
219.398 109.022 219.285 109.472 219.285 110.019 cv
218.035 110.019 li
218.051 108.837 218.725 108.056 219.91 108.056 cv
221.098 108.056 221.785 108.856 221.785 110.019 cv
cp
f
224.145 108.144 mo
224.145 114.394 li
222.895 114.394 li
222.895 108.144 li
224.145 108.144 li
cp
224.145 105.956 mo
224.145 107.206 li
222.895 107.206 li
222.895 105.956 li
224.145 105.956 li
cp
f
225.365 114.394 mo
225.365 105.644 li
226.615 105.644 li
226.615 114.394 li
225.365 114.394 li
cp
f
228.758 113.144 mo
228.758 114.394 li
227.508 114.394 li
227.508 113.144 li
228.758 113.144 li
cp
f
231.4 113.456 mo
232.025 113.456 232.025 112.831 232.025 112.206 cv
233.275 112.206 li
233.275 113.577 232.791 114.481 231.4 114.481 cv
229.705 114.481 229.525 112.958 229.525 111.269 cv
229.525 109.579 229.705 108.056 231.4 108.056 cv
232.83 108.056 233.275 108.909 233.275 110.331 cv
232.025 110.331 li
232.025 109.745 231.977 109.026 231.4 109.026 cv
230.648 109.026 230.775 110.478 230.775 111.269 cv
230.775 112.054 230.633 113.456 231.4 113.456 cv
cp
f
235.174 110.331 mo
235.174 112.206 li
235.174 112.831 235.174 113.456 235.799 113.456 cv
236.424 113.456 236.424 112.831 236.424 112.206 cv
236.424 110.331 li
236.424 109.706 236.424 109.081 235.799 109.081 cv
235.174 109.081 235.174 109.706 235.174 110.331 cv
cp
233.924 112.206 mo
233.924 110.331 li
233.924 108.944 234.393 108.056 235.799 108.056 cv
237.205 108.056 237.674 108.944 237.674 110.331 cv
237.674 112.206 li
237.674 113.593 237.205 114.481 235.799 114.481 cv
234.393 114.481 233.924 113.593 233.924 112.206 cv
cp
f
242.449 109.501 mo
242.449 114.394 li
241.199 114.394 li
241.199 109.856 li
241.199 109.501 241.234 109.081 240.887 109.081 cv
240.486 109.081 240.174 109.29 239.949 109.476 cv
239.949 114.394 li
238.699 114.394 li
238.699 108.144 li
239.949 108.144 li
239.949 108.851 li
240.287 108.45 240.77 108.056 241.508 108.056 cv
242.127 108.056 242.357 108.333 242.449 108.88 cv
242.816 108.401 243.236 108.056 244.012 108.056 cv
244.975 108.056 244.949 108.886 244.949 109.847 cv
244.949 114.394 li
243.699 114.394 li
243.699 109.833 li
243.699 109.485 243.729 109.081 243.387 109.081 cv
242.977 109.081 242.68 109.315 242.449 109.501 cv
cp
f
179.539 133.467 mo
178.338 133.467 li
177.18 127.217 li
178.289 127.217 li
178.982 131.963 li
179.637 127.217 li
180.779 127.217 li
181.443 131.914 li
182.127 127.217 li
183.24 127.217 li
182.029 133.467 li
180.877 133.467 li
180.213 129.16 li
179.539 133.467 li
cp
1 0 0 0 cmyk
f
185.734 133.467 mo
184.533 133.467 li
183.377 127.217 li
184.484 127.217 li
185.178 131.963 li
185.832 127.217 li
186.975 127.217 li
187.639 131.914 li
188.322 127.217 li
189.436 127.217 li
188.225 133.467 li
187.072 133.467 li
186.408 129.16 li
185.734 133.467 li
cp
f
191.932 133.467 mo
190.73 133.467 li
189.572 127.217 li
190.682 127.217 li
191.375 131.963 li
192.029 127.217 li
193.172 127.217 li
193.836 131.914 li
194.52 127.217 li
195.633 127.217 li
194.422 133.467 li
193.27 133.467 li
192.605 129.16 li
191.932 133.467 li
cp
f
196.971 132.217 mo
196.971 133.467 li
195.721 133.467 li
195.721 132.217 li
196.971 132.217 li
cp
f
200.672 129.448 mo
200.672 128.809 200.607 128.154 200.041 128.154 cv
199.695 128.154 199.334 128.267 199.104 128.403 cv
199.104 132.334 li
199.383 132.446 199.719 132.529 200.041 132.529 cv
200.604 132.529 200.676 131.621 200.676 130.801 cv
200.676 130.518 200.666 130.244 200.666 130.024 cv
200.666 129.849 200.672 129.648 200.672 129.448 cv
cp
200.354 133.555 mo
199.783 133.555 199.393 133.198 199.104 132.9 cv
199.104 133.467 li
197.854 133.467 li
197.854 124.722 li
199.104 124.722 li
199.104 127.837 li
199.441 127.48 199.758 127.129 200.373 127.129 cv
201.902 127.129 201.916 128.955 201.916 130.566 cv
201.916 130.649 li
201.916 131.919 201.604 133.555 200.354 133.555 cv
cp
f
203.445 133.184 mo
202.029 127.217 li
203.279 127.217 li
203.543 128.677 203.816 130.122 204.064 131.592 cv
204.299 130.107 204.582 128.677 204.842 127.217 cv
206.092 127.217 li
204.529 133.779 li
204.305 134.751 203.543 135.029 202.342 135.029 cv
202.342 134.092 li
202.986 134.092 203.445 133.818 203.445 133.184 cv
cp
f
209.514 127.129 mo
210.066 127.129 210.412 127.593 210.412 128.14 cv
210.412 133.467 li
209.162 133.467 li
209.162 128.779 li
209.162 128.384 209.1 128.154 208.693 128.154 cv
208.342 128.154 208.117 128.35 207.912 128.521 cv
207.912 133.467 li
206.662 133.467 li
206.662 127.217 li
207.912 127.217 li
207.912 127.891 li
208.352 127.49 208.768 127.129 209.514 127.129 cv
cp
f
214.324 129.448 mo
214.324 128.809 214.26 128.154 213.693 128.154 cv
213.348 128.154 212.986 128.267 212.756 128.403 cv
212.756 132.334 li
213.035 132.446 213.371 132.529 213.693 132.529 cv
214.256 132.529 214.328 131.621 214.328 130.801 cv
214.328 130.518 214.318 130.244 214.318 130.024 cv
214.318 129.849 214.324 129.648 214.324 129.448 cv
cp
214.006 133.555 mo
213.436 133.555 213.045 133.198 212.756 132.9 cv
212.756 133.467 li
211.506 133.467 li
211.506 124.722 li
212.756 124.722 li
212.756 127.837 li
213.094 127.48 213.41 127.129 214.025 127.129 cv
215.555 127.129 215.568 128.955 215.568 130.566 cv
215.568 130.649 li
215.568 131.919 215.256 133.555 214.006 133.555 cv
cp
f
217.586 132.217 mo
217.586 133.467 li
216.336 133.467 li
216.336 132.217 li
217.586 132.217 li
cp
f
220.227 132.529 mo
220.852 132.529 220.852 131.904 220.852 131.279 cv
222.102 131.279 li
222.102 132.651 221.619 133.555 220.227 133.555 cv
218.533 133.555 218.352 132.031 218.352 130.342 cv
218.352 128.652 218.533 127.129 220.227 127.129 cv
221.658 127.129 222.102 127.983 222.102 129.404 cv
220.852 129.404 li
220.852 128.818 220.803 128.101 220.227 128.101 cv
219.475 128.101 219.602 129.551 219.602 130.342 cv
219.602 131.128 219.461 132.529 220.227 132.529 cv
cp
f
224.002 129.404 mo
224.002 131.279 li
224.002 131.904 224.002 132.529 224.627 132.529 cv
225.252 132.529 225.252 131.904 225.252 131.279 cv
225.252 129.404 li
225.252 128.779 225.252 128.154 224.627 128.154 cv
224.002 128.154 224.002 128.779 224.002 129.404 cv
cp
222.752 131.279 mo
222.752 129.404 li
222.752 128.018 223.221 127.129 224.627 127.129 cv
226.033 127.129 226.502 128.018 226.502 129.404 cv
226.502 131.279 li
226.502 132.666 226.033 133.555 224.627 133.555 cv
223.221 133.555 222.752 132.666 222.752 131.279 cv
cp
f
231.277 128.574 mo
231.277 133.467 li
230.027 133.467 li
230.027 128.931 li
230.027 128.574 230.061 128.154 229.715 128.154 cv
229.314 128.154 229.002 128.364 228.777 128.55 cv
228.777 133.467 li
227.527 133.467 li
227.527 127.217 li
228.777 127.217 li
228.777 127.925 li
229.113 127.524 229.598 127.129 230.334 127.129 cv
230.955 127.129 231.184 127.407 231.277 127.954 cv
231.643 127.476 232.063 127.129 232.84 127.129 cv
233.801 127.129 233.777 127.959 233.777 128.921 cv
233.777 133.467 li
232.527 133.467 li
232.527 128.906 li
232.527 128.56 232.557 128.154 232.215 128.154 cv
231.805 128.154 231.506 128.389 231.277 128.574 cv
cp
f
235.861 132.217 mo
235.861 133.467 li
234.611 133.467 li
234.611 132.217 li
235.861 132.217 li
cp
f
237.693 131.753 mo
237.693 132.222 237.869 132.529 238.318 132.529 cv
238.621 132.529 238.811 132.246 238.943 132.07 cv
238.943 130.342 li
238.449 130.674 237.693 130.996 237.693 131.753 cv
cp
240.193 129.092 mo
240.193 131.904 li
240.193 132.544 240.232 133.022 240.354 133.467 cv
239.109 133.467 li
238.943 132.529 li
238.693 133.022 238.416 133.555 237.693 133.555 cv
236.971 133.555 236.443 132.813 236.443 132.085 cv
236.443 130.459 237.736 130.015 238.943 129.541 cv
238.943 129.092 li
238.943 128.54 238.84 128.096 238.318 128.096 cv
237.805 128.096 237.693 128.545 237.693 129.092 cv
236.443 129.092 li
236.457 127.91 237.131 127.129 238.318 127.129 cv
239.504 127.129 240.193 127.93 240.193 129.092 cv
cp
f
242.107 133.555 mo
241.551 133.555 241.199 133.101 241.199 132.544 cv
241.199 127.217 li
242.449 127.217 li
242.449 132.163 li
242.449 132.422 242.625 132.603 242.879 132.603 cv
243.244 132.603 243.488 132.334 243.699 132.163 cv
243.699 127.217 li
244.949 127.217 li
244.949 133.467 li
243.699 133.467 li
243.699 132.793 li
243.254 133.188 242.854 133.555 242.107 133.555 cv
cp
f
76.832 39.2266 mo
74.8789 39.2266 li
74.8789 59.4561 li
76.9043 59.4561 li
80.7969 59.4561 80.584 56.8125 80.584 53.0195 cv
80.584 44.7441 li
80.584 41.2246 80.4824 39.2266 76.832 39.2266 cv
cp
76.875 62.2148 mo
71.2012 62.2148 li
71.2012 36.4688 li
76.9043 36.4688 li
82.293 36.4688 84.2617 38.4229 84.2617 43.8242 cv
84.2617 53.9395 li
84.2617 59.4121 82.3652 62.2148 76.875 62.2148 cv
cp
0 0 0 .35 cmyk
f
91.1582 50.2607 mo
91.1582 59.4561 li
97.5938 59.4561 li
97.5938 62.2148 li
87.4805 62.2148 li
87.4805 36.4688 li
97.5938 36.4688 li
97.5938 39.2266 li
91.1582 39.2266 li
91.1582 47.5029 li
95.7559 47.5029 li
95.7559 50.2607 li
91.1582 50.2607 li
cp
f
105.641 39.2266 mo
103.859 39.2266 102.881 40.2744 102.881 42.0293 cv
102.881 43.624 103.711 44.8594 104.721 45.6631 cv
109.318 49.3418 li
111.199 50.8643 112.994 53.1631 112.994 56.4541 cv
112.994 60.2744 110.422 62.4727 106.559 62.4727 cv
101.746 62.4727 99.4746 59.3545 99.2031 54.8584 cv
102.881 53.9395 li
103.01 56.5957 103.77 59.4561 106.559 59.4561 cv
108.398 59.4561 109.318 58.5361 109.318 56.6973 cv
109.318 54.3857 107.895 53.1787 106.559 52.0996 cv
101.961 48.4219 li
100.379 47.1865 99.1875 45.1465 99.1875 42.416 cv
99.1875 38.5947 101.773 36.21 105.641 36.21 cv
110.193 36.21 112.664 38.7236 112.994 42.9053 cv
109.318 43.8242 li
109.158 41.3818 108.238 39.2266 105.641 39.2266 cv
cp
f
119.531 36.4688 mo
119.531 62.2148 li
115.854 62.2148 li
115.854 36.4688 li
119.531 36.4688 li
cp
f
134.043 53.0195 mo
134.043 52.0996 li
130.363 52.0996 li
130.363 49.3701 li
137.721 49.3701 li
137.721 62.2148 li
134.961 62.2148 li
134.043 59.4561 li
133.496 60.9795 132.445 62.4727 130.363 62.4727 cv
124.359 62.4727 123.008 58.249 123.008 52.1855 cv
123.008 45.6631 li
123.008 40.1328 124.975 36.21 130.508 36.21 cv
135.65 36.21 137.504 39.5723 137.504 44.7441 cv
133.826 44.7441 li
133.826 41.6123 133.582 39.2266 130.508 39.2266 cv
127.434 39.2266 126.686 41.6123 126.686 44.7441 cv
126.686 53.0195 li
126.686 56.4102 127.189 59.4561 130.363 59.4561 cv
133.523 59.4561 134.043 56.3818 134.043 53.0195 cv
cp
f
144.373 45.0889 mo
144.373 62.2148 li
140.695 62.2148 li
140.695 36.4688 li
143.453 36.4688 li
149.891 52.3877 li
149.891 36.4688 li
153.566 36.4688 li
153.566 62.2148 li
150.953 62.2148 li
144.373 45.0889 li
cp
f
163.037 39.2266 mo
161.256 39.2266 160.277 40.2744 160.277 42.0293 cv
160.277 43.624 161.109 44.8594 162.117 45.6631 cv
166.715 49.3418 li
168.596 50.8643 170.393 53.1631 170.393 56.4541 cv
170.393 60.2744 167.82 62.4727 163.955 62.4727 cv
159.143 62.4727 156.871 59.3545 156.6 54.8584 cv
160.277 53.9395 li
160.406 56.5957 161.166 59.4561 163.955 59.4561 cv
165.795 59.4561 166.715 58.5361 166.715 56.6973 cv
166.715 54.3857 165.291 53.1787 163.955 52.0996 cv
159.359 48.4219 li
157.777 47.1865 156.586 45.1465 156.586 42.416 cv
156.586 38.5947 159.172 36.21 163.037 36.21 cv
167.59 36.21 170.061 38.7236 170.393 42.9053 cv
166.715 43.8242 li
166.555 41.3818 165.637 39.2266 163.037 39.2266 cv
cp
f
183.623 50.2607 mo
181.785 50.2607 li
181.785 59.4561 li
183.623 59.4561 li
186.797 59.4561 188.221 58.0762 188.221 54.8584 cv
188.221 51.6396 186.797 50.2607 183.623 50.2607 cv
cp
188.221 42.9053 mo
188.221 39.2705 185.404 39.2266 181.785 39.2266 cv
181.785 47.5029 li
183.623 47.5029 li
186.67 47.5029 188.221 46.0088 188.221 42.9053 cv
cp
184.543 62.2148 mo
178.105 62.2148 li
178.105 36.4688 li
183.623 36.4688 li
188.266 36.4688 191.469 38.3652 191.469 42.9053 cv
191.469 46.251 189.988 47.6748 187.301 48.4219 cv
190.162 49.3701 191.898 51.0215 191.898 54.8584 cv
191.898 59.3984 189.082 62.2148 184.543 62.2148 cv
cp
f
198.061 53.9395 mo
192.545 36.4688 li
196.223 36.4688 li
199.9 49.3418 li
203.578 36.4688 li
207.256 36.4688 li
201.74 53.9395 li
201.74 62.2148 li
198.061 62.2148 li
198.061 53.9395 li
cp
f
217.76 45.0889 mo
217.76 62.2148 li
214.082 62.2148 li
214.082 36.4688 li
216.84 36.4688 li
223.275 52.3877 li
223.275 36.4688 li
226.955 36.4688 li
226.955 62.2148 li
224.34 62.2148 li
217.76 45.0889 li
cp
f
236.148 50.2607 mo
234.311 50.2607 li
234.311 59.4561 li
236.148 59.4561 li
239.322 59.4561 240.746 58.0762 240.746 54.8584 cv
240.746 51.6396 239.322 50.2607 236.148 50.2607 cv
cp
240.746 42.9053 mo
240.746 39.2705 237.932 39.2266 234.311 39.2266 cv
234.311 47.5029 li
236.148 47.5029 li
239.195 47.5029 240.746 46.0088 240.746 42.9053 cv
cp
237.068 62.2148 mo
230.633 62.2148 li
230.633 36.4688 li
236.148 36.4688 li
240.791 36.4688 243.994 38.3652 243.994 42.9053 cv
243.994 46.251 242.516 47.6748 239.828 48.4219 cv
242.688 49.3701 244.426 51.0215 244.426 54.8584 cv
244.426 59.3984 241.609 62.2148 237.068 62.2148 cv
cp
f
77.3555 39.4844 mo
75.4023 39.4844 li
75.4023 59.7139 li
77.4277 59.7139 li
81.3203 59.7139 81.1074 57.0703 81.1074 53.2773 cv
81.1074 45.002 li
81.1074 41.4824 81.0059 39.4844 77.3555 39.4844 cv
cp
77.3984 62.4727 mo
71.7246 62.4727 li
71.7246 36.7266 li
77.4277 36.7266 li
82.8164 36.7266 84.7852 38.6807 84.7852 44.082 cv
84.7852 54.1973 li
84.7852 59.6699 82.8887 62.4727 77.3984 62.4727 cv
cp
0 0 0 1 cmyk
f
91.6816 50.5186 mo
91.6816 59.7139 li
98.1172 59.7139 li
98.1172 62.4727 li
88.0039 62.4727 li
88.0039 36.7266 li
98.1172 36.7266 li
98.1172 39.4844 li
91.6816 39.4844 li
91.6816 47.7607 li
96.2793 47.7607 li
96.2793 50.5186 li
91.6816 50.5186 li
cp
f
106.164 39.4844 mo
104.383 39.4844 103.404 40.5322 103.404 42.2871 cv
103.404 43.8818 104.234 45.1172 105.244 45.9209 cv
109.842 49.5996 li
111.723 51.1221 113.518 53.4209 113.518 56.7119 cv
113.518 60.5322 110.945 62.7305 107.082 62.7305 cv
102.27 62.7305 99.998 59.6123 99.7266 55.1162 cv
103.404 54.1973 li
103.533 56.8535 104.293 59.7139 107.082 59.7139 cv
108.922 59.7139 109.842 58.7939 109.842 56.9551 cv
109.842 54.6436 108.418 53.4365 107.082 52.3574 cv
102.484 48.6797 li
100.902 47.4443 99.7109 45.4043 99.7109 42.6738 cv
99.7109 38.8525 102.297 36.4678 106.164 36.4678 cv
110.717 36.4678 113.188 38.9814 113.518 43.1631 cv
109.842 44.082 li
109.682 41.6396 108.762 39.4844 106.164 39.4844 cv
cp
f
120.055 36.7266 mo
120.055 62.4727 li
116.377 62.4727 li
116.377 36.7266 li
120.055 36.7266 li
cp
f
134.566 53.2773 mo
134.566 52.3574 li
130.887 52.3574 li
130.887 49.6279 li
138.244 49.6279 li
138.244 62.4727 li
135.484 62.4727 li
134.566 59.7139 li
134.02 61.2373 132.969 62.7305 130.887 62.7305 cv
124.883 62.7305 123.531 58.5068 123.531 52.4434 cv
123.531 45.9209 li
123.531 40.3906 125.498 36.4678 131.031 36.4678 cv
136.174 36.4678 138.027 39.8301 138.027 45.002 cv
134.35 45.002 li
134.35 41.8701 134.105 39.4844 131.031 39.4844 cv
127.957 39.4844 127.209 41.8701 127.209 45.002 cv
127.209 53.2773 li
127.209 56.668 127.713 59.7139 130.887 59.7139 cv
134.047 59.7139 134.566 56.6396 134.566 53.2773 cv
cp
f
144.896 45.3467 mo
144.896 62.4727 li
141.219 62.4727 li
141.219 36.7266 li
143.977 36.7266 li
150.414 52.6455 li
150.414 36.7266 li
154.09 36.7266 li
154.09 62.4727 li
151.477 62.4727 li
144.896 45.3467 li
cp
f
163.561 39.4844 mo
161.779 39.4844 160.801 40.5322 160.801 42.2871 cv
160.801 43.8818 161.633 45.1172 162.641 45.9209 cv
167.238 49.5996 li
169.119 51.1221 170.916 53.4209 170.916 56.7119 cv
170.916 60.5322 168.344 62.7305 164.479 62.7305 cv
159.666 62.7305 157.395 59.6123 157.123 55.1162 cv
160.801 54.1973 li
160.93 56.8535 161.689 59.7139 164.479 59.7139 cv
166.318 59.7139 167.238 58.7939 167.238 56.9551 cv
167.238 54.6436 165.814 53.4365 164.479 52.3574 cv
159.883 48.6797 li
158.301 47.4443 157.109 45.4043 157.109 42.6738 cv
157.109 38.8525 159.695 36.4678 163.561 36.4678 cv
168.113 36.4678 170.584 38.9814 170.916 43.1631 cv
167.238 44.082 li
167.078 41.6396 166.16 39.4844 163.561 39.4844 cv
cp
f
184.146 50.5186 mo
182.309 50.5186 li
182.309 59.7139 li
184.146 59.7139 li
187.32 59.7139 188.744 58.334 188.744 55.1162 cv
188.744 51.8975 187.32 50.5186 184.146 50.5186 cv
cp
188.744 43.1631 mo
188.744 39.5283 185.928 39.4844 182.309 39.4844 cv
182.309 47.7607 li
184.146 47.7607 li
187.193 47.7607 188.744 46.2666 188.744 43.1631 cv
cp
185.066 62.4727 mo
178.629 62.4727 li
178.629 36.7266 li
184.146 36.7266 li
188.789 36.7266 191.992 38.623 191.992 43.1631 cv
191.992 46.5088 190.512 47.9326 187.824 48.6797 cv
190.686 49.6279 192.422 51.2793 192.422 55.1162 cv
192.422 59.6563 189.605 62.4727 185.066 62.4727 cv
cp
f
198.584 54.1973 mo
193.068 36.7266 li
196.746 36.7266 li
200.424 49.5996 li
204.102 36.7266 li
207.779 36.7266 li
202.264 54.1973 li
202.264 62.4727 li
198.584 62.4727 li
198.584 54.1973 li
cp
f
218.283 45.3467 mo
218.283 62.4727 li
214.605 62.4727 li
214.605 36.7266 li
217.363 36.7266 li
223.799 52.6455 li
223.799 36.7266 li
227.479 36.7266 li
227.479 62.4727 li
224.863 62.4727 li
218.283 45.3467 li
cp
f
236.672 50.5186 mo
234.834 50.5186 li
234.834 59.7139 li
236.672 59.7139 li
239.846 59.7139 241.27 58.334 241.27 55.1162 cv
241.27 51.8975 239.846 50.5186 236.672 50.5186 cv
cp
241.27 43.1631 mo
241.27 39.5283 238.455 39.4844 234.834 39.4844 cv
234.834 47.7607 li
236.672 47.7607 li
239.719 47.7607 241.27 46.2666 241.27 43.1631 cv
cp
237.592 62.4727 mo
231.156 62.4727 li
231.156 36.7266 li
236.672 36.7266 li
241.314 36.7266 244.518 38.623 244.518 43.1631 cv
244.518 46.5088 243.039 47.9326 240.352 48.6797 cv
243.211 49.6279 244.949 51.2793 244.949 55.1162 cv
244.949 59.6563 242.133 62.4727 237.592 62.4727 cv
cp
f
76.6563 23.3418 mo
73.1475 32.4023 li
71.2012 32.4023 li
76.4609 18.7803 li
77.9307 18.7803 li
78.0869 27.2031 li
81.3604 18.7803 li
83.3203 18.7803 li
78.0127 32.4023 li
76.6299 32.4023 li
76.6563 23.3418 li
cp
0 0 0 .39 cmyk
f
87.1289 21.7002 mo
83.8643 27.5381 li
85.8154 27.5381 li
87.1289 21.7002 li
cp
80.9863 32.4023 mo
79.0391 32.4023 li
87.2939 18.7803 li
89.2539 18.7803 li
86.8242 32.4023 li
84.8779 32.4023 li
85.4854 28.998 li
83.0479 28.998 li
80.9863 32.4023 li
cp
f
95.6504 20.2393 mo
94.6104 20.2393 li
90.375 30.9443 li
91.4482 30.9443 li
93.5098 30.9443 93.9512 29.5449 94.748 27.5381 cv
96.4883 23.1582 li
97.2275 21.2959 97.5928 20.2393 95.6504 20.2393 cv
cp
90.8535 32.4023 mo
87.8516 32.4023 li
93.2285 18.7803 li
96.2676 18.7803 li
99.1377 18.7803 99.7744 19.8135 98.6367 22.6729 cv
96.5049 28.0254 li
95.3535 30.9209 93.7568 32.4023 90.8535 32.4023 cv
cp
f
103.953 18.7803 mo
98.502 32.4023 li
96.5566 32.4023 li
101.994 18.7803 li
103.953 18.7803 li
cp
f
107.869 21.7002 mo
104.541 27.5381 li
106.494 27.5381 li
107.869 21.7002 li
cp
101.611 32.4023 mo
99.665 32.4023 li
108.065 18.7803 li
110.024 18.7803 li
107.451 32.4023 li
105.505 32.4023 li
106.147 28.998 li
103.711 28.998 li
101.611 32.4023 li
cp
f
116.64 26.0781 mo
115.664 26.0781 li
113.68 30.9443 li
114.653 30.9443 li
116.334 30.9443 117.388 30.2139 118.084 28.5107 cv
118.781 26.8086 118.325 26.0781 116.64 26.0781 cv
cp
120.673 22.1855 mo
121.461 20.2627 119.971 20.2393 118.044 20.2393 cv
116.258 24.6191 li
117.235 24.6191 li
118.854 24.6191 120 23.8281 120.673 22.1855 cv
cp
114.544 32.4023 mo
111.139 32.4023 li
116.678 18.7803 li
119.618 18.7803 li
122.091 18.7803 123.387 19.7842 122.4 22.1855 cv
121.674 23.957 120.58 24.71 118.99 25.1055 cv
120.303 25.6064 120.867 26.4805 120.034 28.5107 cv
119.048 30.9131 116.947 32.4023 114.544 32.4023 cv
cp
f
127.224 20.2393 mo
126.733 20.2393 li
124.929 24.6191 li
125.418 24.6191 li
126.998 24.6191 128.108 24.0176 128.766 22.4287 cv
129.423 20.8398 128.807 20.2393 127.224 20.2393 cv
cp
127.702 25.5918 mo
127.074 32.4023 li
125.143 32.4023 li
125.793 26.0781 li
124.328 26.0781 li
121.722 32.4023 li
119.775 32.4023 li
125.376 18.7803 li
127.825 18.7803 li
130.62 18.7803 131.844 19.7227 130.722 22.4287 cv
130.056 24.0332 129.008 25.1807 127.702 25.5918 cv
cp
f
135.911 18.7803 mo
130.236 32.4023 li
128.29 32.4023 li
133.95 18.7803 li
135.911 18.7803 li
cp
f
139.961 27.5381 mo
140.165 27.0508 li
138.213 27.0508 li
138.819 25.6064 li
142.727 25.6064 li
139.862 32.4023 li
138.402 32.4023 li
138.528 30.9443 li
137.901 31.749 137.014 32.54 135.912 32.54 cv
132.733 32.54 132.952 30.3057 134.291 27.0967 cv
135.731 23.6455 li
136.953 20.7188 138.868 18.6436 141.816 18.6436 cv
144.557 18.6436 144.796 20.4219 143.643 23.1582 cv
141.687 23.1582 li
142.384 21.502 142.785 20.2393 141.146 20.2393 cv
139.51 20.2393 138.584 21.502 137.891 23.1582 cv
136.059 27.5381 li
135.309 29.332 134.9 30.9443 136.581 30.9443 cv
138.254 30.9443 139.212 29.3164 139.961 27.5381 cv
cp
f
149.239 18.7803 mo
143.473 32.4023 li
141.527 32.4023 li
147.278 18.7803 li
149.239 18.7803 li
cp
f
156.444 20.5127 mo
153.997 20.5127 li
148.932 32.4023 li
146.985 32.4023 li
152.039 20.5127 li
149.591 20.5127 li
150.326 18.7803 li
157.187 18.7803 li
156.444 20.5127 li
cp
f
163.238 20.5127 mo
160.79 20.5127 li
155.684 32.4023 li
153.736 32.4023 li
158.831 20.5127 li
156.383 20.5127 li
157.124 18.7803 li
163.984 18.7803 li
163.238 20.5127 li
cp
f
163.739 26.0781 mo
161.637 30.9443 li
165.045 30.9443 li
164.411 32.4023 li
159.06 32.4023 li
164.935 18.7803 li
170.324 18.7803 li
169.689 20.2393 li
166.263 20.2393 li
164.369 24.6191 li
166.813 24.6191 li
166.181 26.0781 li
163.739 26.0781 li
cp
f
77.2832 23.4756 mo
73.7744 32.5361 li
71.8281 32.5361 li
77.0879 18.9141 li
78.5576 18.9141 li
78.7139 27.3369 li
81.9873 18.9141 li
83.9473 18.9141 li
78.6396 32.5361 li
77.2568 32.5361 li
77.2832 23.4756 li
cp
0 0 0 1 cmyk
f
87.7559 21.834 mo
84.4912 27.6719 li
86.4424 27.6719 li
87.7559 21.834 li
cp
81.6133 32.5361 mo
79.666 32.5361 li
87.9209 18.9141 li
89.8809 18.9141 li
87.4512 32.5361 li
85.5049 32.5361 li
86.1123 29.1318 li
83.6748 29.1318 li
81.6133 32.5361 li
cp
f
96.2773 20.373 mo
95.2373 20.373 li
91.002 31.0781 li
92.0752 31.0781 li
94.1367 31.0781 94.5781 29.6787 95.375 27.6719 cv
97.1152 23.292 li
97.8545 21.4297 98.2197 20.373 96.2773 20.373 cv
cp
91.4805 32.5361 mo
88.4785 32.5361 li
93.8555 18.9141 li
96.8945 18.9141 li
99.7646 18.9141 100.401 19.9473 99.2637 22.8066 cv
97.1318 28.1592 li
95.9805 31.0547 94.3838 32.5361 91.4805 32.5361 cv
cp
f
104.58 18.9141 mo
99.1289 32.5361 li
97.1836 32.5361 li
102.621 18.9141 li
104.58 18.9141 li
cp
f
108.496 21.834 mo
105.168 27.6719 li
107.121 27.6719 li
108.496 21.834 li
cp
102.238 32.5361 mo
100.292 32.5361 li
108.692 18.9141 li
110.651 18.9141 li
108.078 32.5361 li
106.132 32.5361 li
106.774 29.1318 li
104.338 29.1318 li
102.238 32.5361 li
cp
f
117.267 26.2119 mo
116.291 26.2119 li
114.307 31.0781 li
115.28 31.0781 li
116.961 31.0781 118.015 30.3477 118.711 28.6445 cv
119.408 26.9424 118.952 26.2119 117.267 26.2119 cv
cp
121.3 22.3193 mo
122.088 20.3965 120.598 20.373 118.671 20.373 cv
116.885 24.7529 li
117.862 24.7529 li
119.48 24.7529 120.627 23.9619 121.3 22.3193 cv
cp
115.171 32.5361 mo
111.766 32.5361 li
117.305 18.9141 li
120.245 18.9141 li
122.718 18.9141 124.014 19.918 123.027 22.3193 cv
122.301 24.0908 121.207 24.8438 119.617 25.2393 cv
120.93 25.7402 121.494 26.6143 120.661 28.6445 cv
119.675 31.0469 117.574 32.5361 115.171 32.5361 cv
cp
f
127.851 20.373 mo
127.36 20.373 li
125.556 24.7529 li
126.045 24.7529 li
127.625 24.7529 128.735 24.1514 129.393 22.5625 cv
130.05 20.9736 129.434 20.373 127.851 20.373 cv
cp
128.329 25.7256 mo
127.701 32.5361 li
125.77 32.5361 li
126.42 26.2119 li
124.955 26.2119 li
122.349 32.5361 li
120.402 32.5361 li
126.003 18.9141 li
128.452 18.9141 li
131.247 18.9141 132.471 19.8564 131.349 22.5625 cv
130.683 24.167 129.635 25.3145 128.329 25.7256 cv
cp
f
136.538 18.9141 mo
130.863 32.5361 li
128.917 32.5361 li
134.577 18.9141 li
136.538 18.9141 li
cp
f
140.588 27.6719 mo
140.792 27.1846 li
138.84 27.1846 li
139.446 25.7402 li
143.354 25.7402 li
140.489 32.5361 li
139.029 32.5361 li
139.155 31.0781 li
138.528 31.8828 137.641 32.6738 136.539 32.6738 cv
133.36 32.6738 133.579 30.4395 134.918 27.2305 cv
136.358 23.7793 li
137.58 20.8525 139.495 18.7773 142.443 18.7773 cv
145.184 18.7773 145.423 20.5557 144.27 23.292 cv
142.313 23.292 li
143.011 21.6357 143.412 20.373 141.773 20.373 cv
140.137 20.373 139.211 21.6357 138.518 23.292 cv
136.686 27.6719 li
135.936 29.4658 135.527 31.0781 137.208 31.0781 cv
138.881 31.0781 139.839 29.4502 140.588 27.6719 cv
cp
f
149.866 18.9141 mo
144.1 32.5361 li
142.154 32.5361 li
147.905 18.9141 li
149.866 18.9141 li
cp
f
157.071 20.6465 mo
154.624 20.6465 li
149.559 32.5361 li
147.612 32.5361 li
152.666 20.6465 li
150.218 20.6465 li
150.953 18.9141 li
157.813 18.9141 li
157.071 20.6465 li
cp
f
163.865 20.6465 mo
161.417 20.6465 li
156.311 32.5361 li
154.363 32.5361 li
159.458 20.6465 li
157.01 20.6465 li
157.751 18.9141 li
164.611 18.9141 li
163.865 20.6465 li
cp
f
164.366 26.2119 mo
162.264 31.0781 li
165.672 31.0781 li
165.038 32.5361 li
159.687 32.5361 li
165.562 18.9141 li
170.951 18.9141 li
170.316 20.373 li
166.89 20.373 li
164.996 24.7529 li
167.439 24.7529 li
166.808 26.2119 li
164.366 26.2119 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 2 2
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (2)]
[/TrimBox [6 3 150 255]]
[/BleedBox [6 3 150 255]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -258 translate
pgsv
[0 -1 1 0 0 258 ]ct
gsave
np
gsave
3 6 mo
3 150 li
255 150 li
255 6 li
cp
clp
[1 0 0 1 0 0 ]ct
255.532 152.111 mo
-.928711 152.111 li
-.928711 4.54883 li
255.532 4.54883 li
255.532 152.111 li
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
1 1 .15 1 cmyk
f
256.583 152.109 mo
-8.40234 152.109 li
-8.40234 69.748 li
256.583 69.748 li
256.583 152.109 li
cp
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[238.196 -102.61 102.61 238.196 13.9346 158.382 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.120183 ]
/C1 [.317148 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds [.570552 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[238.196 -102.61 102.61 238.196 13.9346 158.382 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~*ZcCF+<VdM+X&$R+sS<W,U=W],palb-7:/g-n$Jm.4H_r.k<,$/1`A)/M8Y.0/"t40JG490etL>1G^gD
1c.'I2E!HP2`E]U3&ruZ3]];`4$,Pe4?Yhj5!D.p5<qJ!5s[e'6:+%,6UX=177BX77Rfm<7n?0A8P)KG
8kVfM9MA,S9heAX:/=Y]:f'tc;,U:j;cHas<`W:'=BJ^/>$>-7>[1Q@?=.&I?t!JQ@UinYA7]=aAnPdj
Bk_<sCMRa&D/F0.Df9T6EH6)@F*)MHF`qqPGBe@XH$Xd`I!g?jIXZcrJ:N3%JqAW-KS5&6L51P?Ll$tG
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
256.583 75.8291 mo
-8.40234 75.8291 li
-8.40234 69.748 li
256.583 69.748 li
256.583 75.8291 li
cp
0 0 0 .22 cmyk
f
246.341 79.417 mo
245.347 78.0762 243.141 77.3955 239.785 77.3955 cv
231.637 77.3955 li
231.643 77.3789 li
218.29 77.3789 li
218.283 77.3955 li
198.313 77.3955 li
198.307 77.3789 li
188.313 77.3789 li
188.308 77.3955 li
162.539 75.1572 li
158.121 80.793 li
185.04 85.6006 li
181.755 93.8506 li
146.921 95.1279 li
143.871 98.9697 li
178.422 102.219 li
175.157 110.414 li
130.719 115.747 li
128.449 118.642 li
220.146 118.642 li
224.231 118.642 227.63 117.956 230.246 116.603 cv
232.979 115.191 234.975 113.017 236.181 110.142 cv
238.316 105.05 li
239.281 102.745 239.385 100.838 238.622 99.3809 cv
238.175 98.5303 237.449 97.8691 236.448 97.4033 cv
237.707 97.001 238.858 96.4434 239.89 95.7363 cv
241.745 94.4668 243.129 92.7627 244.005 90.6719 cv
246.037 85.8242 li
247.247 82.9375 247.35 80.7813 246.341 79.417 cv
cp
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[118.579 0 0 118.579 128.449 96.8994 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[118.579 0 0 118.579 128.449 96.8994 ]ct
clp
/1 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!$#!WiH+"9\l3"pYA=#RLeE$4@4M%1NdW%hB3_&J5Wg',2,q'c%Q$(Dmu,)B'P6*#ot>*ZcCF+<_mP
+sS<X,UF``-RU;j.4H_r.k</%/M8Y/0/,(70etL?1c.'I2E!KQ3&ioY3]fDc4?Yhk5!M7s5s[h(6UO70
77B[97n?0B8P2TJ92&#R:/4S\:f("d;GpFm<)lq!<``@)=BSd1>?b?;?!UcC?XI2L@:E\U@q9+]AS,Oe
BP;*oC2.O"Ci!s+DJsH4E,fl<EcZ;DF`hkNGB\:VH$O^_H[L3hI=?WpIt3*$JqAW-KS5&5L5(J>Ll$tG
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
208.753 89.6123 mo
216.793 88.9131 li
216.943 88.5439 li
207.488 86.7656 li
208.753 89.6123 li
cp
193.548 105.789 mo
204.686 103.939 li
203.905 101.975 li
195.405 101.175 li
193.548 105.789 li
cp
130.31 116.27 mo
131.202 115.085 li
179.291 108.155 li
182.556 99.9678 li
145.808 96.4648 li
146.864 95.1279 li
185.891 91.5996 li
189.188 83.3252 li
161.532 76.373 li
162.539 75.1572 li
192.437 75.1738 li
192.898 75.1572 li
202.316 75.1572 li
202.324 75.1738 li
222.405 75.1738 li
222.866 75.1572 li
235.847 75.1572 li
235.84 75.1738 li
243.676 75.1738 li
247.134 75.1738 249.329 75.8691 250.39 77.2988 cv
251.468 78.7539 251.388 80.9004 250.147 83.8613 cv
248.116 88.71 li
247.713 89.6738 247.192 90.5625 246.572 91.3496 cv
246.334 91.6396 li
246.047 91.9639 li
245.781 92.2412 li
245.354 92.6504 li
245.074 92.8955 li
244.786 93.1309 li
244.482 93.3643 li
244.379 93.4404 244.273 93.5156 244.166 93.5889 cv
243.101 94.3184 241.896 94.8838 240.566 95.2783 cv
241.534 95.7656 242.249 96.4414 242.701 97.3057 cv
243.495 98.8184 243.404 100.764 242.43 103.087 cv
240.297 108.179 li
239.128 110.963 237.208 113.062 234.588 114.416 cv
232.018 115.745 228.655 116.419 224.595 116.419 cv
130.31 116.27 li
cp
1 /1 /CSD get_res sepcs
level3{
gsave
clp
[120.833 0 0 120.833 130.31 95.7881 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.317148 ]
/C1 [.54416 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[120.833 0 0 120.833 130.31 95.7881 ]ct
clp
/2 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~:f1(e;,U:i;GpFl;c?Xp<)cgs<E3%"<`W7%='&I)=BJ[-=]nm1=^#!4>$G38>?b?;>[1Q??!U`B?=$rF
?XI/J?smAM@:<SQ@U`eU@UinX@q9+\A7T7_AS#IcAnG[gB4kjjBP;'nBk_9qC2.KuCMR^$Ci!p(Ci+$+
D/O6/DJjB2Df9T6E,]c9EH,u=EcQ2AF)uDDFEDVHF`hhLF`qqOG'A.SGB\:VG^+LZH$O^^H?smaH[C*e
I!g<hI=6NlIXZ`pIt)rtIt3'"J:W9&JUrE)JqAW-K7ef0KS5#4KnY58L5(G;LPLY?LkpkCLl$tFM2I1J
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
130.719 115.747 mo
217.164 102.548 li
147.012 95.7969 li
223.249 89.0449 li
161.999 75.8457 li
243.676 75.8457 li
246.875 75.8457 248.935 76.4639 249.851 77.6992 cv
250.766 78.9365 250.658 80.9023 249.527 83.6016 cv
247.497 88.4512 li
246.696 90.3613 245.46 91.8867 243.791 93.0313 cv
242.121 94.1748 240.115 94.8867 237.773 95.1621 cv
239.962 95.4648 241.406 96.2832 242.106 97.6172 cv
242.807 98.9512 242.707 100.688 241.81 102.828 cv
239.678 107.919 li
238.565 110.566 236.768 112.533 234.28 113.82 cv
231.794 115.105 228.565 115.747 224.595 115.747 cv
130.719 115.747 li
cp
1 1 .15 1 cmyk
f
gsave
209.437 116.255 mo
199.433 91.0547 li
189.281 116.255 li
176.117 116.255 li
192.485 75.1572 li
202.476 75.1572 li
212.896 98.5684 li
222.46 75.1572 li
235.813 75.1572 li
218.837 116.255 li
209.437 116.255 li
cp
clp
192.485 75.1572 mo
176.117 116.255 li
192.485 75.1572 li
cp
0 0 0 0 cmyk
f
192.794 75.1572 mo
176.42 116.255 li
176.117 116.255 li
192.485 75.1572 li
192.794 75.1572 li
cp
f
193.104 75.1572 mo
176.727 116.255 li
176.42 116.255 li
192.794 75.1572 li
193.104 75.1572 li
cp
.00390601 0 0 0 cmyk
f
193.412 75.1572 mo
177.032 116.255 li
176.727 116.255 li
193.104 75.1572 li
193.412 75.1572 li
cp
.00781298 .00390601 .00390601 0 cmyk
f
193.722 75.1572 mo
177.337 116.255 li
177.032 116.255 li
193.412 75.1572 li
193.722 75.1572 li
cp
.015625 .00390601 .00781298 0 cmyk
f
194.031 75.1572 mo
177.642 116.255 li
177.337 116.255 li
193.722 75.1572 li
194.031 75.1572 li
cp
.019531 .011719 .00781298 0 cmyk
f
194.341 75.1572 mo
177.947 116.255 li
177.642 116.255 li
194.031 75.1572 li
194.341 75.1572 li
cp
f
194.652 75.1572 mo
178.252 116.255 li
177.947 116.255 li
194.341 75.1572 li
194.652 75.1572 li
cp
.023438 .015625 .011719 0 cmyk
f
194.961 75.1572 mo
178.557 116.255 li
178.252 116.255 li
194.652 75.1572 li
194.961 75.1572 li
cp
.027344 .019531 .015625 0 cmyk
f
195.271 75.1572 mo
178.862 116.255 li
178.557 116.255 li
194.961 75.1572 li
195.271 75.1572 li
cp
.03125 .015625 .019531 0 cmyk
f
195.578 75.1572 mo
179.167 116.255 li
178.862 116.255 li
195.271 75.1572 li
195.578 75.1572 li
cp
.035156 .019531 .019531 0 cmyk
f
195.889 75.1572 mo
179.473 116.255 li
179.167 116.255 li
195.578 75.1572 li
195.889 75.1572 li
cp
.039063 .019531 .023438 0 cmyk
f
196.198 75.1572 mo
179.777 116.255 li
179.473 116.255 li
195.889 75.1572 li
196.198 75.1572 li
cp
.035156 .023438 .023438 0 cmyk
f
196.508 75.1572 mo
180.084 116.255 li
179.777 116.255 li
196.198 75.1572 li
196.508 75.1572 li
cp
.039063 .027344 .023438 0 cmyk
f
196.817 75.1572 mo
180.389 116.255 li
180.084 116.255 li
196.508 75.1572 li
196.817 75.1572 li
cp
.042969 .03125 .027344 0 cmyk
f
197.127 75.1572 mo
180.692 116.255 li
180.389 116.255 li
196.817 75.1572 li
197.127 75.1572 li
cp
.046875 .03125 .03125 0 cmyk
f
197.436 75.1572 mo
180.999 116.255 li
180.692 116.255 li
197.127 75.1572 li
197.436 75.1572 li
cp
.050781 .03125 .035156 0 cmyk
f
197.746 75.1572 mo
181.303 116.255 li
180.999 116.255 li
197.436 75.1572 li
197.746 75.1572 li
cp
.054688 .035156 .035156 0 cmyk
f
198.056 75.1572 mo
181.609 116.255 li
181.303 116.255 li
197.746 75.1572 li
198.056 75.1572 li
cp
.054688 .042969 .035156 0 cmyk
f
198.365 75.1572 mo
181.914 116.255 li
181.609 116.255 li
198.056 75.1572 li
198.365 75.1572 li
cp
.0625 .042969 .039063 0 cmyk
f
198.674 75.1572 mo
182.219 116.255 li
181.914 116.255 li
198.365 75.1572 li
198.674 75.1572 li
cp
.066406 .042969 .046875 0 cmyk
f
198.983 75.1572 mo
182.524 116.255 li
182.219 116.255 li
198.674 75.1572 li
198.983 75.1572 li
cp
.070313 .046875 .042969 0 cmyk
f
199.293 75.1572 mo
182.829 116.255 li
182.524 116.255 li
198.983 75.1572 li
199.293 75.1572 li
cp
.074219 .046875 .046875 0 cmyk
f
199.603 75.1572 mo
183.135 116.255 li
182.829 116.255 li
199.293 75.1572 li
199.603 75.1572 li
cp
.074219 .050781 .050781 0 cmyk
f
199.912 75.1572 mo
183.439 116.255 li
183.135 116.255 li
199.603 75.1572 li
199.912 75.1572 li
cp
.074219 .054688 .054688 0 cmyk
f
200.221 75.1572 mo
183.745 116.255 li
183.439 116.255 li
199.912 75.1572 li
200.221 75.1572 li
cp
.078125 .058594 .054688 0 cmyk
f
200.532 75.1572 mo
184.05 116.255 li
183.745 116.255 li
200.221 75.1572 li
200.532 75.1572 li
cp
.082031 .058594 .058594 0 cmyk
f
200.84 75.1572 mo
184.354 116.255 li
184.05 116.255 li
200.532 75.1572 li
200.84 75.1572 li
cp
.09375 .0625 .0625 0 cmyk
f
201.15 75.1572 mo
184.66 116.255 li
184.354 116.255 li
200.84 75.1572 li
201.15 75.1572 li
cp
.097656 .066406 .066406 0 cmyk
f
201.46 75.1572 mo
184.966 116.255 li
184.66 116.255 li
201.15 75.1572 li
201.46 75.1572 li
cp
.101563 .070313 .070313 0 cmyk
f
201.769 75.1572 mo
185.271 116.255 li
184.966 116.255 li
201.46 75.1572 li
201.769 75.1572 li
cp
f
202.079 75.1572 mo
185.575 116.255 li
185.271 116.255 li
201.769 75.1572 li
202.079 75.1572 li
cp
.105469 .074219 .074219 0 cmyk
f
202.388 75.1572 mo
185.882 116.255 li
185.575 116.255 li
202.079 75.1572 li
202.388 75.1572 li
cp
.109375 .074219 .074219 0 cmyk
f
202.697 75.1572 mo
186.186 116.255 li
185.882 116.255 li
202.388 75.1572 li
202.697 75.1572 li
cp
.109375 .078125 .078125 0 cmyk
f
203.007 75.1572 mo
186.49 116.255 li
186.186 116.255 li
202.697 75.1572 li
203.007 75.1572 li
cp
.113281 .082031 .078125 0 cmyk
f
203.317 75.1572 mo
186.797 116.255 li
186.49 116.255 li
203.007 75.1572 li
203.317 75.1572 li
cp
.121094 .078125 .082031 0 cmyk
f
203.626 75.1572 mo
187.102 116.255 li
186.797 116.255 li
203.317 75.1572 li
203.626 75.1572 li
cp
.121094 .085938 .085938 0 cmyk
f
203.936 75.1572 mo
187.407 116.255 li
187.102 116.255 li
203.626 75.1572 li
203.936 75.1572 li
cp
.125 .089844 .089844 0 cmyk
f
204.244 75.1572 mo
187.712 116.255 li
187.407 116.255 li
203.936 75.1572 li
204.244 75.1572 li
cp
.128906 .09375 .09375 0 cmyk
f
204.555 75.1572 mo
188.018 116.255 li
187.712 116.255 li
204.244 75.1572 li
204.555 75.1572 li
cp
.128906 .097656 .089844 0 cmyk
f
204.864 75.1572 mo
188.321 116.255 li
188.018 116.255 li
204.555 75.1572 li
204.864 75.1572 li
cp
.136719 .09375 .097656 0 cmyk
f
205.174 75.1572 mo
188.627 116.255 li
188.321 116.255 li
204.864 75.1572 li
205.174 75.1572 li
cp
.140625 .097656 .101563 0 cmyk
f
205.482 75.1572 mo
188.933 116.255 li
188.627 116.255 li
205.174 75.1572 li
205.482 75.1572 li
cp
.140625 .101563 .101563 0 cmyk
f
205.792 75.1572 mo
189.238 116.255 li
188.933 116.255 li
205.482 75.1572 li
205.792 75.1572 li
cp
.144531 .105469 .101563 0 cmyk
f
206.102 75.1572 mo
189.542 116.255 li
189.238 116.255 li
205.792 75.1572 li
206.102 75.1572 li
cp
.148438 .109375 .105469 0 cmyk
f
206.411 75.1572 mo
189.848 116.255 li
189.542 116.255 li
206.102 75.1572 li
206.411 75.1572 li
cp
.152344 .113281 .105469 0 cmyk
f
206.722 75.1572 mo
190.153 116.255 li
189.848 116.255 li
206.411 75.1572 li
206.722 75.1572 li
cp
.15625 .109375 .113281 0 cmyk
f
207.031 75.1572 mo
190.458 116.255 li
190.153 116.255 li
206.722 75.1572 li
207.031 75.1572 li
cp
.15625 .113281 .117188 0 cmyk
f
207.34 75.1572 mo
190.764 116.255 li
190.458 116.255 li
207.031 75.1572 li
207.34 75.1572 li
cp
.160156 .121094 .113281 0 cmyk
f
207.649 75.1572 mo
191.068 116.255 li
190.764 116.255 li
207.34 75.1572 li
207.649 75.1572 li
cp
.164063 .121094 .117188 0 cmyk
f
207.959 75.1572 mo
191.374 116.255 li
191.068 116.255 li
207.649 75.1572 li
207.959 75.1572 li
cp
.167969 .125 .121094 0 cmyk
f
208.269 75.1572 mo
191.679 116.255 li
191.374 116.255 li
207.959 75.1572 li
208.269 75.1572 li
cp
.171875 .125 .125 0 cmyk
f
208.577 75.1572 mo
191.984 116.255 li
191.679 116.255 li
208.269 75.1572 li
208.577 75.1572 li
cp
.175781 .125 .128906 0 cmyk
f
208.888 75.1572 mo
192.289 116.255 li
191.984 116.255 li
208.577 75.1572 li
208.888 75.1572 li
cp
.175781 .132813 .125 0 cmyk
f
209.196 75.1572 mo
192.594 116.255 li
192.289 116.255 li
208.888 75.1572 li
209.196 75.1572 li
cp
.179688 .136719 .128906 0 cmyk
f
209.507 75.1572 mo
192.899 116.255 li
192.594 116.255 li
209.196 75.1572 li
209.507 75.1572 li
cp
.1875 .140625 .132813 0 cmyk
f
209.815 75.1572 mo
193.203 116.255 li
192.899 116.255 li
209.507 75.1572 li
209.815 75.1572 li
cp
.191406 .136719 .140625 0 cmyk
f
210.126 75.1572 mo
193.51 116.255 li
193.203 116.255 li
209.815 75.1572 li
210.126 75.1572 li
cp
.195313 .144531 .140625 0 cmyk
f
210.435 75.1572 mo
193.814 116.255 li
193.51 116.255 li
210.126 75.1572 li
210.435 75.1572 li
cp
.203125 .148438 .144531 0 cmyk
f
210.743 75.1572 mo
194.119 116.255 li
193.814 116.255 li
210.435 75.1572 li
210.743 75.1572 li
cp
.207031 .15625 .152344 0 cmyk
f
211.055 75.1572 mo
194.425 116.255 li
194.119 116.255 li
210.743 75.1572 li
211.055 75.1572 li
cp
.210938 .15625 .160156 0 cmyk
f
211.363 75.1572 mo
194.729 116.255 li
194.425 116.255 li
211.055 75.1572 li
211.363 75.1572 li
cp
.214844 .160156 .15625 0 cmyk
f
211.673 75.1572 mo
195.036 116.255 li
194.729 116.255 li
211.363 75.1572 li
211.673 75.1572 li
cp
.21875 .164063 .160156 0 cmyk
f
211.981 75.1572 mo
195.34 116.255 li
195.036 116.255 li
211.673 75.1572 li
211.981 75.1572 li
cp
.222656 .164063 .164063 0 cmyk
f
212.292 75.1572 mo
195.646 116.255 li
195.34 116.255 li
211.981 75.1572 li
212.292 75.1572 li
cp
.226563 .167969 .164063 0 cmyk
f
212.601 75.1572 mo
195.951 116.255 li
195.646 116.255 li
212.292 75.1572 li
212.601 75.1572 li
cp
.226563 .175781 .167969 0 cmyk
f
212.912 75.1572 mo
196.255 116.255 li
195.951 116.255 li
212.601 75.1572 li
212.912 75.1572 li
cp
.230469 .171875 .167969 0 cmyk
f
213.222 75.1572 mo
196.562 116.255 li
196.255 116.255 li
212.912 75.1572 li
213.222 75.1572 li
cp
.234375 .175781 .171875 0 cmyk
f
213.53 75.1572 mo
196.866 116.255 li
196.562 116.255 li
213.222 75.1572 li
213.53 75.1572 li
cp
.238281 .179688 .175781 0 cmyk
f
213.84 75.1572 mo
197.171 116.255 li
196.866 116.255 li
213.53 75.1572 li
213.84 75.1572 li
cp
.246094 .183594 .179688 0 cmyk
f
214.148 75.1572 mo
197.477 116.255 li
197.171 116.255 li
213.84 75.1572 li
214.148 75.1572 li
cp
.246094 .1875 .183594 0 cmyk
f
214.458 75.1572 mo
197.781 116.255 li
197.477 116.255 li
214.148 75.1572 li
214.458 75.1572 li
cp
.25 .1875 .183594 0 cmyk
f
214.768 75.1572 mo
198.086 116.255 li
197.781 116.255 li
214.458 75.1572 li
214.768 75.1572 li
cp
.253906 .191406 .1875 0 cmyk
f
215.077 75.1572 mo
198.393 116.255 li
198.086 116.255 li
214.768 75.1572 li
215.077 75.1572 li
cp
.257813 .195313 .191406 0 cmyk
f
215.387 75.1572 mo
198.696 116.255 li
198.393 116.255 li
215.077 75.1572 li
215.387 75.1572 li
cp
.261719 .199219 .195313 0 cmyk
f
215.696 75.1572 mo
199.002 116.255 li
198.696 116.255 li
215.387 75.1572 li
215.696 75.1572 li
cp
.269531 .203125 .199219 0 cmyk
f
216.005 75.1572 mo
199.308 116.255 li
199.002 116.255 li
215.696 75.1572 li
216.005 75.1572 li
cp
.265625 .207031 .195313 0 cmyk
f
216.315 75.1572 mo
199.611 116.255 li
199.308 116.255 li
216.005 75.1572 li
216.315 75.1572 li
cp
.273438 .207031 .203125 0 cmyk
f
216.624 75.1572 mo
199.917 116.255 li
199.611 116.255 li
216.315 75.1572 li
216.624 75.1572 li
cp
.277344 .210938 .207031 0 cmyk
f
216.936 75.1572 mo
200.223 116.255 li
199.917 116.255 li
216.624 75.1572 li
216.936 75.1572 li
cp
.28125 .214844 .210938 0 cmyk
f
217.243 75.1572 mo
200.527 116.255 li
200.223 116.255 li
216.936 75.1572 li
217.243 75.1572 li
cp
.285156 .21875 .214844 0 cmyk
f
217.554 75.1572 mo
200.832 116.255 li
200.527 116.255 li
217.243 75.1572 li
217.554 75.1572 li
cp
.289063 .222656 .210938 0 cmyk
f
217.862 75.1572 mo
201.139 116.255 li
200.832 116.255 li
217.554 75.1572 li
217.862 75.1572 li
cp
.289063 .21875 .21875 0 cmyk
f
218.172 75.1572 mo
201.442 116.255 li
201.139 116.255 li
217.862 75.1572 li
218.172 75.1572 li
cp
.292969 .222656 .21875 0 cmyk
f
218.481 75.1572 mo
201.748 116.255 li
201.442 116.255 li
218.172 75.1572 li
218.481 75.1572 li
cp
.300781 .230469 .226563 0 cmyk
f
218.791 75.1572 mo
202.054 116.255 li
201.748 116.255 li
218.481 75.1572 li
218.791 75.1572 li
cp
.304688 .234375 .230469 0 cmyk
f
219.101 75.1572 mo
202.357 116.255 li
202.054 116.255 li
218.791 75.1572 li
219.101 75.1572 li
cp
.308594 .238281 .226563 0 cmyk
f
219.41 75.1572 mo
202.664 116.255 li
202.357 116.255 li
219.101 75.1572 li
219.41 75.1572 li
cp
.3125 .242188 .230469 0 cmyk
f
219.721 75.1572 mo
202.969 116.255 li
202.664 116.255 li
219.41 75.1572 li
219.721 75.1572 li
cp
.3125 .238281 .234375 0 cmyk
f
220.028 75.1572 mo
203.273 116.255 li
202.969 116.255 li
219.721 75.1572 li
220.028 75.1572 li
cp
.316406 .242188 .238281 0 cmyk
f
220.338 75.1572 mo
203.579 116.255 li
203.273 116.255 li
220.028 75.1572 li
220.338 75.1572 li
cp
.320313 .246094 .242188 0 cmyk
f
220.648 75.1572 mo
203.885 116.255 li
203.579 116.255 li
220.338 75.1572 li
220.648 75.1572 li
cp
.324219 .253906 .242188 0 cmyk
f
220.958 75.1572 mo
204.188 116.255 li
203.885 116.255 li
220.648 75.1572 li
220.958 75.1572 li
cp
.328125 .257813 .246094 0 cmyk
f
221.267 75.1572 mo
204.494 116.255 li
204.188 116.255 li
220.958 75.1572 li
221.267 75.1572 li
cp
.332031 .257813 .253906 0 cmyk
f
221.577 75.1572 mo
204.801 116.255 li
204.494 116.255 li
221.267 75.1572 li
221.577 75.1572 li
cp
.335938 .261719 .257813 0 cmyk
f
221.886 75.1572 mo
205.104 116.255 li
204.801 116.255 li
221.577 75.1572 li
221.886 75.1572 li
cp
.339844 .265625 .261719 0 cmyk
f
222.195 75.1572 mo
205.41 116.255 li
205.104 116.255 li
221.886 75.1572 li
222.195 75.1572 li
cp
.34375 .269531 .257813 0 cmyk
f
222.504 75.1572 mo
205.716 116.255 li
205.41 116.255 li
222.195 75.1572 li
222.504 75.1572 li
cp
.351563 .273438 .261719 0 cmyk
f
222.815 75.1572 mo
206.021 116.255 li
205.716 116.255 li
222.504 75.1572 li
222.815 75.1572 li
cp
.355469 .269531 .269531 0 cmyk
f
223.124 75.1572 mo
206.325 116.255 li
206.021 116.255 li
222.815 75.1572 li
223.124 75.1572 li
cp
.355469 .277344 .273438 0 cmyk
f
223.434 75.1572 mo
206.631 116.255 li
206.325 116.255 li
223.124 75.1572 li
223.434 75.1572 li
cp
.359375 .28125 .269531 0 cmyk
f
223.743 75.1572 mo
206.937 116.255 li
206.631 116.255 li
223.434 75.1572 li
223.743 75.1572 li
cp
.367188 .285156 .273438 0 cmyk
f
224.052 75.1572 mo
207.24 116.255 li
206.937 116.255 li
223.743 75.1572 li
224.052 75.1572 li
cp
.371094 .292969 .28125 0 cmyk
f
224.362 75.1572 mo
207.546 116.255 li
207.24 116.255 li
224.052 75.1572 li
224.362 75.1572 li
cp
.378906 .289063 .289063 0 cmyk
f
224.671 75.1572 mo
207.852 116.255 li
207.546 116.255 li
224.362 75.1572 li
224.671 75.1572 li
cp
.378906 .296875 .292969 0 cmyk
f
224.98 75.1572 mo
208.156 116.255 li
207.852 116.255 li
224.671 75.1572 li
224.98 75.1572 li
cp
.382813 .300781 .289063 0 cmyk
f
225.29 75.1572 mo
208.462 116.255 li
208.156 116.255 li
224.98 75.1572 li
225.29 75.1572 li
cp
.386719 .304688 .292969 .00390601 cmyk
f
225.6 75.1572 mo
208.767 116.255 li
208.462 116.255 li
225.29 75.1572 li
225.6 75.1572 li
cp
.390625 .308594 .296875 .00390601 cmyk
f
225.909 75.1572 mo
209.073 116.255 li
208.767 116.255 li
225.6 75.1572 li
225.909 75.1572 li
cp
.390625 .308594 .304688 .00390601 cmyk
f
226.219 75.1572 mo
209.377 116.255 li
209.073 116.255 li
225.909 75.1572 li
226.219 75.1572 li
cp
.394531 .3125 .308594 .00390601 cmyk
f
226.529 75.1572 mo
209.682 116.255 li
209.377 116.255 li
226.219 75.1572 li
226.529 75.1572 li
cp
.402344 .316406 .304688 .00390601 cmyk
f
226.837 75.1572 mo
209.988 116.255 li
209.682 116.255 li
226.529 75.1572 li
226.837 75.1572 li
cp
.40625 .320313 .308594 .00390601 cmyk
f
227.147 75.1572 mo
210.293 116.255 li
209.988 116.255 li
226.837 75.1572 li
227.147 75.1572 li
cp
.410156 .316406 .316406 .00390601 cmyk
f
227.457 75.1572 mo
210.599 116.255 li
210.293 116.255 li
227.147 75.1572 li
227.457 75.1572 li
cp
.410156 .324219 .316406 .00390601 cmyk
f
227.767 75.1572 mo
210.903 116.255 li
210.599 116.255 li
227.457 75.1572 li
227.767 75.1572 li
cp
.414063 .328125 .3125 .00390601 cmyk
f
228.075 75.1572 mo
211.208 116.255 li
210.903 116.255 li
227.767 75.1572 li
228.075 75.1572 li
cp
.417969 .332031 .320313 .00390601 cmyk
f
228.386 75.1572 mo
211.513 116.255 li
211.208 116.255 li
228.075 75.1572 li
228.386 75.1572 li
cp
.421875 .335938 .320313 .00781298 cmyk
f
228.694 75.1572 mo
211.818 116.255 li
211.513 116.255 li
228.386 75.1572 li
228.694 75.1572 li
cp
.421875 .332031 .328125 .00781298 cmyk
f
229.004 75.1572 mo
212.123 116.255 li
211.818 116.255 li
228.694 75.1572 li
229.004 75.1572 li
cp
.425781 .335938 .332031 .00781298 cmyk
f
229.314 75.1572 mo
212.43 116.255 li
212.123 116.255 li
229.004 75.1572 li
229.314 75.1572 li
cp
.429688 .339844 .328125 .00781298 cmyk
f
229.623 75.1572 mo
212.733 116.255 li
212.43 116.255 li
229.314 75.1572 li
229.623 75.1572 li
cp
.433594 .34375 .332031 .00781298 cmyk
f
229.933 75.1572 mo
213.039 116.255 li
212.733 116.255 li
229.623 75.1572 li
229.933 75.1572 li
cp
.4375 .34375 .339844 .00781298 cmyk
f
230.242 75.1572 mo
213.343 116.255 li
213.039 116.255 li
229.933 75.1572 li
230.242 75.1572 li
cp
.4375 .347656 .34375 .00781298 cmyk
f
230.552 75.1572 mo
213.649 116.255 li
213.343 116.255 li
230.242 75.1572 li
230.552 75.1572 li
cp
.441406 .351563 .339844 .00781298 cmyk
f
230.86 75.1572 mo
213.954 116.255 li
213.649 116.255 li
230.552 75.1572 li
230.86 75.1572 li
cp
.445313 .355469 .34375 .011719 cmyk
f
231.171 75.1572 mo
214.26 116.255 li
213.954 116.255 li
230.86 75.1572 li
231.171 75.1572 li
cp
.449219 .359375 .347656 .011719 cmyk
f
231.479 75.1572 mo
214.564 116.255 li
214.26 116.255 li
231.171 75.1572 li
231.479 75.1572 li
cp
.449219 .359375 .355469 .015625 cmyk
f
231.789 75.1572 mo
214.869 116.255 li
214.564 116.255 li
231.479 75.1572 li
231.789 75.1572 li
cp
.453125 .363281 .351563 .015625 cmyk
f
232.099 75.1572 mo
215.175 116.255 li
214.869 116.255 li
231.789 75.1572 li
232.099 75.1572 li
cp
.457031 .367188 .351563 .015625 cmyk
f
232.408 75.1572 mo
215.479 116.255 li
215.175 116.255 li
232.099 75.1572 li
232.408 75.1572 li
cp
.460938 .371094 .355469 .019531 cmyk
f
232.718 75.1572 mo
215.785 116.255 li
215.479 116.255 li
232.408 75.1572 li
232.718 75.1572 li
cp
.460938 .367188 .363281 .019531 cmyk
f
233.027 75.1572 mo
216.091 116.255 li
215.785 116.255 li
232.718 75.1572 li
233.027 75.1572 li
cp
.464844 .371094 .359375 .019531 cmyk
f
233.338 75.1572 mo
216.395 116.255 li
216.091 116.255 li
233.027 75.1572 li
233.338 75.1572 li
cp
.46875 .375 .363281 .019531 cmyk
f
233.646 75.1572 mo
216.701 116.255 li
216.395 116.255 li
233.338 75.1572 li
233.646 75.1572 li
cp
.472656 .378906 .367188 .023438 cmyk
f
233.956 75.1572 mo
217.006 116.255 li
216.701 116.255 li
233.646 75.1572 li
233.956 75.1572 li
cp
.472656 .378906 .371094 .023438 cmyk
f
234.266 75.1572 mo
217.311 116.255 li
217.006 116.255 li
233.956 75.1572 li
234.266 75.1572 li
cp
.476563 .382813 .367188 .023438 cmyk
f
234.574 75.1572 mo
217.615 116.255 li
217.311 116.255 li
234.266 75.1572 li
234.574 75.1572 li
cp
.480469 .386719 .371094 .027344 cmyk
f
234.884 75.1572 mo
217.922 116.255 li
217.615 116.255 li
234.574 75.1572 li
234.884 75.1572 li
cp
.484375 .390625 .375 .03125 cmyk
f
235.193 75.1572 mo
218.226 116.255 li
217.922 116.255 li
234.884 75.1572 li
235.193 75.1572 li
cp
f
235.503 75.1572 mo
218.531 116.255 li
218.226 116.255 li
235.193 75.1572 li
235.503 75.1572 li
cp
.484375 .390625 .382813 .03125 cmyk
f
235.813 75.1572 mo
218.837 116.255 li
218.531 116.255 li
235.503 75.1572 li
235.813 75.1572 li
cp
.488281 .394531 .386719 .035156 cmyk
f
218.837 116.255 mo
235.813 75.1572 li
218.837 116.255 li
cp
f
grestore
199.526 89.1396 mo
188.88 115.584 li
177.056 115.584 li
192.898 75.8291 li
201.889 75.8291 li
212.82 100.408 li
222.866 75.8291 li
234.854 75.8291 li
218.443 115.584 li
210.035 115.584 li
199.526 89.1396 li
cp
0 0 0 0 cmyk
f
242.106 97.6172 mo
241.406 96.2832 239.962 95.4648 237.773 95.1621 cv
240.115 94.8867 242.121 94.1748 243.791 93.0313 cv
245.318 91.9854 246.48 90.6152 247.28 88.9287 cv
229.635 88.4717 li
146.393 95.7969 li
217.164 102.548 li
223.622 103.035 li
233.018 103.035 li
241.724 103.035 li
241.81 102.828 li
242.707 100.688 242.807 98.9512 242.106 97.6172 cv
cp
1 1 .15 1 cmyk
f
gsave
209.437 116.255 mo
199.433 91.0547 li
189.281 116.255 li
176.117 116.255 li
192.485 75.1572 li
202.476 75.1572 li
212.896 98.5684 li
222.46 75.1572 li
235.813 75.1572 li
218.837 116.255 li
209.437 116.255 li
cp
clp
grestore
20.3809 45.8311 mo
18.3418 45.8311 li
18.3418 66.9443 li
20.4551 66.9443 li
24.5195 66.9443 24.2939 64.1855 24.2939 60.2266 cv
24.2939 51.5889 li
24.2939 47.915 24.1895 45.8311 20.3809 45.8311 cv
cp
20.4258 69.8232 mo
14.5029 69.8232 li
14.5029 42.9521 li
20.4551 42.9521 li
26.0791 42.9521 28.1338 44.9922 28.1338 50.6289 cv
28.1338 61.1865 li
28.1338 66.8994 26.1533 69.8232 20.4258 69.8232 cv
cp
0 0 0 .85 cmyk
f
35.3311 57.3486 mo
35.3311 66.9443 li
42.0479 66.9443 li
42.0479 69.8232 li
31.4922 69.8232 li
31.4922 42.9521 li
42.0479 42.9521 li
42.0479 45.8311 li
35.3311 45.8311 li
35.3311 54.4688 li
40.1279 54.4688 li
40.1279 57.3486 li
35.3311 57.3486 li
cp
f
50.4453 45.8311 mo
48.5869 45.8311 47.5664 46.9268 47.5664 48.7559 cv
47.5664 50.4199 48.4355 51.709 49.4854 52.5498 cv
54.2842 56.3877 li
56.248 57.9775 58.123 60.377 58.123 63.8105 cv
58.123 67.7979 55.4385 70.0928 51.4043 70.0928 cv
46.3809 70.0928 44.0127 66.8389 43.7285 62.1455 cv
47.5664 61.1865 li
47.7012 63.96 48.4961 66.9443 51.4043 66.9443 cv
53.3242 66.9443 54.2842 65.9854 54.2842 64.0645 cv
54.2842 61.6514 52.7988 60.3916 51.4043 59.2676 cv
46.6064 55.4277 li
44.957 54.1387 43.7129 52.0098 43.7129 49.1602 cv
43.7129 45.1709 46.4121 42.6826 50.4453 42.6826 cv
55.1982 42.6826 57.7773 45.3066 58.123 49.6699 cv
54.2842 50.6289 li
54.1191 48.0801 53.1602 45.8311 50.4453 45.8311 cv
cp
f
64.9463 42.9521 mo
64.9463 69.8232 li
61.1064 69.8232 li
61.1064 42.9521 li
64.9463 42.9521 li
cp
f
80.0908 60.2266 mo
80.0908 59.2676 li
76.252 59.2676 li
76.252 56.418 li
83.9287 56.418 li
83.9287 69.8232 li
81.0498 69.8232 li
80.0908 66.9443 li
79.5215 68.5332 78.4258 70.0928 76.252 70.0928 cv
69.9834 70.0928 68.5742 65.6836 68.5742 59.3564 cv
68.5742 52.5498 li
68.5742 46.7754 70.6289 42.6826 76.4014 42.6826 cv
81.7695 42.6826 83.7031 46.1914 83.7031 51.5889 cv
79.8652 51.5889 li
79.8652 48.3203 79.6104 45.8311 76.4014 45.8311 cv
73.1924 45.8311 72.4121 48.3203 72.4121 51.5889 cv
72.4121 60.2266 li
72.4121 63.7646 72.9375 66.9443 76.252 66.9443 cv
79.5508 66.9443 80.0908 63.7344 80.0908 60.2266 cv
cp
f
90.8721 51.9492 mo
90.8721 69.8232 li
87.0332 69.8232 li
87.0332 42.9521 li
89.9111 42.9521 li
96.6299 59.5664 li
96.6299 42.9521 li
100.469 42.9521 li
100.469 69.8232 li
97.7402 69.8232 li
90.8721 51.9492 li
cp
f
110.35 45.8311 mo
108.49 45.8311 107.472 46.9268 107.472 48.7559 cv
107.472 50.4199 108.341 51.709 109.391 52.5498 cv
114.188 56.3877 li
116.153 57.9775 118.027 60.377 118.027 63.8105 cv
118.027 67.7979 115.344 70.0928 111.31 70.0928 cv
106.286 70.0928 103.917 66.8389 103.632 62.1455 cv
107.472 61.1865 li
107.605 63.96 108.4 66.9443 111.31 66.9443 cv
113.229 66.9443 114.188 65.9854 114.188 64.0645 cv
114.188 61.6514 112.704 60.3916 111.31 59.2676 cv
106.511 55.4277 li
104.862 54.1387 103.617 52.0098 103.617 49.1602 cv
103.617 45.1709 106.316 42.6826 110.35 42.6826 cv
115.104 42.6826 117.684 45.3066 118.027 49.6699 cv
114.188 50.6289 li
114.023 48.0801 113.063 45.8311 110.35 45.8311 cv
cp
f
131.838 57.3486 mo
129.918 57.3486 li
129.918 66.9443 li
131.838 66.9443 li
135.151 66.9443 136.636 65.5049 136.636 62.1455 cv
136.636 58.7871 135.151 57.3486 131.838 57.3486 cv
cp
136.636 49.6699 mo
136.636 45.876 133.696 45.8311 129.918 45.8311 cv
129.918 54.4688 li
131.838 54.4688 li
135.017 54.4688 136.636 52.9092 136.636 49.6699 cv
cp
132.798 69.8232 mo
126.08 69.8232 li
126.08 42.9521 li
131.838 42.9521 li
136.681 42.9521 140.024 44.9316 140.024 49.6699 cv
140.024 53.1631 138.48 54.6475 135.677 55.4277 cv
138.66 56.418 140.474 58.1416 140.474 62.1455 cv
140.474 66.8838 137.535 69.8232 132.798 69.8232 cv
cp
f
146.907 61.1865 mo
141.149 42.9521 li
144.988 42.9521 li
148.826 56.3877 li
152.666 42.9521 li
156.504 42.9521 li
150.746 61.1865 li
150.746 69.8232 li
146.907 69.8232 li
146.907 61.1865 li
cp
f
19.2549 46.957 mo
17.2158 46.957 li
17.2158 68.0693 li
19.3291 68.0693 li
23.3936 68.0693 23.168 65.3115 23.168 61.3525 cv
23.168 52.7148 li
23.168 49.041 23.0635 46.957 19.2549 46.957 cv
cp
19.2998 70.9492 mo
13.377 70.9492 li
13.377 44.0781 li
19.3291 44.0781 li
24.9531 44.0781 27.0078 46.1182 27.0078 51.7549 cv
27.0078 62.3125 li
27.0078 68.0244 25.0273 70.9492 19.2998 70.9492 cv
cp
f
34.2051 58.4746 mo
34.2051 68.0693 li
40.9219 68.0693 li
40.9219 70.9492 li
30.3662 70.9492 li
30.3662 44.0781 li
40.9219 44.0781 li
40.9219 46.957 li
34.2051 46.957 li
34.2051 55.5947 li
39.0029 55.5947 li
39.0029 58.4746 li
34.2051 58.4746 li
cp
f
49.3193 46.957 mo
47.4609 46.957 46.4404 48.0518 46.4404 49.8818 cv
46.4404 51.5459 47.3096 52.835 48.3594 53.6758 cv
53.1582 57.5137 li
55.1221 59.1035 56.9971 61.5029 56.9971 64.9365 cv
56.9971 68.9238 54.3125 71.2188 50.2783 71.2188 cv
45.2549 71.2188 42.8867 67.9648 42.6025 63.2715 cv
46.4404 62.3125 li
46.5752 65.0859 47.3701 68.0693 50.2783 68.0693 cv
52.1982 68.0693 53.1582 67.1104 53.1582 65.1904 cv
53.1582 62.7773 51.6729 61.5176 50.2783 60.3936 cv
45.4805 56.5537 li
43.8311 55.2646 42.5879 53.1357 42.5879 50.2861 cv
42.5879 46.2969 45.2861 43.8086 49.3193 43.8086 cv
54.0723 43.8086 56.6514 46.4326 56.9971 50.7959 cv
53.1582 51.7549 li
52.9932 49.2061 52.0342 46.957 49.3193 46.957 cv
cp
f
63.8203 44.0781 mo
63.8203 70.9492 li
59.9805 70.9492 li
59.9805 44.0781 li
63.8203 44.0781 li
cp
f
78.9648 61.3525 mo
78.9648 60.3936 li
75.126 60.3936 li
75.126 57.5439 li
82.8027 57.5439 li
82.8027 70.9492 li
79.9238 70.9492 li
78.9648 68.0693 li
78.3955 69.6592 77.2998 71.2188 75.126 71.2188 cv
68.8574 71.2188 67.4482 66.8096 67.4482 60.4824 cv
67.4482 53.6758 li
67.4482 47.9014 69.5029 43.8086 75.2754 43.8086 cv
80.6436 43.8086 82.5771 47.3174 82.5771 52.7148 cv
78.7393 52.7148 li
78.7393 49.4463 78.4844 46.957 75.2754 46.957 cv
72.0664 46.957 71.2861 49.4463 71.2861 52.7148 cv
71.2861 61.3525 li
71.2861 64.8906 71.8115 68.0693 75.126 68.0693 cv
78.4248 68.0693 78.9648 64.8604 78.9648 61.3525 cv
cp
f
89.7461 53.0752 mo
89.7461 70.9492 li
85.9072 70.9492 li
85.9072 44.0781 li
88.7852 44.0781 li
95.5039 60.6924 li
95.5039 44.0781 li
99.3428 44.0781 li
99.3428 70.9492 li
96.6143 70.9492 li
89.7461 53.0752 li
cp
f
109.224 46.957 mo
107.364 46.957 106.346 48.0518 106.346 49.8818 cv
106.346 51.5459 107.215 52.835 108.265 53.6758 cv
113.063 57.5137 li
115.027 59.1035 116.901 61.5029 116.901 64.9365 cv
116.901 68.9238 114.218 71.2188 110.184 71.2188 cv
105.16 71.2188 102.791 67.9648 102.506 63.2715 cv
106.346 62.3125 li
106.479 65.0859 107.274 68.0693 110.184 68.0693 cv
112.104 68.0693 113.063 67.1104 113.063 65.1904 cv
113.063 62.7773 111.578 61.5176 110.184 60.3936 cv
105.385 56.5537 li
103.736 55.2646 102.491 53.1357 102.491 50.2861 cv
102.491 46.2969 105.19 43.8086 109.224 43.8086 cv
113.978 43.8086 116.558 46.4326 116.901 50.7959 cv
113.063 51.7549 li
112.897 49.2061 111.938 46.957 109.224 46.957 cv
cp
f
130.712 58.4746 mo
128.792 58.4746 li
128.792 68.0693 li
130.712 68.0693 li
134.025 68.0693 135.51 66.6309 135.51 63.2715 cv
135.51 59.9131 134.025 58.4746 130.712 58.4746 cv
cp
135.51 50.7959 mo
135.51 47.002 132.571 46.957 128.792 46.957 cv
128.792 55.5947 li
130.712 55.5947 li
133.891 55.5947 135.51 54.0352 135.51 50.7959 cv
cp
131.672 70.9492 mo
124.954 70.9492 li
124.954 44.0781 li
130.712 44.0781 li
135.555 44.0781 138.898 46.0576 138.898 50.7959 cv
138.898 54.2891 137.354 55.7734 134.551 56.5537 cv
137.535 57.5439 139.349 59.2676 139.349 63.2715 cv
139.349 68.0098 136.409 70.9492 131.672 70.9492 cv
cp
f
145.781 62.3125 mo
140.023 44.0781 li
143.862 44.0781 li
147.7 57.5137 li
151.54 44.0781 li
155.378 44.0781 li
149.62 62.3125 li
149.62 70.9492 li
145.781 70.9492 li
145.781 62.3125 li
cp
f
19.6768 46.5361 mo
17.6367 46.5361 li
17.6367 67.6475 li
19.752 67.6475 li
23.8154 67.6475 23.5898 64.8896 23.5898 60.9307 cv
23.5898 52.293 li
23.5898 48.6182 23.4854 46.5361 19.6768 46.5361 cv
cp
19.7217 70.5273 mo
13.7988 70.5273 li
13.7988 43.6563 li
19.752 43.6563 li
25.375 43.6563 27.4297 45.6963 27.4297 51.333 cv
27.4297 61.8896 li
27.4297 67.6025 25.4492 70.5273 19.7217 70.5273 cv
cp
0 0 0 0 cmyk
f
34.626 58.0518 mo
34.626 67.6475 li
41.3447 67.6475 li
41.3447 70.5273 li
30.7881 70.5273 li
30.7881 43.6563 li
41.3447 43.6563 li
41.3447 46.5361 li
34.626 46.5361 li
34.626 55.1729 li
39.4248 55.1729 li
39.4248 58.0518 li
34.626 58.0518 li
cp
f
49.7422 46.5361 mo
47.8828 46.5361 46.8633 47.6299 46.8633 49.46 cv
46.8633 51.124 47.7324 52.4121 48.7822 53.2539 cv
53.5801 57.0918 li
55.5449 58.6816 57.4189 61.0811 57.4189 64.5146 cv
57.4189 68.502 54.7344 70.7979 50.7012 70.7979 cv
45.6777 70.7979 43.3096 67.543 43.0244 62.8486 cv
46.8633 61.8896 li
46.9971 64.6641 47.792 67.6475 50.7012 67.6475 cv
52.6201 67.6475 53.5801 66.6885 53.5801 64.7686 cv
53.5801 62.3555 52.0957 61.0957 50.7012 59.9707 cv
45.9023 56.1318 li
44.2539 54.8428 43.0098 52.7139 43.0098 49.8643 cv
43.0098 45.875 45.708 43.3867 49.7422 43.3867 cv
54.4951 43.3867 57.0742 46.0107 57.4189 50.374 cv
53.5801 51.333 li
53.415 48.7852 52.4561 46.5361 49.7422 46.5361 cv
cp
f
64.2422 43.6563 mo
64.2422 70.5273 li
60.4033 70.5273 li
60.4033 43.6563 li
64.2422 43.6563 li
cp
f
79.3867 60.9307 mo
79.3867 59.9707 li
75.5479 59.9707 li
75.5479 57.1221 li
83.2246 57.1221 li
83.2246 70.5273 li
80.3457 70.5273 li
79.3867 67.6475 li
78.8164 69.2373 77.7227 70.7979 75.5479 70.7979 cv
69.2803 70.7979 67.8701 66.3877 67.8701 60.0605 cv
67.8701 53.2539 li
67.8701 47.4795 69.9248 43.3867 75.6973 43.3867 cv
81.0664 43.3867 83 46.8955 83 52.293 cv
79.1621 52.293 li
79.1621 49.0244 78.9063 46.5361 75.6973 46.5361 cv
72.4883 46.5361 71.709 49.0244 71.709 52.293 cv
71.709 60.9307 li
71.709 64.4688 72.2334 67.6475 75.5479 67.6475 cv
78.8467 67.6475 79.3867 64.4395 79.3867 60.9307 cv
cp
f
90.167 52.6533 mo
90.167 70.5273 li
86.3291 70.5273 li
86.3291 43.6563 li
89.208 43.6563 li
95.9248 60.2705 li
95.9248 43.6563 li
99.7646 43.6563 li
99.7646 70.5273 li
97.0361 70.5273 li
90.167 52.6533 li
cp
f
109.646 46.5361 mo
107.786 46.5361 106.768 47.6299 106.768 49.46 cv
106.768 51.124 107.637 52.4121 108.687 53.2539 cv
113.485 57.0918 li
115.449 58.6816 117.323 61.0811 117.323 64.5146 cv
117.323 68.502 114.639 70.7979 110.605 70.7979 cv
105.582 70.7979 103.213 67.543 102.928 62.8486 cv
106.768 61.8896 li
106.901 64.6641 107.696 67.6475 110.605 67.6475 cv
112.525 67.6475 113.485 66.6885 113.485 64.7686 cv
113.485 62.3555 112 61.0957 110.605 59.9707 cv
105.807 56.1318 li
104.158 54.8428 102.913 52.7139 102.913 49.8643 cv
102.913 45.875 105.612 43.3867 109.646 43.3867 cv
114.399 43.3867 116.979 46.0107 117.323 50.374 cv
113.485 51.333 li
113.32 48.7852 112.359 46.5361 109.646 46.5361 cv
cp
f
131.133 58.0518 mo
129.214 58.0518 li
129.214 67.6475 li
131.133 67.6475 li
134.448 67.6475 135.932 66.208 135.932 62.8486 cv
135.932 59.4912 134.448 58.0518 131.133 58.0518 cv
cp
135.932 50.374 mo
135.932 46.5801 132.993 46.5361 129.214 46.5361 cv
129.214 55.1729 li
131.133 55.1729 li
134.313 55.1729 135.932 53.6123 135.932 50.374 cv
cp
132.094 70.5273 mo
125.376 70.5273 li
125.376 43.6563 li
131.133 43.6563 li
135.977 43.6563 139.321 45.6348 139.321 50.374 cv
139.321 53.8682 137.776 55.3516 134.973 56.1318 cv
137.957 57.1221 139.771 58.8457 139.771 62.8486 cv
139.771 67.5879 136.831 70.5273 132.094 70.5273 cv
cp
f
146.203 61.8896 mo
140.445 43.6563 li
144.284 43.6563 li
148.122 57.0918 li
151.962 43.6563 li
155.8 43.6563 li
150.043 61.8896 li
150.043 70.5273 li
146.203 70.5273 li
146.203 61.8896 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
[/CSD [/1 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 2
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
